
REAL_CLOCK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000155c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  0000155c  000015f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000f4  008000f4  00001684  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003125  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a45  00000000  00000000  0000495d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ed  00000000  00000000  000053a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00006b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000672  00000000  00000000  00006f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001987  00000000  00000000  00007592  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00008f19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3f       	cpi	r26, 0xFD	; 253
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 09 	call	0x1274	; 0x1274 <main>
      8a:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidEnable>:
	SET_BIT(ADCSRA , 7);
}

void ADC_voidDisable(void)
{
	CLEAR_BIT(ADCSRA , 7);
      92:	86 b1       	in	r24, 0x06	; 6
      94:	80 68       	ori	r24, 0x80	; 128
      96:	86 b9       	out	0x06, r24	; 6
      98:	08 95       	ret

0000009a <ADC_voidInit>:
      9a:	87 b1       	in	r24, 0x07	; 7
      9c:	80 64       	ori	r24, 0x40	; 64
      9e:	87 b9       	out	0x07, r24	; 7
      a0:	87 b1       	in	r24, 0x07	; 7
      a2:	80 68       	ori	r24, 0x80	; 128
      a4:	87 b9       	out	0x07, r24	; 7
      a6:	87 b1       	in	r24, 0x07	; 7
      a8:	8f 7d       	andi	r24, 0xDF	; 223
      aa:	87 b9       	out	0x07, r24	; 7
      ac:	86 b1       	in	r24, 0x06	; 6
      ae:	81 60       	ori	r24, 0x01	; 1
      b0:	86 b9       	out	0x06, r24	; 6
      b2:	86 b1       	in	r24, 0x06	; 6
      b4:	82 60       	ori	r24, 0x02	; 2
      b6:	86 b9       	out	0x06, r24	; 6
      b8:	86 b1       	in	r24, 0x06	; 6
      ba:	84 60       	ori	r24, 0x04	; 4
      bc:	86 b9       	out	0x06, r24	; 6
      be:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidEnable>
      c2:	08 95       	ret

000000c4 <ADC_u16Convert>:
{
	u8 Local_u8High = 0;
	u8 Local_u8LOW = 0;
	u16 result = 0;
	
	ADMUX = ADMUX & 0b11100000; // mask
      c4:	97 b1       	in	r25, 0x07	; 7
      c6:	90 7e       	andi	r25, 0xE0	; 224
      c8:	97 b9       	out	0x07, r25	; 7
	ADMUX =  ADMUX | Local_u8Channel;
      ca:	97 b1       	in	r25, 0x07	; 7
      cc:	89 2b       	or	r24, r25
      ce:	87 b9       	out	0x07, r24	; 7
	ADCL = 0;
      d0:	14 b8       	out	0x04, r1	; 4
	ADCH = 0;
      d2:	15 b8       	out	0x05, r1	; 5
	// start conversion
	SET_BIT(ADCSRA , 6);
      d4:	86 b1       	in	r24, 0x06	; 6
      d6:	80 64       	ori	r24, 0x40	; 64
      d8:	86 b9       	out	0x06, r24	; 6
	// wait for ADC to finish conversion
	while(GET_BIT(ADCSRA , 6) == 1);
      da:	36 99       	sbic	0x06, 6	; 6
      dc:	fe cf       	rjmp	.-4      	; 0xda <ADC_u16Convert+0x16>
	
	Local_u8LOW = ADCL;
      de:	24 b1       	in	r18, 0x04	; 4
    Local_u8High = ADCH;
      e0:	85 b1       	in	r24, 0x05	; 5

	result = ( (Local_u8High & 0b00000011) << 8) | Local_u8LOW;
      e2:	83 70       	andi	r24, 0x03	; 3
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	98 2f       	mov	r25, r24
      e8:	88 27       	eor	r24, r24
	return result;
}
      ea:	82 2b       	or	r24, r18
      ec:	08 95       	ret

000000ee <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO_private.h"

void DIO_voidInit(void)
{
	DDRA=DIO_U8_PORTA_DIR;
      ee:	88 ef       	ldi	r24, 0xF8	; 248
      f0:	8a bb       	out	0x1a, r24	; 26
	DDRB=DIO_U8_PORTB_DIR;
      f2:	8e e0       	ldi	r24, 0x0E	; 14
      f4:	87 bb       	out	0x17, r24	; 23
	DDRC=DIO_U8_PORTC_DIR;
      f6:	14 ba       	out	0x14, r1	; 20
	DDRD=DIO_U8_PORTD_DIR;
      f8:	11 ba       	out	0x11, r1	; 17
      fa:	08 95       	ret

000000fc <DIO_voidSetPinValue>:
}

void DIO_voidSetPinValue(u8 Copy_u8Pin , u8 Copy_u8Value)
{
	if(Copy_u8Pin <= DIO_U8_PORTA_LAST_PIN)
      fc:	88 30       	cpi	r24, 0x08	; 8
      fe:	00 f5       	brcc	.+64     	; 0x140 <DIO_voidSetPinValue+0x44>
	{
		switch(Copy_u8Value)
     100:	66 23       	and	r22, r22
     102:	81 f0       	breq	.+32     	; 0x124 <DIO_voidSetPinValue+0x28>
     104:	61 30       	cpi	r22, 0x01	; 1
     106:	09 f0       	breq	.+2      	; 0x10a <DIO_voidSetPinValue+0xe>
     108:	81 c0       	rjmp	.+258    	; 0x20c <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTA,Copy_u8Pin); break;
     10a:	4b b3       	in	r20, 0x1b	; 27
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	b9 01       	movw	r22, r18
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_voidSetPinValue+0x1c>
     114:	66 0f       	add	r22, r22
     116:	77 1f       	adc	r23, r23
     118:	8a 95       	dec	r24
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_voidSetPinValue+0x18>
     11c:	cb 01       	movw	r24, r22
     11e:	84 2b       	or	r24, r20
     120:	8b bb       	out	0x1b, r24	; 27
     122:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTA,Copy_u8Pin); break;
     124:	4b b3       	in	r20, 0x1b	; 27
     126:	21 e0       	ldi	r18, 0x01	; 1
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	b9 01       	movw	r22, r18
     12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_voidSetPinValue+0x36>
     12e:	66 0f       	add	r22, r22
     130:	77 1f       	adc	r23, r23
     132:	8a 95       	dec	r24
     134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_voidSetPinValue+0x32>
     136:	cb 01       	movw	r24, r22
     138:	80 95       	com	r24
     13a:	84 23       	and	r24, r20
     13c:	8b bb       	out	0x1b, r24	; 27
     13e:	08 95       	ret
		}
	}
	else if(Copy_u8Pin <= DIO_U8_PORTB_LAST_PIN)
     140:	80 31       	cpi	r24, 0x10	; 16
     142:	08 f5       	brcc	.+66     	; 0x186 <DIO_voidSetPinValue+0x8a>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTA_LAST_PIN + DIO_U8_PORT_OFFSET);
     144:	88 50       	subi	r24, 0x08	; 8
		switch(Copy_u8Value)
     146:	66 23       	and	r22, r22
     148:	81 f0       	breq	.+32     	; 0x16a <DIO_voidSetPinValue+0x6e>
     14a:	61 30       	cpi	r22, 0x01	; 1
     14c:	09 f0       	breq	.+2      	; 0x150 <DIO_voidSetPinValue+0x54>
     14e:	5e c0       	rjmp	.+188    	; 0x20c <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTB,Copy_u8Pin); break;
     150:	48 b3       	in	r20, 0x18	; 24
     152:	21 e0       	ldi	r18, 0x01	; 1
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	b9 01       	movw	r22, r18
     158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_voidSetPinValue+0x62>
     15a:	66 0f       	add	r22, r22
     15c:	77 1f       	adc	r23, r23
     15e:	8a 95       	dec	r24
     160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_voidSetPinValue+0x5e>
     162:	cb 01       	movw	r24, r22
     164:	84 2b       	or	r24, r20
     166:	88 bb       	out	0x18, r24	; 24
     168:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTB,Copy_u8Pin); break;
     16a:	48 b3       	in	r20, 0x18	; 24
     16c:	21 e0       	ldi	r18, 0x01	; 1
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	b9 01       	movw	r22, r18
     172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_voidSetPinValue+0x7c>
     174:	66 0f       	add	r22, r22
     176:	77 1f       	adc	r23, r23
     178:	8a 95       	dec	r24
     17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_voidSetPinValue+0x78>
     17c:	cb 01       	movw	r24, r22
     17e:	80 95       	com	r24
     180:	84 23       	and	r24, r20
     182:	88 bb       	out	0x18, r24	; 24
     184:	08 95       	ret
		}	
	}
	else if(Copy_u8Pin <= DIO_U8_PORTC_LAST_PIN)
     186:	88 31       	cpi	r24, 0x18	; 24
     188:	00 f5       	brcc	.+64     	; 0x1ca <DIO_voidSetPinValue+0xce>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTB_LAST_PIN + DIO_U8_PORT_OFFSET);
     18a:	80 51       	subi	r24, 0x10	; 16
		switch(Copy_u8Value)
     18c:	66 23       	and	r22, r22
     18e:	79 f0       	breq	.+30     	; 0x1ae <DIO_voidSetPinValue+0xb2>
     190:	61 30       	cpi	r22, 0x01	; 1
     192:	e1 f5       	brne	.+120    	; 0x20c <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTC,Copy_u8Pin); break;
     194:	45 b3       	in	r20, 0x15	; 21
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	b9 01       	movw	r22, r18
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_voidSetPinValue+0xa6>
     19e:	66 0f       	add	r22, r22
     1a0:	77 1f       	adc	r23, r23
     1a2:	8a 95       	dec	r24
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_voidSetPinValue+0xa2>
     1a6:	cb 01       	movw	r24, r22
     1a8:	84 2b       	or	r24, r20
     1aa:	85 bb       	out	0x15, r24	; 21
     1ac:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTC,Copy_u8Pin); break;
     1ae:	45 b3       	in	r20, 0x15	; 21
     1b0:	21 e0       	ldi	r18, 0x01	; 1
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	b9 01       	movw	r22, r18
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_voidSetPinValue+0xc0>
     1b8:	66 0f       	add	r22, r22
     1ba:	77 1f       	adc	r23, r23
     1bc:	8a 95       	dec	r24
     1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_voidSetPinValue+0xbc>
     1c0:	cb 01       	movw	r24, r22
     1c2:	80 95       	com	r24
     1c4:	84 23       	and	r24, r20
     1c6:	85 bb       	out	0x15, r24	; 21
     1c8:	08 95       	ret
		}			
	}
	else if(Copy_u8Pin <= DIO_U8_PORTD_LAST_PIN)
     1ca:	80 32       	cpi	r24, 0x20	; 32
     1cc:	f8 f4       	brcc	.+62     	; 0x20c <DIO_voidSetPinValue+0x110>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTC_LAST_PIN + DIO_U8_PORT_OFFSET);
     1ce:	88 51       	subi	r24, 0x18	; 24
		switch(Copy_u8Value)
     1d0:	66 23       	and	r22, r22
     1d2:	79 f0       	breq	.+30     	; 0x1f2 <DIO_voidSetPinValue+0xf6>
     1d4:	61 30       	cpi	r22, 0x01	; 1
     1d6:	d1 f4       	brne	.+52     	; 0x20c <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTD,Copy_u8Pin); break;
     1d8:	42 b3       	in	r20, 0x12	; 18
     1da:	21 e0       	ldi	r18, 0x01	; 1
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	b9 01       	movw	r22, r18
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_voidSetPinValue+0xea>
     1e2:	66 0f       	add	r22, r22
     1e4:	77 1f       	adc	r23, r23
     1e6:	8a 95       	dec	r24
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_voidSetPinValue+0xe6>
     1ea:	cb 01       	movw	r24, r22
     1ec:	84 2b       	or	r24, r20
     1ee:	82 bb       	out	0x12, r24	; 18
     1f0:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTD,Copy_u8Pin); break;
     1f2:	42 b3       	in	r20, 0x12	; 18
     1f4:	21 e0       	ldi	r18, 0x01	; 1
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	b9 01       	movw	r22, r18
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_voidSetPinValue+0x104>
     1fc:	66 0f       	add	r22, r22
     1fe:	77 1f       	adc	r23, r23
     200:	8a 95       	dec	r24
     202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_voidSetPinValue+0x100>
     204:	cb 01       	movw	r24, r22
     206:	80 95       	com	r24
     208:	84 23       	and	r24, r20
     20a:	82 bb       	out	0x12, r24	; 18
     20c:	08 95       	ret

0000020e <LCD_voidSendData>:
	for (u8 i = 0 ; i<4 ; i++)
	{
		arr[i] += 48 ;
		LCD_voidSendData(arr[i]);
	}
}
     20e:	cf 93       	push	r28
     210:	c8 2f       	mov	r28, r24
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	8a e0       	ldi	r24, 0x0A	; 10
     216:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	89 e0       	ldi	r24, 0x09	; 9
     21e:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     222:	c4 fd       	sbrc	r28, 4
     224:	05 c0       	rjmp	.+10     	; 0x230 <LCD_voidSendData+0x22>
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	84 e0       	ldi	r24, 0x04	; 4
     22a:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     22e:	04 c0       	rjmp	.+8      	; 0x238 <LCD_voidSendData+0x2a>
     230:	61 e0       	ldi	r22, 0x01	; 1
     232:	84 e0       	ldi	r24, 0x04	; 4
     234:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     238:	c5 fd       	sbrc	r28, 5
     23a:	05 c0       	rjmp	.+10     	; 0x246 <LCD_voidSendData+0x38>
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	85 e0       	ldi	r24, 0x05	; 5
     240:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     244:	04 c0       	rjmp	.+8      	; 0x24e <LCD_voidSendData+0x40>
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	85 e0       	ldi	r24, 0x05	; 5
     24a:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     24e:	c6 fd       	sbrc	r28, 6
     250:	05 c0       	rjmp	.+10     	; 0x25c <LCD_voidSendData+0x4e>
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	86 e0       	ldi	r24, 0x06	; 6
     256:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     25a:	04 c0       	rjmp	.+8      	; 0x264 <LCD_voidSendData+0x56>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	86 e0       	ldi	r24, 0x06	; 6
     260:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     264:	cc 23       	and	r28, r28
     266:	2c f0       	brlt	.+10     	; 0x272 <LCD_voidSendData+0x64>
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	87 e0       	ldi	r24, 0x07	; 7
     26c:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     270:	04 c0       	rjmp	.+8      	; 0x27a <LCD_voidSendData+0x6c>
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	87 e0       	ldi	r24, 0x07	; 7
     276:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	8b e0       	ldi	r24, 0x0B	; 11
     27e:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     282:	8f e9       	ldi	r24, 0x9F	; 159
     284:	9f e0       	ldi	r25, 0x0F	; 15
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <LCD_voidSendData+0x78>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_voidSendData+0x7e>
     28c:	00 00       	nop
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	8b e0       	ldi	r24, 0x0B	; 11
     292:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     296:	8f e9       	ldi	r24, 0x9F	; 159
     298:	9f e0       	ldi	r25, 0x0F	; 15
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_voidSendData+0x8c>
     29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_voidSendData+0x92>
     2a0:	00 00       	nop
     2a2:	c0 fd       	sbrc	r28, 0
     2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <LCD_voidSendData+0xa2>
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	84 e0       	ldi	r24, 0x04	; 4
     2aa:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <LCD_voidSendData+0xaa>
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     2b8:	c1 fd       	sbrc	r28, 1
     2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <LCD_voidSendData+0xb8>
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	85 e0       	ldi	r24, 0x05	; 5
     2c0:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     2c4:	04 c0       	rjmp	.+8      	; 0x2ce <LCD_voidSendData+0xc0>
     2c6:	61 e0       	ldi	r22, 0x01	; 1
     2c8:	85 e0       	ldi	r24, 0x05	; 5
     2ca:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     2ce:	c2 fd       	sbrc	r28, 2
     2d0:	05 c0       	rjmp	.+10     	; 0x2dc <LCD_voidSendData+0xce>
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	86 e0       	ldi	r24, 0x06	; 6
     2d6:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     2da:	04 c0       	rjmp	.+8      	; 0x2e4 <LCD_voidSendData+0xd6>
     2dc:	61 e0       	ldi	r22, 0x01	; 1
     2de:	86 e0       	ldi	r24, 0x06	; 6
     2e0:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     2e4:	c3 fd       	sbrc	r28, 3
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <LCD_voidSendData+0xe4>
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	87 e0       	ldi	r24, 0x07	; 7
     2ec:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     2f0:	04 c0       	rjmp	.+8      	; 0x2fa <LCD_voidSendData+0xec>
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	87 e0       	ldi	r24, 0x07	; 7
     2f6:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	8b e0       	ldi	r24, 0x0B	; 11
     2fe:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     302:	8f e9       	ldi	r24, 0x9F	; 159
     304:	9f e0       	ldi	r25, 0x0F	; 15
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <LCD_voidSendData+0xf8>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_voidSendData+0xfe>
     30c:	00 00       	nop
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	8b e0       	ldi	r24, 0x0B	; 11
     312:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     316:	8f e9       	ldi	r24, 0x9F	; 159
     318:	9f e0       	ldi	r25, 0x0F	; 15
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_voidSendData+0x10c>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_voidSendData+0x112>
     320:	00 00       	nop
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <LCD_voidSendCommand>:
     326:	cf 93       	push	r28
     328:	c8 2f       	mov	r28, r24
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	8a e0       	ldi	r24, 0x0A	; 10
     32e:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	89 e0       	ldi	r24, 0x09	; 9
     336:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     33a:	c4 fd       	sbrc	r28, 4
     33c:	05 c0       	rjmp	.+10     	; 0x348 <LCD_voidSendCommand+0x22>
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	84 e0       	ldi	r24, 0x04	; 4
     342:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     346:	04 c0       	rjmp	.+8      	; 0x350 <LCD_voidSendCommand+0x2a>
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	84 e0       	ldi	r24, 0x04	; 4
     34c:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     350:	c5 fd       	sbrc	r28, 5
     352:	05 c0       	rjmp	.+10     	; 0x35e <LCD_voidSendCommand+0x38>
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	85 e0       	ldi	r24, 0x05	; 5
     358:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     35c:	04 c0       	rjmp	.+8      	; 0x366 <LCD_voidSendCommand+0x40>
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	85 e0       	ldi	r24, 0x05	; 5
     362:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     366:	c6 fd       	sbrc	r28, 6
     368:	05 c0       	rjmp	.+10     	; 0x374 <LCD_voidSendCommand+0x4e>
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	86 e0       	ldi	r24, 0x06	; 6
     36e:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     372:	04 c0       	rjmp	.+8      	; 0x37c <LCD_voidSendCommand+0x56>
     374:	61 e0       	ldi	r22, 0x01	; 1
     376:	86 e0       	ldi	r24, 0x06	; 6
     378:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     37c:	cc 23       	and	r28, r28
     37e:	2c f0       	brlt	.+10     	; 0x38a <LCD_voidSendCommand+0x64>
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	87 e0       	ldi	r24, 0x07	; 7
     384:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     388:	04 c0       	rjmp	.+8      	; 0x392 <LCD_voidSendCommand+0x6c>
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	87 e0       	ldi	r24, 0x07	; 7
     38e:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	8b e0       	ldi	r24, 0x0B	; 11
     396:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     39a:	8f e9       	ldi	r24, 0x9F	; 159
     39c:	9f e0       	ldi	r25, 0x0F	; 15
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <LCD_voidSendCommand+0x78>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_voidSendCommand+0x7e>
     3a4:	00 00       	nop
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	8b e0       	ldi	r24, 0x0B	; 11
     3aa:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     3ae:	8f e9       	ldi	r24, 0x9F	; 159
     3b0:	9f e0       	ldi	r25, 0x0F	; 15
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_voidSendCommand+0x8c>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_voidSendCommand+0x92>
     3b8:	00 00       	nop
     3ba:	c0 fd       	sbrc	r28, 0
     3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <LCD_voidSendCommand+0xa2>
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <LCD_voidSendCommand+0xaa>
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	84 e0       	ldi	r24, 0x04	; 4
     3cc:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     3d0:	c1 fd       	sbrc	r28, 1
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <LCD_voidSendCommand+0xb8>
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	85 e0       	ldi	r24, 0x05	; 5
     3d8:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <LCD_voidSendCommand+0xc0>
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	85 e0       	ldi	r24, 0x05	; 5
     3e2:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     3e6:	c2 fd       	sbrc	r28, 2
     3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <LCD_voidSendCommand+0xce>
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	86 e0       	ldi	r24, 0x06	; 6
     3ee:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <LCD_voidSendCommand+0xd6>
     3f4:	61 e0       	ldi	r22, 0x01	; 1
     3f6:	86 e0       	ldi	r24, 0x06	; 6
     3f8:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     3fc:	c3 fd       	sbrc	r28, 3
     3fe:	05 c0       	rjmp	.+10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	87 e0       	ldi	r24, 0x07	; 7
     404:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     408:	04 c0       	rjmp	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	87 e0       	ldi	r24, 0x07	; 7
     40e:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     412:	61 e0       	ldi	r22, 0x01	; 1
     414:	8b e0       	ldi	r24, 0x0B	; 11
     416:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     41a:	8f e9       	ldi	r24, 0x9F	; 159
     41c:	9f e0       	ldi	r25, 0x0F	; 15
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     424:	00 00       	nop
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	8b e0       	ldi	r24, 0x0B	; 11
     42a:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     42e:	8f e9       	ldi	r24, 0x9F	; 159
     430:	9f e0       	ldi	r25, 0x0F	; 15
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     438:	00 00       	nop
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <LCD_voidInit>:
     43e:	2f e7       	ldi	r18, 0x7F	; 127
     440:	85 eb       	ldi	r24, 0xB5	; 181
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	21 50       	subi	r18, 0x01	; 1
     446:	80 40       	sbci	r24, 0x00	; 0
     448:	90 40       	sbci	r25, 0x00	; 0
     44a:	e1 f7       	brne	.-8      	; 0x444 <LCD_voidInit+0x6>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <LCD_voidInit+0x10>
     44e:	00 00       	nop
     450:	83 e3       	ldi	r24, 0x33	; 51
     452:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidSendCommand>
     456:	8f e3       	ldi	r24, 0x3F	; 63
     458:	9f e1       	ldi	r25, 0x1F	; 31
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <LCD_voidInit+0x1c>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <LCD_voidInit+0x22>
     460:	00 00       	nop
     462:	82 e3       	ldi	r24, 0x32	; 50
     464:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidSendCommand>
     468:	8f e3       	ldi	r24, 0x3F	; 63
     46a:	9f e1       	ldi	r25, 0x1F	; 31
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <LCD_voidInit+0x2e>
     470:	00 c0       	rjmp	.+0      	; 0x472 <LCD_voidInit+0x34>
     472:	00 00       	nop
     474:	88 e2       	ldi	r24, 0x28	; 40
     476:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidSendCommand>
     47a:	8f e3       	ldi	r24, 0x3F	; 63
     47c:	9f e1       	ldi	r25, 0x1F	; 31
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <LCD_voidInit+0x40>
     482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_voidInit+0x46>
     484:	00 00       	nop
     486:	8c e0       	ldi	r24, 0x0C	; 12
     488:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidSendCommand>
     48c:	8f e3       	ldi	r24, 0x3F	; 63
     48e:	9f e1       	ldi	r25, 0x1F	; 31
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <LCD_voidInit+0x52>
     494:	00 c0       	rjmp	.+0      	; 0x496 <LCD_voidInit+0x58>
     496:	00 00       	nop
     498:	86 e0       	ldi	r24, 0x06	; 6
     49a:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidSendCommand>
     49e:	8f e3       	ldi	r24, 0x3F	; 63
     4a0:	9f e1       	ldi	r25, 0x1F	; 31
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <LCD_voidInit+0x64>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <LCD_voidInit+0x6a>
     4a8:	00 00       	nop
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidSendCommand>
     4b0:	8f e3       	ldi	r24, 0x3F	; 63
     4b2:	9f e1       	ldi	r25, 0x1F	; 31
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_voidInit+0x76>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_voidInit+0x7c>
     4ba:	00 00       	nop
     4bc:	08 95       	ret

000004be <LCD_voidSendString>:
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	8c 01       	movw	r16, r24
     4c6:	c0 e0       	ldi	r28, 0x00	; 0
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <LCD_voidSendString+0x12>
     4ca:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidSendData>
     4ce:	cf 5f       	subi	r28, 0xFF	; 255
     4d0:	f8 01       	movw	r30, r16
     4d2:	ec 0f       	add	r30, r28
     4d4:	f1 1d       	adc	r31, r1
     4d6:	80 81       	ld	r24, Z
     4d8:	81 11       	cpse	r24, r1
     4da:	f7 cf       	rjmp	.-18     	; 0x4ca <LCD_voidSendString+0xc>
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	08 95       	ret

000004e4 <LCD_voidSetCursor>:
     4e4:	86 0f       	add	r24, r22
     4e6:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidSendCommand>
     4ea:	08 95       	ret

000004ec <LCD_voidSendNumberIII>:

void LCD_voidSendNumberIII(u16 Variable)
{
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <LCD_voidSendNumberIII+0x8>
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <LCD_voidSendNumberIII+0xa>
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <LCD_voidSendNumberIII+0xc>
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	fc 01       	movw	r30, r24
	u16 arr[3];
	
	arr [2] = (Variable %10);
     4fe:	9c 01       	movw	r18, r24
     500:	ad ec       	ldi	r26, 0xCD	; 205
     502:	bc ec       	ldi	r27, 0xCC	; 204
     504:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
     508:	ac 01       	movw	r20, r24
     50a:	56 95       	lsr	r21
     50c:	47 95       	ror	r20
     50e:	56 95       	lsr	r21
     510:	47 95       	ror	r20
     512:	56 95       	lsr	r21
     514:	47 95       	ror	r20
     516:	ca 01       	movw	r24, r20
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	44 0f       	add	r20, r20
     51e:	55 1f       	adc	r21, r21
     520:	44 0f       	add	r20, r20
     522:	55 1f       	adc	r21, r21
     524:	44 0f       	add	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	48 0f       	add	r20, r24
     52a:	59 1f       	adc	r21, r25
     52c:	cf 01       	movw	r24, r30
     52e:	84 1b       	sub	r24, r20
     530:	95 0b       	sbc	r25, r21
     532:	ac 01       	movw	r20, r24
     534:	9e 83       	std	Y+6, r25	; 0x06
     536:	8d 83       	std	Y+5, r24	; 0x05
	arr [1] = ((Variable %100)-arr [2])/10;
     538:	36 95       	lsr	r19
     53a:	27 95       	ror	r18
     53c:	36 95       	lsr	r19
     53e:	27 95       	ror	r18
     540:	ab e7       	ldi	r26, 0x7B	; 123
     542:	b4 e1       	ldi	r27, 0x14	; 20
     544:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
     548:	96 95       	lsr	r25
     54a:	87 95       	ror	r24
     54c:	64 e6       	ldi	r22, 0x64	; 100
     54e:	68 9f       	mul	r22, r24
     550:	90 01       	movw	r18, r0
     552:	69 9f       	mul	r22, r25
     554:	30 0d       	add	r19, r0
     556:	11 24       	eor	r1, r1
     558:	cf 01       	movw	r24, r30
     55a:	82 1b       	sub	r24, r18
     55c:	93 0b       	sbc	r25, r19
     55e:	9c 01       	movw	r18, r24
     560:	24 1b       	sub	r18, r20
     562:	35 0b       	sbc	r19, r21
     564:	ad ec       	ldi	r26, 0xCD	; 205
     566:	bc ec       	ldi	r27, 0xCC	; 204
     568:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
     56c:	ac 01       	movw	r20, r24
     56e:	56 95       	lsr	r21
     570:	47 95       	ror	r20
     572:	56 95       	lsr	r21
     574:	47 95       	ror	r20
     576:	56 95       	lsr	r21
     578:	47 95       	ror	r20
     57a:	5c 83       	std	Y+4, r21	; 0x04
     57c:	4b 83       	std	Y+3, r20	; 0x03
	arr [0] =((Variable %1000)-arr [1])/100;
     57e:	9f 01       	movw	r18, r30
     580:	36 95       	lsr	r19
     582:	27 95       	ror	r18
     584:	36 95       	lsr	r19
     586:	27 95       	ror	r18
     588:	36 95       	lsr	r19
     58a:	27 95       	ror	r18
     58c:	a5 ec       	ldi	r26, 0xC5	; 197
     58e:	b0 e2       	ldi	r27, 0x20	; 32
     590:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
     594:	92 95       	swap	r25
     596:	82 95       	swap	r24
     598:	8f 70       	andi	r24, 0x0F	; 15
     59a:	89 27       	eor	r24, r25
     59c:	9f 70       	andi	r25, 0x0F	; 15
     59e:	89 27       	eor	r24, r25
     5a0:	68 ee       	ldi	r22, 0xE8	; 232
     5a2:	73 e0       	ldi	r23, 0x03	; 3
     5a4:	86 9f       	mul	r24, r22
     5a6:	90 01       	movw	r18, r0
     5a8:	87 9f       	mul	r24, r23
     5aa:	30 0d       	add	r19, r0
     5ac:	96 9f       	mul	r25, r22
     5ae:	30 0d       	add	r19, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	cf 01       	movw	r24, r30
     5b4:	82 1b       	sub	r24, r18
     5b6:	93 0b       	sbc	r25, r19
     5b8:	84 1b       	sub	r24, r20
     5ba:	95 0b       	sbc	r25, r21
     5bc:	9c 01       	movw	r18, r24
     5be:	36 95       	lsr	r19
     5c0:	27 95       	ror	r18
     5c2:	36 95       	lsr	r19
     5c4:	27 95       	ror	r18
     5c6:	ab e7       	ldi	r26, 0x7B	; 123
     5c8:	b4 e1       	ldi	r27, 0x14	; 20
     5ca:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
     5ce:	96 95       	lsr	r25
     5d0:	87 95       	ror	r24
     5d2:	9a 83       	std	Y+2, r25	; 0x02
     5d4:	89 83       	std	Y+1, r24	; 0x01
	
	
	for (u8 i = 0 ; i<3 ; i++)
     5d6:	10 e0       	ldi	r17, 0x00	; 0
     5d8:	12 c0       	rjmp	.+36     	; 0x5fe <LCD_voidSendNumberIII+0x112>
	{
		arr[i] += 48 ;
     5da:	e1 2f       	mov	r30, r17
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	8c 0f       	add	r24, r28
     5e8:	9d 1f       	adc	r25, r29
     5ea:	e8 0f       	add	r30, r24
     5ec:	f9 1f       	adc	r31, r25
     5ee:	80 81       	ld	r24, Z
     5f0:	91 81       	ldd	r25, Z+1	; 0x01
     5f2:	c0 96       	adiw	r24, 0x30	; 48
     5f4:	91 83       	std	Z+1, r25	; 0x01
     5f6:	80 83       	st	Z, r24
		LCD_voidSendData(arr[i]);
     5f8:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidSendData>
	arr [2] = (Variable %10);
	arr [1] = ((Variable %100)-arr [2])/10;
	arr [0] =((Variable %1000)-arr [1])/100;
	
	
	for (u8 i = 0 ; i<3 ; i++)
     5fc:	1f 5f       	subi	r17, 0xFF	; 255
     5fe:	13 30       	cpi	r17, 0x03	; 3
     600:	60 f3       	brcs	.-40     	; 0x5da <LCD_voidSendNumberIII+0xee>
	{
		arr[i] += 48 ;
		LCD_voidSendData(arr[i]);
	}
}
     602:	26 96       	adiw	r28, 0x06	; 6
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	08 95       	ret

00000616 <LCD_voidSendNumberII>:

void LCD_voidSendNumberII(u8 Variable )
{
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	00 d0       	rcall	.+0      	; 0x61e <LCD_voidSendNumberII+0x8>
     61e:	00 d0       	rcall	.+0      	; 0x620 <LCD_voidSendNumberII+0xa>
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
	u16 arr[2];
	
	arr [1] = (Variable %10);
     624:	9d ec       	ldi	r25, 0xCD	; 205
     626:	89 9f       	mul	r24, r25
     628:	91 2d       	mov	r25, r1
     62a:	11 24       	eor	r1, r1
     62c:	96 95       	lsr	r25
     62e:	96 95       	lsr	r25
     630:	96 95       	lsr	r25
     632:	99 0f       	add	r25, r25
     634:	29 2f       	mov	r18, r25
     636:	22 0f       	add	r18, r18
     638:	22 0f       	add	r18, r18
     63a:	92 0f       	add	r25, r18
     63c:	48 2f       	mov	r20, r24
     63e:	49 1b       	sub	r20, r25
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	5c 83       	std	Y+4, r21	; 0x04
     644:	4b 83       	std	Y+3, r20	; 0x03
	arr [0] = ((Variable %100)-arr [1])/10;
     646:	99 e2       	ldi	r25, 0x29	; 41
     648:	89 9f       	mul	r24, r25
     64a:	91 2d       	mov	r25, r1
     64c:	11 24       	eor	r1, r1
     64e:	92 95       	swap	r25
     650:	9f 70       	andi	r25, 0x0F	; 15
     652:	24 e6       	ldi	r18, 0x64	; 100
     654:	92 9f       	mul	r25, r18
     656:	80 19       	sub	r24, r0
     658:	11 24       	eor	r1, r1
     65a:	28 2f       	mov	r18, r24
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	24 1b       	sub	r18, r20
     660:	35 0b       	sbc	r19, r21
     662:	ad ec       	ldi	r26, 0xCD	; 205
     664:	bc ec       	ldi	r27, 0xCC	; 204
     666:	0e 94 9d 0a 	call	0x153a	; 0x153a <__umulhisi3>
     66a:	96 95       	lsr	r25
     66c:	87 95       	ror	r24
     66e:	96 95       	lsr	r25
     670:	87 95       	ror	r24
     672:	96 95       	lsr	r25
     674:	87 95       	ror	r24
     676:	9a 83       	std	Y+2, r25	; 0x02
     678:	89 83       	std	Y+1, r24	; 0x01
	
	
	for (u8 i = 0 ; i<2 ; i++)
     67a:	10 e0       	ldi	r17, 0x00	; 0
     67c:	12 c0       	rjmp	.+36     	; 0x6a2 <LCD_voidSendNumberII+0x8c>
	{
		arr[i] += 48 ;
     67e:	e1 2f       	mov	r30, r17
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	8c 0f       	add	r24, r28
     68c:	9d 1f       	adc	r25, r29
     68e:	e8 0f       	add	r30, r24
     690:	f9 1f       	adc	r31, r25
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	c0 96       	adiw	r24, 0x30	; 48
     698:	91 83       	std	Z+1, r25	; 0x01
     69a:	80 83       	st	Z, r24
		LCD_voidSendData(arr[i]);
     69c:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidSendData>
	
	arr [1] = (Variable %10);
	arr [0] = ((Variable %100)-arr [1])/10;
	
	
	for (u8 i = 0 ; i<2 ; i++)
     6a0:	1f 5f       	subi	r17, 0xFF	; 255
     6a2:	12 30       	cpi	r17, 0x02	; 2
     6a4:	60 f3       	brcs	.-40     	; 0x67e <LCD_voidSendNumberII+0x68>
	{
		arr[i] += 48 ;
		LCD_voidSendData(arr[i]);
	}
}
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	08 95       	ret

000006b6 <LCD_voidClear>:

void LCD_voidClear(void)
{
     6b6:	cf 93       	push	r28
	
//	LCD_voidSendCommand(0b00000001);
	
		for(u8 t =0  ; t<16 ; t++)
     6b8:	c0 e0       	ldi	r28, 0x00	; 0
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <LCD_voidClear+0x16>
		{
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
     6bc:	6c 2f       	mov	r22, r28
     6be:	80 e8       	ldi	r24, 0x80	; 128
     6c0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
			LCD_voidSendData(32);
     6c4:	80 e2       	ldi	r24, 0x20	; 32
     6c6:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidSendData>
void LCD_voidClear(void)
{
	
//	LCD_voidSendCommand(0b00000001);
	
		for(u8 t =0  ; t<16 ; t++)
     6ca:	cf 5f       	subi	r28, 0xFF	; 255
     6cc:	c0 31       	cpi	r28, 0x10	; 16
     6ce:	b0 f3       	brcs	.-20     	; 0x6bc <LCD_voidClear+0x6>
     6d0:	c0 e0       	ldi	r28, 0x00	; 0
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <LCD_voidClear+0x2e>
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
			LCD_voidSendData(32);
		}
		for(u8 t =0  ; t<16 ; t++)
		{
			LCD_voidSetCursor(LCD_U8_LINE2 ,t);
     6d4:	6c 2f       	mov	r22, r28
     6d6:	80 ec       	ldi	r24, 0xC0	; 192
     6d8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
			LCD_voidSendData(32);
     6dc:	80 e2       	ldi	r24, 0x20	; 32
     6de:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_voidSendData>
		for(u8 t =0  ; t<16 ; t++)
		{
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
			LCD_voidSendData(32);
		}
		for(u8 t =0  ; t<16 ; t++)
     6e2:	cf 5f       	subi	r28, 0xFF	; 255
     6e4:	c0 31       	cpi	r28, 0x10	; 16
     6e6:	b0 f3       	brcs	.-20     	; 0x6d4 <LCD_voidClear+0x1e>
			LCD_voidSetCursor(LCD_U8_LINE2 ,t);
			LCD_voidSendData(32);
		}
	
	
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <START_TIMER2_FOR_REAL_CLOCK>:
	TIMSK |= (1 << TOIE2);		// enable overflow interrupt
	sei();		// enable global interrupts
}

void START_TIMER2_FOR_REAL_CLOCK(u8 hourr , u8 min , u8 sec , u8 modd )
{
     6ec:	cf 93       	push	r28
	TIMSK = 0 ;			// Disable overflow interrupt
     6ee:	19 be       	out	0x39, r1	; 57
	ASSR  = (1<<AS2);	//Enable asynchronous mode
     6f0:	98 e0       	ldi	r25, 0x08	; 8
     6f2:	92 bd       	out	0x22, r25	; 34
	TCNT2 = 0;
     6f4:	14 bc       	out	0x24, r1	; 36
	TCCR2 |= (1<<CS22)|(1<<CS00);				// set up timer with prescaller = 128
     6f6:	95 b5       	in	r25, 0x25	; 37
     6f8:	95 60       	ori	r25, 0x05	; 5
     6fa:	95 bd       	out	0x25, r25	; 37
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2UB)));	//wait for registers update
     6fc:	92 b5       	in	r25, 0x22	; 34
     6fe:	95 70       	andi	r25, 0x05	; 5
     700:	e9 f7       	brne	.-6      	; 0x6fc <START_TIMER2_FOR_REAL_CLOCK+0x10>
	TIFR  = (1<<TOV2);			//clear interrupt flags
     702:	90 e4       	ldi	r25, 0x40	; 64
     704:	98 bf       	out	0x38, r25	; 56
	TIMSK |= (1 << TOIE2);		// enable overflow interrupt
     706:	99 b7       	in	r25, 0x39	; 57
     708:	90 64       	ori	r25, 0x40	; 64
     70a:	99 bf       	out	0x39, r25	; 57
	sei();		// enable global interrupts
     70c:	78 94       	sei
	
	SECOND = sec;
     70e:	40 93 fc 00 	sts	0x00FC, r20	; 0x8000fc <SECOND>
	MINUTES = min;
     712:	60 93 fb 00 	sts	0x00FB, r22	; 0x8000fb <MINUTES>
	HOUR = hourr ;
     716:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <HOUR>
	MODE = modd ;
     71a:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <MODE>
	u8 EVENT =1 ;
     71e:	c1 e0       	ldi	r28, 0x01	; 1
	while(EVENT)
     720:	57 c0       	rjmp	.+174    	; 0x7d0 <START_TIMER2_FOR_REAL_CLOCK+0xe4>
	{
		LCD_voidSetCursor(LCD_U8_LINE2,1);
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	80 ec       	ldi	r24, 0xC0	; 192
     726:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendNumberII(HOUR);
     72a:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     72e:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		LCD_voidSetCursor(LCD_U8_LINE2,6);
     732:	66 e0       	ldi	r22, 0x06	; 6
     734:	80 ec       	ldi	r24, 0xC0	; 192
     736:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendNumberII(MINUTES);
     73a:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     73e:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		LCD_voidSetCursor(LCD_U8_LINE2,11);
     742:	6b e0       	ldi	r22, 0x0B	; 11
     744:	80 ec       	ldi	r24, 0xC0	; 192
     746:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendNumberII(SECOND);
     74a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
     74e:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		
		if(SECOND == 60 )
     752:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
     756:	8c 33       	cpi	r24, 0x3C	; 60
     758:	39 f4       	brne	.+14     	; 0x768 <START_TIMER2_FOR_REAL_CLOCK+0x7c>
		{
			SECOND = 0 ;
     75a:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <SECOND>
			MINUTES ++ ;
     75e:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     762:	8f 5f       	subi	r24, 0xFF	; 255
     764:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <MINUTES>
		}
		if(MINUTES == 60 )
     768:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     76c:	8c 33       	cpi	r24, 0x3C	; 60
     76e:	39 f4       	brne	.+14     	; 0x77e <START_TIMER2_FOR_REAL_CLOCK+0x92>
		{
			MINUTES = 0 ;
     770:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <MINUTES>
			HOUR ++ ;
     774:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     778:	8f 5f       	subi	r24, 0xFF	; 255
     77a:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <HOUR>
		}
		if(HOUR == 13 )
     77e:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     782:	8d 30       	cpi	r24, 0x0D	; 13
     784:	19 f5       	brne	.+70     	; 0x7cc <START_TIMER2_FOR_REAL_CLOCK+0xe0>
		{
			HOUR = 1 ;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <HOUR>
			MINUTES = 0 ;
     78c:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <MINUTES>
			SECOND = 0 ;
     790:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <SECOND>
			if (MODE==0)
     794:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <MODE>
     798:	81 11       	cpse	r24, r1
     79a:	0c c0       	rjmp	.+24     	; 0x7b4 <START_TIMER2_FOR_REAL_CLOCK+0xc8>
			{
				MODE=1;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <MODE>
				LCD_voidSetCursor(LCD_U8_LINE2,14);
     7a2:	6e e0       	ldi	r22, 0x0E	; 14
     7a4:	80 ec       	ldi	r24, 0xC0	; 192
     7a6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("PM");
     7aa:	80 e6       	ldi	r24, 0x60	; 96
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
     7b2:	0c c0       	rjmp	.+24     	; 0x7cc <START_TIMER2_FOR_REAL_CLOCK+0xe0>
			} 
			else
			{
				MODE=0;
     7b4:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <MODE>
				LCD_voidSetCursor(LCD_U8_LINE2,14);
     7b8:	6e e0       	ldi	r22, 0x0E	; 14
     7ba:	80 ec       	ldi	r24, 0xC0	; 192
     7bc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("AM");
     7c0:	83 e6       	ldi	r24, 0x63	; 99
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
     7c8:	01 c0       	rjmp	.+2      	; 0x7cc <START_TIMER2_FOR_REAL_CLOCK+0xe0>
			}
			
		}
		
		while (GET_BIT(PINC,0)==0)
		{ EVENT = 0 ;}
     7ca:	c0 e0       	ldi	r28, 0x00	; 0
				LCD_voidSendString("AM");
			}
			
		}
		
		while (GET_BIT(PINC,0)==0)
     7cc:	98 9b       	sbis	0x13, 0	; 19
     7ce:	fd cf       	rjmp	.-6      	; 0x7ca <START_TIMER2_FOR_REAL_CLOCK+0xde>
	SECOND = sec;
	MINUTES = min;
	HOUR = hourr ;
	MODE = modd ;
	u8 EVENT =1 ;
	while(EVENT)
     7d0:	c1 11       	cpse	r28, r1
     7d2:	a7 cf       	rjmp	.-178    	; 0x722 <START_TIMER2_FOR_REAL_CLOCK+0x36>
		}
		
		while (GET_BIT(PINC,0)==0)
		{ EVENT = 0 ;}
	}
}
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <START_TIMER2_FOR_ALARM>:

void START_TIMER2_FOR_ALARM(u8 hourr , u8 min , u8 sec , u8 modd ,u8 ahour , u8 amin , u8 asec , u8 amode )
{
     7d8:	af 92       	push	r10
     7da:	cf 92       	push	r12
     7dc:	ef 92       	push	r14
     7de:	0f 93       	push	r16
     7e0:	cf 93       	push	r28
	TIMSK = 0 ;			// Disable overflow interrupt
     7e2:	19 be       	out	0x39, r1	; 57
	ASSR  = (1<<AS2);	//Enable asynchronous mode
     7e4:	98 e0       	ldi	r25, 0x08	; 8
     7e6:	92 bd       	out	0x22, r25	; 34
	TCNT2 = 0;
     7e8:	14 bc       	out	0x24, r1	; 36
	TCCR2 |= (1<<CS22)|(1<<CS00);				// set up timer with prescaller = 128
     7ea:	95 b5       	in	r25, 0x25	; 37
     7ec:	95 60       	ori	r25, 0x05	; 5
     7ee:	95 bd       	out	0x25, r25	; 37
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2UB)));	//wait for registers update
     7f0:	92 b5       	in	r25, 0x22	; 34
     7f2:	95 70       	andi	r25, 0x05	; 5
     7f4:	e9 f7       	brne	.-6      	; 0x7f0 <START_TIMER2_FOR_ALARM+0x18>
	TIFR  = (1<<TOV2);			//clear interrupt flags
     7f6:	90 e4       	ldi	r25, 0x40	; 64
     7f8:	98 bf       	out	0x38, r25	; 56
	TIMSK |= (1 << TOIE2);		// enable overflow interrupt
     7fa:	99 b7       	in	r25, 0x39	; 57
     7fc:	90 64       	ori	r25, 0x40	; 64
     7fe:	99 bf       	out	0x39, r25	; 57
	sei();		// enable global interrupts
     800:	78 94       	sei
	
	SECOND = sec;
     802:	40 93 fc 00 	sts	0x00FC, r20	; 0x8000fc <SECOND>
	MINUTES = min;
     806:	60 93 fb 00 	sts	0x00FB, r22	; 0x8000fb <MINUTES>
	HOUR = hourr ;
     80a:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <HOUR>
	MODE = modd ;
     80e:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <MODE>
	
	LCD_voidClear();
     812:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClear>
	LCD_voidSetCursor(LCD_U8_LINE2,1);
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	80 ec       	ldi	r24, 0xC0	; 192
     81a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
	LCD_voidSendNumberII(ahour);
     81e:	80 2f       	mov	r24, r16
     820:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
	LCD_voidSetCursor(LCD_U8_LINE2,6);
     824:	66 e0       	ldi	r22, 0x06	; 6
     826:	80 ec       	ldi	r24, 0xC0	; 192
     828:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
	LCD_voidSendNumberII(amin);
     82c:	8e 2d       	mov	r24, r14
     82e:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
	LCD_voidSetCursor(LCD_U8_LINE2,11);
     832:	6b e0       	ldi	r22, 0x0B	; 11
     834:	80 ec       	ldi	r24, 0xC0	; 192
     836:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
	LCD_voidSendNumberII(asec);
     83a:	8c 2d       	mov	r24, r12
     83c:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
	
	if (amode==0)
     840:	a1 10       	cpse	r10, r1
     842:	09 c0       	rjmp	.+18     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
	{	LCD_voidSetCursor(LCD_U8_LINE2,14);
     844:	6e e0       	ldi	r22, 0x0E	; 14
     846:	80 ec       	ldi	r24, 0xC0	; 192
     848:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendString("AM");}
     84c:	83 e6       	ldi	r24, 0x63	; 99
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
     854:	08 c0       	rjmp	.+16     	; 0x866 <__stack+0x7>
	else
	{	LCD_voidSetCursor(LCD_U8_LINE2,14);
     856:	6e e0       	ldi	r22, 0x0E	; 14
     858:	80 ec       	ldi	r24, 0xC0	; 192
     85a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendString("PM");}
     85e:	80 e6       	ldi	r24, 0x60	; 96
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
	
	if (MODE==0)
     866:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <MODE>
     86a:	81 11       	cpse	r24, r1
     86c:	09 c0       	rjmp	.+18     	; 0x880 <__stack+0x21>
	{	LCD_voidSetCursor(LCD_U8_LINE1,14);
     86e:	6e e0       	ldi	r22, 0x0E	; 14
     870:	80 e8       	ldi	r24, 0x80	; 128
     872:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendString("AM");}
     876:	83 e6       	ldi	r24, 0x63	; 99
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
     87e:	92 c0       	rjmp	.+292    	; 0x9a4 <__stack+0x145>
	else
	{	LCD_voidSetCursor(LCD_U8_LINE1,14);
     880:	6e e0       	ldi	r22, 0x0E	; 14
     882:	80 e8       	ldi	r24, 0x80	; 128
     884:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendString("PM");}
     888:	80 e6       	ldi	r24, 0x60	; 96
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
     890:	89 c0       	rjmp	.+274    	; 0x9a4 <__stack+0x145>
	
	u8 EVENT =1 ;
	while(EVENT)
	{
		LCD_voidSetCursor(LCD_U8_LINE1,1);
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	80 e8       	ldi	r24, 0x80	; 128
     896:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendNumberII(HOUR);
     89a:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     89e:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		LCD_voidSetCursor(LCD_U8_LINE1,6);
     8a2:	66 e0       	ldi	r22, 0x06	; 6
     8a4:	80 e8       	ldi	r24, 0x80	; 128
     8a6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendNumberII(MINUTES);
     8aa:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     8ae:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		LCD_voidSetCursor(LCD_U8_LINE1,11);
     8b2:	6b e0       	ldi	r22, 0x0B	; 11
     8b4:	80 e8       	ldi	r24, 0x80	; 128
     8b6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendNumberII(SECOND);
     8ba:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
     8be:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		
		if(SECOND == 60 )
     8c2:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
     8c6:	8c 33       	cpi	r24, 0x3C	; 60
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
		{
			SECOND = 0 ;
     8ca:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <SECOND>
			MINUTES ++ ;
     8ce:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <MINUTES>
		}
		if(MINUTES == 60 )
     8d8:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     8dc:	8c 33       	cpi	r24, 0x3C	; 60
     8de:	39 f4       	brne	.+14     	; 0x8ee <__stack+0x8f>
		{
			MINUTES = 0 ;
     8e0:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <MINUTES>
			HOUR ++ ;
     8e4:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     8e8:	8f 5f       	subi	r24, 0xFF	; 255
     8ea:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <HOUR>
		}
		if(HOUR == 13 )
     8ee:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     8f2:	8d 30       	cpi	r24, 0x0D	; 13
     8f4:	09 f5       	brne	.+66     	; 0x938 <__stack+0xd9>
		{
			HOUR = 1 ;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <HOUR>
			MINUTES = 0 ;
     8fc:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <MINUTES>
			SECOND = 0 ;
     900:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <SECOND>
			if (MODE==0)
     904:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <MODE>
     908:	81 11       	cpse	r24, r1
     90a:	0c c0       	rjmp	.+24     	; 0x924 <__stack+0xc5>
			{
				MODE=1;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <MODE>
				LCD_voidSetCursor(LCD_U8_LINE1,14);
     912:	6e e0       	ldi	r22, 0x0E	; 14
     914:	80 e8       	ldi	r24, 0x80	; 128
     916:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("PM");
     91a:	80 e6       	ldi	r24, 0x60	; 96
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
     922:	0a c0       	rjmp	.+20     	; 0x938 <__stack+0xd9>
			}
			else
			{
				MODE=0;
     924:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <MODE>
				LCD_voidSetCursor(LCD_U8_LINE1,14);
     928:	6e e0       	ldi	r22, 0x0E	; 14
     92a:	80 e8       	ldi	r24, 0x80	; 128
     92c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("AM");
     930:	83 e6       	ldi	r24, 0x63	; 99
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
			}
		}
		
		if ((amode==MODE)&&(ahour==HOUR))
     938:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <MODE>
     93c:	a8 12       	cpse	r10, r24
     93e:	2f c0       	rjmp	.+94     	; 0x99e <__stack+0x13f>
     940:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     944:	08 13       	cpse	r16, r24
     946:	2b c0       	rjmp	.+86     	; 0x99e <__stack+0x13f>
		{
			if ((amin==MINUTES)&&(asec==SECOND))
     948:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     94c:	e8 12       	cpse	r14, r24
     94e:	27 c0       	rjmp	.+78     	; 0x99e <__stack+0x13f>
     950:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
     954:	c8 12       	cpse	r12, r24
     956:	23 c0       	rjmp	.+70     	; 0x99e <__stack+0x13f>
     958:	1e c0       	rjmp	.+60     	; 0x996 <__stack+0x137>
			{   
				while (EVENT)
				{
					DIO_voidSetPinValue(BUZZER,1);
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     962:	2f ef       	ldi	r18, 0xFF	; 255
     964:	89 e6       	ldi	r24, 0x69	; 105
     966:	98 e1       	ldi	r25, 0x18	; 24
     968:	21 50       	subi	r18, 0x01	; 1
     96a:	80 40       	sbci	r24, 0x00	; 0
     96c:	90 40       	sbci	r25, 0x00	; 0
     96e:	e1 f7       	brne	.-8      	; 0x968 <__stack+0x109>
     970:	00 c0       	rjmp	.+0      	; 0x972 <__stack+0x113>
     972:	00 00       	nop
					_delay_ms(500);
					DIO_voidSetPinValue(BUZZER,0);
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	83 e0       	ldi	r24, 0x03	; 3
     978:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     97c:	2f ef       	ldi	r18, 0xFF	; 255
     97e:	89 e6       	ldi	r24, 0x69	; 105
     980:	98 e1       	ldi	r25, 0x18	; 24
     982:	21 50       	subi	r18, 0x01	; 1
     984:	80 40       	sbci	r24, 0x00	; 0
     986:	90 40       	sbci	r25, 0x00	; 0
     988:	e1 f7       	brne	.-8      	; 0x982 <__stack+0x123>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <__stack+0x12d>
     98c:	00 00       	nop
     98e:	01 c0       	rjmp	.+2      	; 0x992 <__stack+0x133>
					_delay_ms(500);
					while (GET_BIT(PINC,0)==0)
					{
						EVENT = 0 ;
     990:	c0 e0       	ldi	r28, 0x00	; 0
				{
					DIO_voidSetPinValue(BUZZER,1);
					_delay_ms(500);
					DIO_voidSetPinValue(BUZZER,0);
					_delay_ms(500);
					while (GET_BIT(PINC,0)==0)
     992:	98 9b       	sbis	0x13, 0	; 19
     994:	fd cf       	rjmp	.-6      	; 0x990 <__stack+0x131>
		
		if ((amode==MODE)&&(ahour==HOUR))
		{
			if ((amin==MINUTES)&&(asec==SECOND))
			{   
				while (EVENT)
     996:	c1 11       	cpse	r28, r1
     998:	e0 cf       	rjmp	.-64     	; 0x95a <__stack+0xfb>
     99a:	01 c0       	rjmp	.+2      	; 0x99e <__stack+0x13f>
					}
				}
			}
		}
		while (GET_BIT(PINC,0)==0)
		{ EVENT = 0 ;}
     99c:	c0 e0       	ldi	r28, 0x00	; 0
						EVENT = 0 ;
					}
				}
			}
		}
		while (GET_BIT(PINC,0)==0)
     99e:	98 9b       	sbis	0x13, 0	; 19
     9a0:	fd cf       	rjmp	.-6      	; 0x99c <__stack+0x13d>
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <__stack+0x147>
		{ EVENT = 0 ;}
     9a4:	c1 e0       	ldi	r28, 0x01	; 1
	else
	{	LCD_voidSetCursor(LCD_U8_LINE1,14);
		LCD_voidSendString("PM");}
	
	u8 EVENT =1 ;
	while(EVENT)
     9a6:	c1 11       	cpse	r28, r1
     9a8:	74 cf       	rjmp	.-280    	; 0x892 <__stack+0x33>
			}
		}
		while (GET_BIT(PINC,0)==0)
		{ EVENT = 0 ;}
	}
}
     9aa:	cf 91       	pop	r28
     9ac:	0f 91       	pop	r16
     9ae:	ef 90       	pop	r14
     9b0:	cf 90       	pop	r12
     9b2:	af 90       	pop	r10
     9b4:	08 95       	ret

000009b6 <START_TIMER2_FOR_TIMER>:

void START_TIMER2_FOR_TIMER(u8 hourr , u8 min , u8 sec )
{
     9b6:	cf 93       	push	r28
	TIMSK = 0 ;			// Disable overflow interrupt
     9b8:	19 be       	out	0x39, r1	; 57
	ASSR  = (1<<AS2);	//Enable asynchronous mode
     9ba:	98 e0       	ldi	r25, 0x08	; 8
     9bc:	92 bd       	out	0x22, r25	; 34
	TCNT2 = 0;
     9be:	14 bc       	out	0x24, r1	; 36
	TCCR2 |= (1<<CS22)|(1<<CS00);				// set up timer with prescaller = 128
     9c0:	95 b5       	in	r25, 0x25	; 37
     9c2:	95 60       	ori	r25, 0x05	; 5
     9c4:	95 bd       	out	0x25, r25	; 37
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2UB)));	//wait for registers update
     9c6:	92 b5       	in	r25, 0x22	; 34
     9c8:	95 70       	andi	r25, 0x05	; 5
     9ca:	e9 f7       	brne	.-6      	; 0x9c6 <START_TIMER2_FOR_TIMER+0x10>
	TIFR  = (1<<TOV2);			//clear interrupt flags
     9cc:	90 e4       	ldi	r25, 0x40	; 64
     9ce:	98 bf       	out	0x38, r25	; 56
	TIMSK |= (1 << TOIE2);		// enable overflow interrupt
     9d0:	99 b7       	in	r25, 0x39	; 57
     9d2:	90 64       	ori	r25, 0x40	; 64
     9d4:	99 bf       	out	0x39, r25	; 57
	sei();		// enable global interrupts
     9d6:	78 94       	sei
	
	SECOND = sec;
     9d8:	40 93 fc 00 	sts	0x00FC, r20	; 0x8000fc <SECOND>
	MINUTES = min;
     9dc:	60 93 fb 00 	sts	0x00FB, r22	; 0x8000fb <MINUTES>
	HOUR = hourr ;
     9e0:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <HOUR>
	u8 EVENT =1 ;
     9e4:	c1 e0       	ldi	r28, 0x01	; 1
	while(EVENT)
     9e6:	6b c0       	rjmp	.+214    	; 0xabe <START_TIMER2_FOR_TIMER+0x108>
	{
		LCD_voidSetCursor(LCD_U8_LINE2,1);
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	80 ec       	ldi	r24, 0xC0	; 192
     9ec:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendNumberII(HOUR);
     9f0:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     9f4:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		LCD_voidSetCursor(LCD_U8_LINE2,6);
     9f8:	66 e0       	ldi	r22, 0x06	; 6
     9fa:	80 ec       	ldi	r24, 0xC0	; 192
     9fc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendNumberII(MINUTES);
     a00:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     a04:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		LCD_voidSetCursor(LCD_U8_LINE2,11);
     a08:	6b e0       	ldi	r22, 0x0B	; 11
     a0a:	80 ec       	ldi	r24, 0xC0	; 192
     a0c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendNumberII(SECOND);
     a10:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
     a14:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		
		if ((SECOND == 0)&&(MINUTES > 0))
     a18:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
     a1c:	81 11       	cpse	r24, r1
     a1e:	0c c0       	rjmp	.+24     	; 0xa38 <START_TIMER2_FOR_TIMER+0x82>
     a20:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     a24:	88 23       	and	r24, r24
     a26:	41 f0       	breq	.+16     	; 0xa38 <START_TIMER2_FOR_TIMER+0x82>
		{
			SECOND = 59 ;
     a28:	8b e3       	ldi	r24, 0x3B	; 59
     a2a:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <SECOND>
			MINUTES -- ;
     a2e:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     a32:	81 50       	subi	r24, 0x01	; 1
     a34:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <MINUTES>
		}
		if ((MINUTES == 0)&&(HOUR > 0))
     a38:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     a3c:	81 11       	cpse	r24, r1
     a3e:	0c c0       	rjmp	.+24     	; 0xa58 <START_TIMER2_FOR_TIMER+0xa2>
     a40:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     a44:	88 23       	and	r24, r24
     a46:	41 f0       	breq	.+16     	; 0xa58 <START_TIMER2_FOR_TIMER+0xa2>
		{
			MINUTES = 59 ;
     a48:	8b e3       	ldi	r24, 0x3B	; 59
     a4a:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <MINUTES>
			HOUR -- ;
     a4e:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     a52:	81 50       	subi	r24, 0x01	; 1
     a54:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <HOUR>
		}
		if(HOUR == 0 )
     a58:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     a5c:	81 11       	cpse	r24, r1
     a5e:	2d c0       	rjmp	.+90     	; 0xaba <START_TIMER2_FOR_TIMER+0x104>
		{
			HOUR = 0 ;
     a60:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <HOUR>
			if ((SECOND==0)&&(MINUTES==0))
     a64:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
     a68:	81 11       	cpse	r24, r1
     a6a:	27 c0       	rjmp	.+78     	; 0xaba <START_TIMER2_FOR_TIMER+0x104>
     a6c:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     a70:	88 23       	and	r24, r24
     a72:	f9 f0       	breq	.+62     	; 0xab2 <START_TIMER2_FOR_TIMER+0xfc>
     a74:	22 c0       	rjmp	.+68     	; 0xaba <START_TIMER2_FOR_TIMER+0x104>
			{
				while (EVENT)
				{
					DIO_voidSetPinValue(BUZZER,1);
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	83 e0       	ldi	r24, 0x03	; 3
     a7a:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     a7e:	2f ef       	ldi	r18, 0xFF	; 255
     a80:	89 e6       	ldi	r24, 0x69	; 105
     a82:	98 e1       	ldi	r25, 0x18	; 24
     a84:	21 50       	subi	r18, 0x01	; 1
     a86:	80 40       	sbci	r24, 0x00	; 0
     a88:	90 40       	sbci	r25, 0x00	; 0
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <START_TIMER2_FOR_TIMER+0xce>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <START_TIMER2_FOR_TIMER+0xd8>
     a8e:	00 00       	nop
					_delay_ms(500);
					DIO_voidSetPinValue(BUZZER,0);
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
     a98:	2f ef       	ldi	r18, 0xFF	; 255
     a9a:	89 e6       	ldi	r24, 0x69	; 105
     a9c:	98 e1       	ldi	r25, 0x18	; 24
     a9e:	21 50       	subi	r18, 0x01	; 1
     aa0:	80 40       	sbci	r24, 0x00	; 0
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <START_TIMER2_FOR_TIMER+0xe8>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <START_TIMER2_FOR_TIMER+0xf2>
     aa8:	00 00       	nop
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <START_TIMER2_FOR_TIMER+0xf8>
					_delay_ms(500);
					while (GET_BIT(PINC,0)==0)
					{
						EVENT = 0 ;
     aac:	c0 e0       	ldi	r28, 0x00	; 0
				{
					DIO_voidSetPinValue(BUZZER,1);
					_delay_ms(500);
					DIO_voidSetPinValue(BUZZER,0);
					_delay_ms(500);
					while (GET_BIT(PINC,0)==0)
     aae:	98 9b       	sbis	0x13, 0	; 19
     ab0:	fd cf       	rjmp	.-6      	; 0xaac <START_TIMER2_FOR_TIMER+0xf6>
		if(HOUR == 0 )
		{
			HOUR = 0 ;
			if ((SECOND==0)&&(MINUTES==0))
			{
				while (EVENT)
     ab2:	c1 11       	cpse	r28, r1
     ab4:	e0 cf       	rjmp	.-64     	; 0xa76 <START_TIMER2_FOR_TIMER+0xc0>
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <START_TIMER2_FOR_TIMER+0x104>
					}
				}
			}
		}
		while (GET_BIT(PINC,0)==0)
		{ EVENT = 0 ;}
     ab8:	c0 e0       	ldi	r28, 0x00	; 0
						EVENT = 0 ;
					}
				}
			}
		}
		while (GET_BIT(PINC,0)==0)
     aba:	98 9b       	sbis	0x13, 0	; 19
     abc:	fd cf       	rjmp	.-6      	; 0xab8 <START_TIMER2_FOR_TIMER+0x102>
	
	SECOND = sec;
	MINUTES = min;
	HOUR = hourr ;
	u8 EVENT =1 ;
	while(EVENT)
     abe:	c1 11       	cpse	r28, r1
     ac0:	93 cf       	rjmp	.-218    	; 0x9e8 <START_TIMER2_FOR_TIMER+0x32>
			}
		}
		while (GET_BIT(PINC,0)==0)
		{ EVENT = 0 ;}
	}
}
     ac2:	cf 91       	pop	r28
     ac4:	08 95       	ret

00000ac6 <START_TIMER2_FOR_STOP_WATCH>:

void START_TIMER2_FOR_STOP_WATCH( void )
{
     ac6:	cf 93       	push	r28
	DECI_SECOND =0 ;
     ac8:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <DECI_SECOND>
	SECOND =0 ;
     acc:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <SECOND>
	MINUTES =0 ;
     ad0:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <MINUTES>
	HOUR = 0 ;
     ad4:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <HOUR>
	TIMSK = 0 ;			// Disable overflow interrupt
     ad8:	19 be       	out	0x39, r1	; 57
	ASSR  = (1<<AS2);	//Enable asynchronous mode
     ada:	88 e0       	ldi	r24, 0x08	; 8
     adc:	82 bd       	out	0x22, r24	; 34
	TCNT2 = 185;
     ade:	89 eb       	ldi	r24, 0xB9	; 185
     ae0:	84 bd       	out	0x24, r24	; 36
	TCCR2 |= (1<<CS20);				//(0<<CS22)| set up timer without prescaller
     ae2:	85 b5       	in	r24, 0x25	; 37
     ae4:	81 60       	ori	r24, 0x01	; 1
     ae6:	85 bd       	out	0x25, r24	; 37
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2UB)));	//wait for registers update
     ae8:	82 b5       	in	r24, 0x22	; 34
     aea:	85 70       	andi	r24, 0x05	; 5
     aec:	e9 f7       	brne	.-6      	; 0xae8 <START_TIMER2_FOR_STOP_WATCH+0x22>
	TIFR  = (1<<TOV2);			//clear interrupt flags
     aee:	80 e4       	ldi	r24, 0x40	; 64
     af0:	88 bf       	out	0x38, r24	; 56
	TIMSK |= (1 << TOIE2);		// enable overflow interrupt
     af2:	89 b7       	in	r24, 0x39	; 57
     af4:	80 64       	ori	r24, 0x40	; 64
     af6:	89 bf       	out	0x39, r24	; 57
	sei();		// enable global interrupts
     af8:	78 94       	sei
	u8 EVENT = 1;
     afa:	c1 e0       	ldi	r28, 0x01	; 1
		while(EVENT)
     afc:	2d c0       	rjmp	.+90     	; 0xb58 <START_TIMER2_FOR_STOP_WATCH+0x92>
		{
			LCD_voidSetCursor(LCD_U8_LINE2,0);
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	80 ec       	ldi	r24, 0xC0	; 192
     b02:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
			LCD_voidSendNumberII(HOUR);
     b06:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
     b0a:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
			LCD_voidSetCursor(LCD_U8_LINE2,4);
     b0e:	64 e0       	ldi	r22, 0x04	; 4
     b10:	80 ec       	ldi	r24, 0xC0	; 192
     b12:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
			LCD_voidSendNumberII(MINUTES);
     b16:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
     b1a:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
			LCD_voidSetCursor(LCD_U8_LINE2,8);
     b1e:	68 e0       	ldi	r22, 0x08	; 8
     b20:	80 ec       	ldi	r24, 0xC0	; 192
     b22:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
			LCD_voidSendNumberII(SECOND);
     b26:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
     b2a:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
			LCD_voidSetCursor(LCD_U8_LINE2,12);
     b2e:	6c e0       	ldi	r22, 0x0C	; 12
     b30:	80 ec       	ldi	r24, 0xC0	; 192
     b32:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
			LCD_voidSendNumberII(DECI_SECOND);
     b36:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <DECI_SECOND>
     b3a:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
			
			
			while (GET_BIT(PINC,0)==0)
     b3e:	0a c0       	rjmp	.+20     	; 0xb54 <START_TIMER2_FOR_STOP_WATCH+0x8e>
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	87 ea       	ldi	r24, 0xA7	; 167
     b44:	91 e6       	ldi	r25, 0x61	; 97
     b46:	21 50       	subi	r18, 0x01	; 1
     b48:	80 40       	sbci	r24, 0x00	; 0
     b4a:	90 40       	sbci	r25, 0x00	; 0
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <START_TIMER2_FOR_STOP_WATCH+0x80>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <START_TIMER2_FOR_STOP_WATCH+0x8a>
     b50:	00 00       	nop
			{
				EVENT = 0 ;
     b52:	c0 e0       	ldi	r28, 0x00	; 0
			LCD_voidSendNumberII(SECOND);
			LCD_voidSetCursor(LCD_U8_LINE2,12);
			LCD_voidSendNumberII(DECI_SECOND);
			
			
			while (GET_BIT(PINC,0)==0)
     b54:	98 9b       	sbis	0x13, 0	; 19
     b56:	f4 cf       	rjmp	.-24     	; 0xb40 <START_TIMER2_FOR_STOP_WATCH+0x7a>
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2UB)));	//wait for registers update
	TIFR  = (1<<TOV2);			//clear interrupt flags
	TIMSK |= (1 << TOIE2);		// enable overflow interrupt
	sei();		// enable global interrupts
	u8 EVENT = 1;
		while(EVENT)
     b58:	c1 11       	cpse	r28, r1
     b5a:	d1 cf       	rjmp	.-94     	; 0xafe <START_TIMER2_FOR_STOP_WATCH+0x38>
			{
				EVENT = 0 ;
				_delay_ms(2000);
			}
		}
}
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <GET_CHOICE_FROM4>:

void GET_CHOICE_FROM4(void)
{
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
	u16 VRY , VRX ;
	u8 EVENT = 1;
	LCD_voidSetCursor(LCD_U8_LINE1,0);
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	80 e8       	ldi	r24, 0x80	; 128
     b6e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
	LCD_voidSendString("*");
     b72:	86 e6       	ldi	r24, 0x66	; 102
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
}

void GET_CHOICE_FROM4(void)
{
	u16 VRY , VRX ;
	u8 EVENT = 1;
     b7a:	ff 24       	eor	r15, r15
     b7c:	f3 94       	inc	r15
	LCD_voidSetCursor(LCD_U8_LINE1,0);
	LCD_voidSendString("*");
	
	    while (EVENT)
     b7e:	6b c1       	rjmp	.+726    	; 0xe56 <GET_CHOICE_FROM4+0x2f6>
	    {
		    VRY = ADC_u16Convert(ADC_u8_Channel0);
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_u16Convert>
     b88:	8c 01       	movw	r16, r24
		    VRX = ADC_u16Convert(ADC_u8_Channel1);
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_u16Convert>
     b92:	ec 01       	movw	r28, r24
		    
		    if (VRY == 0)
     b94:	01 15       	cp	r16, r1
     b96:	11 05       	cpc	r17, r1
     b98:	31 f0       	breq	.+12     	; 0xba6 <GET_CHOICE_FROM4+0x46>
     b9a:	52 c0       	rjmp	.+164    	; 0xc40 <GET_CHOICE_FROM4+0xe0>
		    {
			    while(VRY == 0){VRY = ADC_u16Convert(ADC_u8_Channel1);};
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_u16Convert>
     ba4:	8c 01       	movw	r16, r24
     ba6:	01 15       	cp	r16, r1
     ba8:	11 05       	cpc	r17, r1
     baa:	c1 f3       	breq	.-16     	; 0xb9c <GET_CHOICE_FROM4+0x3c>
			    POS[SOUFOOF]=0;
     bac:	e5 ef       	ldi	r30, 0xF5	; 245
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	10 82       	st	Z, r1
			    if (POS[A3MEDA]==LEFT)
     bb2:	81 81       	ldd	r24, Z+1	; 0x01
     bb4:	81 11       	cpse	r24, r1
     bb6:	20 c0       	rjmp	.+64     	; 0xbf8 <GET_CHOICE_FROM4+0x98>
			    {
				    LCD_voidSetCursor(LCD_U8_LINE1,0);
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	80 e8       	ldi	r24, 0x80	; 128
     bbc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString("*");
     bc0:	86 e6       	ldi	r24, 0x66	; 102
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE1,8);
     bc8:	68 e0       	ldi	r22, 0x08	; 8
     bca:	80 e8       	ldi	r24, 0x80	; 128
     bcc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     bd0:	88 e6       	ldi	r24, 0x68	; 104
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,0);
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	80 ec       	ldi	r24, 0xC0	; 192
     bdc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     be0:	88 e6       	ldi	r24, 0x68	; 104
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,8);
     be8:	68 e0       	ldi	r22, 0x08	; 8
     bea:	80 ec       	ldi	r24, 0xC0	; 192
     bec:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     bf0:	88 e6       	ldi	r24, 0x68	; 104
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
			    }
			    if (POS[A3MEDA]==RIGHT)
     bf8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <POS+0x1>
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	01 f5       	brne	.+64     	; 0xc40 <GET_CHOICE_FROM4+0xe0>
			    {
				    LCD_voidSetCursor(LCD_U8_LINE1,0);
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	80 e8       	ldi	r24, 0x80	; 128
     c04:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     c08:	88 e6       	ldi	r24, 0x68	; 104
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE1,8);
     c10:	68 e0       	ldi	r22, 0x08	; 8
     c12:	80 e8       	ldi	r24, 0x80	; 128
     c14:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString("*");
     c18:	86 e6       	ldi	r24, 0x66	; 102
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,0);
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	80 ec       	ldi	r24, 0xC0	; 192
     c24:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     c28:	88 e6       	ldi	r24, 0x68	; 104
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,8);
     c30:	68 e0       	ldi	r22, 0x08	; 8
     c32:	80 ec       	ldi	r24, 0xC0	; 192
     c34:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     c38:	88 e6       	ldi	r24, 0x68	; 104
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
			    }
		    }
		    if (VRY == 1023)
     c40:	0f 3f       	cpi	r16, 0xFF	; 255
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	18 07       	cpc	r17, r24
     c46:	09 f0       	breq	.+2      	; 0xc4a <GET_CHOICE_FROM4+0xea>
     c48:	54 c0       	rjmp	.+168    	; 0xcf2 <GET_CHOICE_FROM4+0x192>
     c4a:	05 c0       	rjmp	.+10     	; 0xc56 <GET_CHOICE_FROM4+0xf6>
		    {
			    while(VRY==1023){VRY = ADC_u16Convert(ADC_u8_Channel1);};
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_u16Convert>
     c54:	8c 01       	movw	r16, r24
     c56:	0f 3f       	cpi	r16, 0xFF	; 255
     c58:	13 40       	sbci	r17, 0x03	; 3
     c5a:	c1 f3       	breq	.-16     	; 0xc4c <GET_CHOICE_FROM4+0xec>
			    POS[SOUFOOF]=1;
     c5c:	e5 ef       	ldi	r30, 0xF5	; 245
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	80 83       	st	Z, r24
			    if (POS[A3MEDA]==LEFT)
     c64:	81 81       	ldd	r24, Z+1	; 0x01
     c66:	81 11       	cpse	r24, r1
     c68:	20 c0       	rjmp	.+64     	; 0xcaa <GET_CHOICE_FROM4+0x14a>
			    {
				    LCD_voidSetCursor(LCD_U8_LINE1,0);
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	80 e8       	ldi	r24, 0x80	; 128
     c6e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     c72:	88 e6       	ldi	r24, 0x68	; 104
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE1,8);
     c7a:	68 e0       	ldi	r22, 0x08	; 8
     c7c:	80 e8       	ldi	r24, 0x80	; 128
     c7e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     c82:	88 e6       	ldi	r24, 0x68	; 104
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,0);
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	80 ec       	ldi	r24, 0xC0	; 192
     c8e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString("*");
     c92:	86 e6       	ldi	r24, 0x66	; 102
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,8);
     c9a:	68 e0       	ldi	r22, 0x08	; 8
     c9c:	80 ec       	ldi	r24, 0xC0	; 192
     c9e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     ca2:	88 e6       	ldi	r24, 0x68	; 104
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
			    }
			    if (POS[A3MEDA]==RIGHT)
     caa:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <POS+0x1>
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	01 f5       	brne	.+64     	; 0xcf2 <GET_CHOICE_FROM4+0x192>
			    {
				    LCD_voidSetCursor(LCD_U8_LINE1,0);
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	80 e8       	ldi	r24, 0x80	; 128
     cb6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     cba:	88 e6       	ldi	r24, 0x68	; 104
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE1,8);
     cc2:	68 e0       	ldi	r22, 0x08	; 8
     cc4:	80 e8       	ldi	r24, 0x80	; 128
     cc6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     cca:	88 e6       	ldi	r24, 0x68	; 104
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,0);
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	80 ec       	ldi	r24, 0xC0	; 192
     cd6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     cda:	88 e6       	ldi	r24, 0x68	; 104
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,8);
     ce2:	68 e0       	ldi	r22, 0x08	; 8
     ce4:	80 ec       	ldi	r24, 0xC0	; 192
     ce6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString("*");
     cea:	86 e6       	ldi	r24, 0x66	; 102
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
			    }
		    }
		    
		    if (VRX == 1023)
     cf2:	cf 3f       	cpi	r28, 0xFF	; 255
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	d8 07       	cpc	r29, r24
     cf8:	09 f0       	breq	.+2      	; 0xcfc <GET_CHOICE_FROM4+0x19c>
     cfa:	55 c0       	rjmp	.+170    	; 0xda6 <GET_CHOICE_FROM4+0x246>
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <GET_CHOICE_FROM4+0x1a8>
		    {
			    while(VRX == 1023){VRX = ADC_u16Convert(ADC_u8_Channel0);};
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_u16Convert>
     d06:	ec 01       	movw	r28, r24
     d08:	cf 3f       	cpi	r28, 0xFF	; 255
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	d8 07       	cpc	r29, r24
     d0e:	b9 f3       	breq	.-18     	; 0xcfe <GET_CHOICE_FROM4+0x19e>
			    POS[A3MEDA]=1;
     d10:	e5 ef       	ldi	r30, 0xF5	; 245
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	81 83       	std	Z+1, r24	; 0x01
			    if (POS[SOUFOOF]==UPPER)
     d18:	80 81       	ld	r24, Z
     d1a:	81 11       	cpse	r24, r1
     d1c:	20 c0       	rjmp	.+64     	; 0xd5e <GET_CHOICE_FROM4+0x1fe>
			    {
				    LCD_voidSetCursor(LCD_U8_LINE1,0);
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	80 e8       	ldi	r24, 0x80	; 128
     d22:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     d26:	88 e6       	ldi	r24, 0x68	; 104
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE1,8);
     d2e:	68 e0       	ldi	r22, 0x08	; 8
     d30:	80 e8       	ldi	r24, 0x80	; 128
     d32:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString("*");
     d36:	86 e6       	ldi	r24, 0x66	; 102
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,0);
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	80 ec       	ldi	r24, 0xC0	; 192
     d42:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     d46:	88 e6       	ldi	r24, 0x68	; 104
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,8);
     d4e:	68 e0       	ldi	r22, 0x08	; 8
     d50:	80 ec       	ldi	r24, 0xC0	; 192
     d52:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     d56:	88 e6       	ldi	r24, 0x68	; 104
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
			    }
			    if (POS[SOUFOOF]==LOWER)
     d5e:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <POS>
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	01 f5       	brne	.+64     	; 0xda6 <GET_CHOICE_FROM4+0x246>
			    {
				    LCD_voidSetCursor(LCD_U8_LINE1,0);
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	80 e8       	ldi	r24, 0x80	; 128
     d6a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     d6e:	88 e6       	ldi	r24, 0x68	; 104
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE1,8);
     d76:	68 e0       	ldi	r22, 0x08	; 8
     d78:	80 e8       	ldi	r24, 0x80	; 128
     d7a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     d7e:	88 e6       	ldi	r24, 0x68	; 104
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,0);
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	80 ec       	ldi	r24, 0xC0	; 192
     d8a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     d8e:	88 e6       	ldi	r24, 0x68	; 104
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,8);
     d96:	68 e0       	ldi	r22, 0x08	; 8
     d98:	80 ec       	ldi	r24, 0xC0	; 192
     d9a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString("*");
     d9e:	86 e6       	ldi	r24, 0x66	; 102
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
			    }
		    }
		    if (VRX == 0)
     da6:	20 97       	sbiw	r28, 0x00	; 0
     da8:	31 f0       	breq	.+12     	; 0xdb6 <GET_CHOICE_FROM4+0x256>
     daa:	53 c0       	rjmp	.+166    	; 0xe52 <GET_CHOICE_FROM4+0x2f2>
		    {
			    while(VRX == 0){VRX = ADC_u16Convert(ADC_u8_Channel0);};
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_u16Convert>
     db4:	ec 01       	movw	r28, r24
     db6:	cd 2b       	or	r28, r29
     db8:	c9 f3       	breq	.-14     	; 0xdac <GET_CHOICE_FROM4+0x24c>
			    POS[A3MEDA]=0;
     dba:	e5 ef       	ldi	r30, 0xF5	; 245
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	11 82       	std	Z+1, r1	; 0x01
			    if (POS[SOUFOOF]==UPPER)
     dc0:	80 81       	ld	r24, Z
     dc2:	81 11       	cpse	r24, r1
     dc4:	20 c0       	rjmp	.+64     	; 0xe06 <GET_CHOICE_FROM4+0x2a6>
			    {
				    LCD_voidSetCursor(LCD_U8_LINE1,0);
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString("*");
     dce:	86 e6       	ldi	r24, 0x66	; 102
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE1,8);
     dd6:	68 e0       	ldi	r22, 0x08	; 8
     dd8:	80 e8       	ldi	r24, 0x80	; 128
     dda:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     dde:	88 e6       	ldi	r24, 0x68	; 104
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,0);
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	80 ec       	ldi	r24, 0xC0	; 192
     dea:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     dee:	88 e6       	ldi	r24, 0x68	; 104
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,8);
     df6:	68 e0       	ldi	r22, 0x08	; 8
     df8:	80 ec       	ldi	r24, 0xC0	; 192
     dfa:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     dfe:	88 e6       	ldi	r24, 0x68	; 104
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
			    }
			    if (POS[SOUFOOF]==LOWER)
     e06:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <POS>
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	11 f5       	brne	.+68     	; 0xe52 <GET_CHOICE_FROM4+0x2f2>
			    {
				    LCD_voidSetCursor(LCD_U8_LINE1,0);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	80 e8       	ldi	r24, 0x80	; 128
     e12:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     e16:	88 e6       	ldi	r24, 0x68	; 104
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE1,8);
     e1e:	68 e0       	ldi	r22, 0x08	; 8
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     e26:	88 e6       	ldi	r24, 0x68	; 104
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,0);
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	80 ec       	ldi	r24, 0xC0	; 192
     e32:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString("*");
     e36:	86 e6       	ldi	r24, 0x66	; 102
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				    LCD_voidSetCursor(LCD_U8_LINE2,8);
     e3e:	68 e0       	ldi	r22, 0x08	; 8
     e40:	80 ec       	ldi	r24, 0xC0	; 192
     e42:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				    LCD_voidSendString(" ");
     e46:	88 e6       	ldi	r24, 0x68	; 104
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <GET_CHOICE_FROM4+0x2f2>
			    }
		    }
		    
		    while (GET_BIT(PINB,7)==0)
		    {
			   EVENT = 0 ; 
     e50:	f1 2c       	mov	r15, r1
				    LCD_voidSetCursor(LCD_U8_LINE2,8);
				    LCD_voidSendString(" ");
			    }
		    }
		    
		    while (GET_BIT(PINB,7)==0)
     e52:	b7 9b       	sbis	0x16, 7	; 22
     e54:	fd cf       	rjmp	.-6      	; 0xe50 <GET_CHOICE_FROM4+0x2f0>
	u16 VRY , VRX ;
	u8 EVENT = 1;
	LCD_voidSetCursor(LCD_U8_LINE1,0);
	LCD_voidSendString("*");
	
	    while (EVENT)
     e56:	f1 10       	cpse	r15, r1
     e58:	93 ce       	rjmp	.-730    	; 0xb80 <GET_CHOICE_FROM4+0x20>
		    while (GET_BIT(PINB,7)==0)
		    {
			   EVENT = 0 ; 
		    }
	    }
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	08 95       	ret

00000e66 <SET_HOUR>:

u8 SET_HOUR (void)
{
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
	u8 x = 1 ,EVENT =1 ;
	u8 currunt_state ;
	u8 last_state = GET_BIT(PIND,4);
     e72:	00 b3       	in	r16, 0x10	; 16
     e74:	02 95       	swap	r16
     e76:	01 70       	andi	r16, 0x01	; 1
	
	LCD_voidSetCursor(LCD_U8_LINE2,1);
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	80 ec       	ldi	r24, 0xC0	; 192
     e7c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
	LCD_voidSendNumberII(x);
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
	    }
}

u8 SET_HOUR (void)
{
	u8 x = 1 ,EVENT =1 ;
     e86:	c1 e0       	ldi	r28, 0x01	; 1
     e88:	11 e0       	ldi	r17, 0x01	; 1
	u8 last_state = GET_BIT(PIND,4);
	
	LCD_voidSetCursor(LCD_U8_LINE2,1);
	LCD_voidSendNumberII(x);
	
	while (EVENT)
     e8a:	3b c0       	rjmp	.+118    	; 0xf02 <SET_HOUR+0x9c>
	{
		currunt_state = GET_BIT(PIND,4);
     e8c:	d0 b3       	in	r29, 0x10	; 16
     e8e:	d2 95       	swap	r29
     e90:	d1 70       	andi	r29, 0x01	; 1
		
		if ( currunt_state != last_state )
     e92:	0d 17       	cp	r16, r29
     e94:	99 f1       	breq	.+102    	; 0xefc <SET_HOUR+0x96>
		{
			if (GET_BIT(PIND,5) != currunt_state )
     e96:	80 b3       	in	r24, 0x10	; 16
     e98:	85 fb       	bst	r24, 5
     e9a:	ee 24       	eor	r14, r14
     e9c:	e0 f8       	bld	r14, 0
     e9e:	f1 2c       	mov	r15, r1
     ea0:	8d 2f       	mov	r24, r29
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	e8 16       	cp	r14, r24
     ea6:	f9 06       	cpc	r15, r25
     ea8:	a1 f0       	breq	.+40     	; 0xed2 <SET_HOUR+0x6c>
			{
				if (x==12)
     eaa:	1c 30       	cpi	r17, 0x0C	; 12
     eac:	49 f4       	brne	.+18     	; 0xec0 <SET_HOUR+0x5a>
				{
					x=1;
					LCD_voidSetCursor(LCD_U8_LINE2,1);
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	80 ec       	ldi	r24, 0xC0	; 192
     eb2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		{
			if (GET_BIT(PIND,5) != currunt_state )
			{
				if (x==12)
				{
					x=1;
     ebc:	11 e0       	ldi	r17, 0x01	; 1
     ebe:	1e c0       	rjmp	.+60     	; 0xefc <SET_HOUR+0x96>
					LCD_voidSetCursor(LCD_U8_LINE2,1);
					LCD_voidSendNumberII(x);
				}
				else
				{
					x++;
     ec0:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_voidSetCursor(LCD_U8_LINE2,1);
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	80 ec       	ldi	r24, 0xC0	; 192
     ec6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
     eca:	81 2f       	mov	r24, r17
     ecc:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
     ed0:	15 c0       	rjmp	.+42     	; 0xefc <SET_HOUR+0x96>
				
				
			}
			else
			{
				if (x==1)
     ed2:	11 30       	cpi	r17, 0x01	; 1
     ed4:	49 f4       	brne	.+18     	; 0xee8 <SET_HOUR+0x82>
				{
					x=12;
					LCD_voidSetCursor(LCD_U8_LINE2,1);
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	80 ec       	ldi	r24, 0xC0	; 192
     eda:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
     ede:	8c e0       	ldi	r24, 0x0C	; 12
     ee0:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
			}
			else
			{
				if (x==1)
				{
					x=12;
     ee4:	1c e0       	ldi	r17, 0x0C	; 12
     ee6:	0a c0       	rjmp	.+20     	; 0xefc <SET_HOUR+0x96>
					LCD_voidSetCursor(LCD_U8_LINE2,1);
					LCD_voidSendNumberII(x);
				}
				else
				{
					x--;
     ee8:	11 50       	subi	r17, 0x01	; 1
					LCD_voidSetCursor(LCD_U8_LINE2,1);
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	80 ec       	ldi	r24, 0xC0	; 192
     eee:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
     ef2:	81 2f       	mov	r24, r17
     ef4:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
				}
				
			}
		}
		last_state = currunt_state ;
		 while (GET_BIT(PINC,0)==0)
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <SET_HOUR+0x96>
		 {
			 EVENT = 0 ;
     efa:	c0 e0       	ldi	r28, 0x00	; 0
				}
				
			}
		}
		last_state = currunt_state ;
		 while (GET_BIT(PINC,0)==0)
     efc:	98 9b       	sbis	0x13, 0	; 19
     efe:	fd cf       	rjmp	.-6      	; 0xefa <SET_HOUR+0x94>
					LCD_voidSendNumberII(x);
				}
				
			}
		}
		last_state = currunt_state ;
     f00:	0d 2f       	mov	r16, r29
	u8 last_state = GET_BIT(PIND,4);
	
	LCD_voidSetCursor(LCD_U8_LINE2,1);
	LCD_voidSendNumberII(x);
	
	while (EVENT)
     f02:	c1 11       	cpse	r28, r1
     f04:	c3 cf       	rjmp	.-122    	; 0xe8c <SET_HOUR+0x26>
		 {
			 EVENT = 0 ;
		 }
	}
	return x ;
}
     f06:	81 2f       	mov	r24, r17
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	08 95       	ret

00000f16 <SET_HOUR_TO_TIMER>:

u8 SET_HOUR_TO_TIMER (void)
{
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
	u8 x = 0 ,EVENT =1 ;
	u8 currunt_state ;
	u8 last_state = GET_BIT(PIND,4);
     f22:	00 b3       	in	r16, 0x10	; 16
     f24:	02 95       	swap	r16
     f26:	01 70       	andi	r16, 0x01	; 1
	
	LCD_voidSetCursor(LCD_U8_LINE2,1);
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	80 ec       	ldi	r24, 0xC0	; 192
     f2c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
	LCD_voidSendNumberIII(x);
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidSendNumberIII>
	return x ;
}

u8 SET_HOUR_TO_TIMER (void)
{
	u8 x = 0 ,EVENT =1 ;
     f38:	c1 e0       	ldi	r28, 0x01	; 1
     f3a:	10 e0       	ldi	r17, 0x00	; 0
	u8 last_state = GET_BIT(PIND,4);
	
	LCD_voidSetCursor(LCD_U8_LINE2,1);
	LCD_voidSendNumberIII(x);
	
	while (EVENT)
     f3c:	27 c0       	rjmp	.+78     	; 0xf8c <SET_HOUR_TO_TIMER+0x76>
	{
		currunt_state = GET_BIT(PIND,4);
     f3e:	d0 b3       	in	r29, 0x10	; 16
     f40:	d2 95       	swap	r29
     f42:	d1 70       	andi	r29, 0x01	; 1
		
		if ( currunt_state != last_state )
     f44:	0d 17       	cp	r16, r29
     f46:	f9 f0       	breq	.+62     	; 0xf86 <SET_HOUR_TO_TIMER+0x70>
		{
			if (GET_BIT(PIND,5) != currunt_state )
     f48:	80 b3       	in	r24, 0x10	; 16
     f4a:	85 fb       	bst	r24, 5
     f4c:	ee 24       	eor	r14, r14
     f4e:	e0 f8       	bld	r14, 0
     f50:	f1 2c       	mov	r15, r1
     f52:	8d 2f       	mov	r24, r29
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	e8 16       	cp	r14, r24
     f58:	f9 06       	cpc	r15, r25
     f5a:	51 f0       	breq	.+20     	; 0xf70 <SET_HOUR_TO_TIMER+0x5a>
			{
					x++;
     f5c:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_voidSetCursor(LCD_U8_LINE2,1);
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	80 ec       	ldi	r24, 0xC0	; 192
     f62:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberIII(x);
     f66:	81 2f       	mov	r24, r17
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidSendNumberIII>
     f6e:	0b c0       	rjmp	.+22     	; 0xf86 <SET_HOUR_TO_TIMER+0x70>
			}
			else
			{
					x--;
     f70:	11 50       	subi	r17, 0x01	; 1
					LCD_voidSetCursor(LCD_U8_LINE2,1);
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	80 ec       	ldi	r24, 0xC0	; 192
     f76:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberIII(x);
     f7a:	81 2f       	mov	r24, r17
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_voidSendNumberIII>
			}
		}
		last_state = currunt_state ;
		while (GET_BIT(PINC,0)==0)
     f82:	01 c0       	rjmp	.+2      	; 0xf86 <SET_HOUR_TO_TIMER+0x70>
		{
			EVENT = 0 ;
     f84:	c0 e0       	ldi	r28, 0x00	; 0
					LCD_voidSetCursor(LCD_U8_LINE2,1);
					LCD_voidSendNumberIII(x);
			}
		}
		last_state = currunt_state ;
		while (GET_BIT(PINC,0)==0)
     f86:	98 9b       	sbis	0x13, 0	; 19
     f88:	fd cf       	rjmp	.-6      	; 0xf84 <SET_HOUR_TO_TIMER+0x6e>
					x--;
					LCD_voidSetCursor(LCD_U8_LINE2,1);
					LCD_voidSendNumberIII(x);
			}
		}
		last_state = currunt_state ;
     f8a:	0d 2f       	mov	r16, r29
	u8 last_state = GET_BIT(PIND,4);
	
	LCD_voidSetCursor(LCD_U8_LINE2,1);
	LCD_voidSendNumberIII(x);
	
	while (EVENT)
     f8c:	c1 11       	cpse	r28, r1
     f8e:	d7 cf       	rjmp	.-82     	; 0xf3e <SET_HOUR_TO_TIMER+0x28>
		{
			EVENT = 0 ;
		}
	}
	return x ;
}
     f90:	81 2f       	mov	r24, r17
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	ff 90       	pop	r15
     f9c:	ef 90       	pop	r14
     f9e:	08 95       	ret

00000fa0 <SET_MINUTES>:

u8 SET_MINUTES (void)
{
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
	u8 x = 0 ,EVENT =1 ;
	u8 currunt_state ;
	u8 last_state = GET_BIT(PIND,4);
     fac:	00 b3       	in	r16, 0x10	; 16
     fae:	02 95       	swap	r16
     fb0:	01 70       	andi	r16, 0x01	; 1
	
	LCD_voidSetCursor(LCD_U8_LINE2,6);
     fb2:	66 e0       	ldi	r22, 0x06	; 6
     fb4:	80 ec       	ldi	r24, 0xC0	; 192
     fb6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
	LCD_voidSendNumberII(x);
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
	return x ;
}

u8 SET_MINUTES (void)
{
	u8 x = 0 ,EVENT =1 ;
     fc0:	c1 e0       	ldi	r28, 0x01	; 1
     fc2:	10 e0       	ldi	r17, 0x00	; 0
	u8 last_state = GET_BIT(PIND,4);
	
	LCD_voidSetCursor(LCD_U8_LINE2,6);
	LCD_voidSendNumberII(x);
	
	while (EVENT)
     fc4:	3b c0       	rjmp	.+118    	; 0x103c <SET_MINUTES+0x9c>
	{
		currunt_state = GET_BIT(PIND,4);
     fc6:	d0 b3       	in	r29, 0x10	; 16
     fc8:	d2 95       	swap	r29
     fca:	d1 70       	andi	r29, 0x01	; 1
		
		if ( currunt_state != last_state )
     fcc:	0d 17       	cp	r16, r29
     fce:	99 f1       	breq	.+102    	; 0x1036 <SET_MINUTES+0x96>
		{
			if (GET_BIT(PIND,5) != currunt_state )
     fd0:	80 b3       	in	r24, 0x10	; 16
     fd2:	85 fb       	bst	r24, 5
     fd4:	ee 24       	eor	r14, r14
     fd6:	e0 f8       	bld	r14, 0
     fd8:	f1 2c       	mov	r15, r1
     fda:	8d 2f       	mov	r24, r29
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	e8 16       	cp	r14, r24
     fe0:	f9 06       	cpc	r15, r25
     fe2:	a1 f0       	breq	.+40     	; 0x100c <SET_MINUTES+0x6c>
			{
				if (x==59)
     fe4:	1b 33       	cpi	r17, 0x3B	; 59
     fe6:	49 f4       	brne	.+18     	; 0xffa <SET_MINUTES+0x5a>
				{
					x=0;
					LCD_voidSetCursor(LCD_U8_LINE2,6);
     fe8:	66 e0       	ldi	r22, 0x06	; 6
     fea:	80 ec       	ldi	r24, 0xC0	; 192
     fec:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		{
			if (GET_BIT(PIND,5) != currunt_state )
			{
				if (x==59)
				{
					x=0;
     ff6:	10 e0       	ldi	r17, 0x00	; 0
     ff8:	1e c0       	rjmp	.+60     	; 0x1036 <SET_MINUTES+0x96>
					LCD_voidSetCursor(LCD_U8_LINE2,6);
					LCD_voidSendNumberII(x);
				}
				else
				{
					x++;
     ffa:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_voidSetCursor(LCD_U8_LINE2,6);
     ffc:	66 e0       	ldi	r22, 0x06	; 6
     ffe:	80 ec       	ldi	r24, 0xC0	; 192
    1000:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
    1004:	81 2f       	mov	r24, r17
    1006:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
    100a:	15 c0       	rjmp	.+42     	; 0x1036 <SET_MINUTES+0x96>
				
				
			}
			else
			{
				if (x==0)
    100c:	11 11       	cpse	r17, r1
    100e:	09 c0       	rjmp	.+18     	; 0x1022 <SET_MINUTES+0x82>
				{
					x=59;
					LCD_voidSetCursor(LCD_U8_LINE2,6);
    1010:	66 e0       	ldi	r22, 0x06	; 6
    1012:	80 ec       	ldi	r24, 0xC0	; 192
    1014:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
    1018:	8b e3       	ldi	r24, 0x3B	; 59
    101a:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
			}
			else
			{
				if (x==0)
				{
					x=59;
    101e:	1b e3       	ldi	r17, 0x3B	; 59
    1020:	0a c0       	rjmp	.+20     	; 0x1036 <SET_MINUTES+0x96>
					LCD_voidSetCursor(LCD_U8_LINE2,6);
					LCD_voidSendNumberII(x);
				}
				else
				{
					x--;
    1022:	11 50       	subi	r17, 0x01	; 1
					LCD_voidSetCursor(LCD_U8_LINE2,6);
    1024:	66 e0       	ldi	r22, 0x06	; 6
    1026:	80 ec       	ldi	r24, 0xC0	; 192
    1028:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
    102c:	81 2f       	mov	r24, r17
    102e:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
				}
				
			}
		}
		last_state = currunt_state ;
		while (GET_BIT(PINC,0)==0)
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <SET_MINUTES+0x96>
		{
			EVENT = 0 ;
    1034:	c0 e0       	ldi	r28, 0x00	; 0
				}
				
			}
		}
		last_state = currunt_state ;
		while (GET_BIT(PINC,0)==0)
    1036:	98 9b       	sbis	0x13, 0	; 19
    1038:	fd cf       	rjmp	.-6      	; 0x1034 <SET_MINUTES+0x94>
					LCD_voidSendNumberII(x);
				}
				
			}
		}
		last_state = currunt_state ;
    103a:	0d 2f       	mov	r16, r29
	u8 last_state = GET_BIT(PIND,4);
	
	LCD_voidSetCursor(LCD_U8_LINE2,6);
	LCD_voidSendNumberII(x);
	
	while (EVENT)
    103c:	c1 11       	cpse	r28, r1
    103e:	c3 cf       	rjmp	.-122    	; 0xfc6 <SET_MINUTES+0x26>
		{
			EVENT = 0 ;
		}
	}
	return x ;
}
    1040:	81 2f       	mov	r24, r17
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	08 95       	ret

00001050 <SET_SECONDS>:

u8 SET_SECONDS (void)
{
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
	u8 x = 0 ,EVENT =1 ;
	u8 currunt_state ;
	u8 last_state = GET_BIT(PIND,4);
    105c:	00 b3       	in	r16, 0x10	; 16
    105e:	02 95       	swap	r16
    1060:	01 70       	andi	r16, 0x01	; 1
	
	LCD_voidSetCursor(LCD_U8_LINE2,11);
    1062:	6b e0       	ldi	r22, 0x0B	; 11
    1064:	80 ec       	ldi	r24, 0xC0	; 192
    1066:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
	LCD_voidSendNumberII(x);
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
	return x ;
}

u8 SET_SECONDS (void)
{
	u8 x = 0 ,EVENT =1 ;
    1070:	c1 e0       	ldi	r28, 0x01	; 1
    1072:	10 e0       	ldi	r17, 0x00	; 0
	u8 last_state = GET_BIT(PIND,4);
	
	LCD_voidSetCursor(LCD_U8_LINE2,11);
	LCD_voidSendNumberII(x);
	
	while (EVENT)
    1074:	3b c0       	rjmp	.+118    	; 0x10ec <SET_SECONDS+0x9c>
	{
		currunt_state = GET_BIT(PIND,4);
    1076:	d0 b3       	in	r29, 0x10	; 16
    1078:	d2 95       	swap	r29
    107a:	d1 70       	andi	r29, 0x01	; 1
		
		if ( currunt_state != last_state )
    107c:	0d 17       	cp	r16, r29
    107e:	99 f1       	breq	.+102    	; 0x10e6 <SET_SECONDS+0x96>
		{
			if (GET_BIT(PIND,5) != currunt_state )
    1080:	80 b3       	in	r24, 0x10	; 16
    1082:	85 fb       	bst	r24, 5
    1084:	ee 24       	eor	r14, r14
    1086:	e0 f8       	bld	r14, 0
    1088:	f1 2c       	mov	r15, r1
    108a:	8d 2f       	mov	r24, r29
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	e8 16       	cp	r14, r24
    1090:	f9 06       	cpc	r15, r25
    1092:	a1 f0       	breq	.+40     	; 0x10bc <SET_SECONDS+0x6c>
			{
				if (x==59)
    1094:	1b 33       	cpi	r17, 0x3B	; 59
    1096:	49 f4       	brne	.+18     	; 0x10aa <SET_SECONDS+0x5a>
				{
					x=0;
					LCD_voidSetCursor(LCD_U8_LINE2,11);
    1098:	6b e0       	ldi	r22, 0x0B	; 11
    109a:	80 ec       	ldi	r24, 0xC0	; 192
    109c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
		{
			if (GET_BIT(PIND,5) != currunt_state )
			{
				if (x==59)
				{
					x=0;
    10a6:	10 e0       	ldi	r17, 0x00	; 0
    10a8:	1e c0       	rjmp	.+60     	; 0x10e6 <SET_SECONDS+0x96>
					LCD_voidSetCursor(LCD_U8_LINE2,11);
					LCD_voidSendNumberII(x);
				}
				else
				{
					x++;
    10aa:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_voidSetCursor(LCD_U8_LINE2,11);
    10ac:	6b e0       	ldi	r22, 0x0B	; 11
    10ae:	80 ec       	ldi	r24, 0xC0	; 192
    10b0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
    10b4:	81 2f       	mov	r24, r17
    10b6:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
    10ba:	15 c0       	rjmp	.+42     	; 0x10e6 <SET_SECONDS+0x96>
				
				
			}
			else
			{
				if (x==0)
    10bc:	11 11       	cpse	r17, r1
    10be:	09 c0       	rjmp	.+18     	; 0x10d2 <SET_SECONDS+0x82>
				{
					x=59;
					LCD_voidSetCursor(LCD_U8_LINE2,11);
    10c0:	6b e0       	ldi	r22, 0x0B	; 11
    10c2:	80 ec       	ldi	r24, 0xC0	; 192
    10c4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
    10c8:	8b e3       	ldi	r24, 0x3B	; 59
    10ca:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
			}
			else
			{
				if (x==0)
				{
					x=59;
    10ce:	1b e3       	ldi	r17, 0x3B	; 59
    10d0:	0a c0       	rjmp	.+20     	; 0x10e6 <SET_SECONDS+0x96>
					LCD_voidSetCursor(LCD_U8_LINE2,11);
					LCD_voidSendNumberII(x);
				}
				else
				{
					x--;
    10d2:	11 50       	subi	r17, 0x01	; 1
					LCD_voidSetCursor(LCD_U8_LINE2,11);
    10d4:	6b e0       	ldi	r22, 0x0B	; 11
    10d6:	80 ec       	ldi	r24, 0xC0	; 192
    10d8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendNumberII(x);
    10dc:	81 2f       	mov	r24, r17
    10de:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_voidSendNumberII>
				}
				
			}
		}
		last_state = currunt_state ;
		while (GET_BIT(PINC,0)==0)
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <SET_SECONDS+0x96>
		{
			EVENT = 0 ;
    10e4:	c0 e0       	ldi	r28, 0x00	; 0
				}
				
			}
		}
		last_state = currunt_state ;
		while (GET_BIT(PINC,0)==0)
    10e6:	98 9b       	sbis	0x13, 0	; 19
    10e8:	fd cf       	rjmp	.-6      	; 0x10e4 <SET_SECONDS+0x94>
					LCD_voidSendNumberII(x);
				}
				
			}
		}
		last_state = currunt_state ;
    10ea:	0d 2f       	mov	r16, r29
	u8 last_state = GET_BIT(PIND,4);
	
	LCD_voidSetCursor(LCD_U8_LINE2,11);
	LCD_voidSendNumberII(x);
	
	while (EVENT)
    10ec:	c1 11       	cpse	r28, r1
    10ee:	c3 cf       	rjmp	.-122    	; 0x1076 <SET_SECONDS+0x26>
		{
			EVENT = 0 ;
		}
	}
	return x ;
}
    10f0:	81 2f       	mov	r24, r17
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	08 95       	ret

00001100 <SET_MODE>:

u8 SET_MODE (void)
{
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
	u8 x = 0 ,EVENT =1 ;
	u8 currunt_state ;
	u8 last_state = GET_BIT(PIND,4);
    110c:	10 b3       	in	r17, 0x10	; 16
    110e:	12 95       	swap	r17
    1110:	11 70       	andi	r17, 0x01	; 1
	
	LCD_voidSetCursor(LCD_U8_LINE2,14);
    1112:	6e e0       	ldi	r22, 0x0E	; 14
    1114:	80 ec       	ldi	r24, 0xC0	; 192
    1116:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
	LCD_voidSendString("AM");
    111a:	83 e6       	ldi	r24, 0x63	; 99
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
	return x ;
}

u8 SET_MODE (void)
{
	u8 x = 0 ,EVENT =1 ;
    1122:	c1 e0       	ldi	r28, 0x01	; 1
    1124:	00 e0       	ldi	r16, 0x00	; 0
	u8 last_state = GET_BIT(PIND,4);
	
	LCD_voidSetCursor(LCD_U8_LINE2,14);
	LCD_voidSendString("AM");
	
	while (EVENT)
    1126:	3f c0       	rjmp	.+126    	; 0x11a6 <SET_MODE+0xa6>
	{
		currunt_state = GET_BIT(PIND,4);
    1128:	d0 b3       	in	r29, 0x10	; 16
    112a:	d2 95       	swap	r29
    112c:	d1 70       	andi	r29, 0x01	; 1
		
		if ( currunt_state != last_state )
    112e:	1d 17       	cp	r17, r29
    1130:	b9 f1       	breq	.+110    	; 0x11a0 <SET_MODE+0xa0>
		{
			if (GET_BIT(PIND,5) != currunt_state )
    1132:	80 b3       	in	r24, 0x10	; 16
    1134:	85 fb       	bst	r24, 5
    1136:	ee 24       	eor	r14, r14
    1138:	e0 f8       	bld	r14, 0
    113a:	f1 2c       	mov	r15, r1
    113c:	8d 2f       	mov	r24, r29
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	e8 16       	cp	r14, r24
    1142:	f9 06       	cpc	r15, r25
    1144:	b1 f0       	breq	.+44     	; 0x1172 <SET_MODE+0x72>
			{
				if (x==1)
    1146:	01 30       	cpi	r16, 0x01	; 1
    1148:	51 f4       	brne	.+20     	; 0x115e <SET_MODE+0x5e>
				{
					x=0;
					LCD_voidSetCursor(LCD_U8_LINE2,14);
    114a:	6e e0       	ldi	r22, 0x0E	; 14
    114c:	80 ec       	ldi	r24, 0xC0	; 192
    114e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendString("AM");
    1152:	83 e6       	ldi	r24, 0x63	; 99
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
		{
			if (GET_BIT(PIND,5) != currunt_state )
			{
				if (x==1)
				{
					x=0;
    115a:	00 e0       	ldi	r16, 0x00	; 0
    115c:	21 c0       	rjmp	.+66     	; 0x11a0 <SET_MODE+0xa0>
					LCD_voidSetCursor(LCD_U8_LINE2,14);
					LCD_voidSendString("AM");
				}
				else
				{
					x++;
    115e:	0f 5f       	subi	r16, 0xFF	; 255
					LCD_voidSetCursor(LCD_U8_LINE2,14);
    1160:	6e e0       	ldi	r22, 0x0E	; 14
    1162:	80 ec       	ldi	r24, 0xC0	; 192
    1164:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendString("PM");
    1168:	80 e6       	ldi	r24, 0x60	; 96
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
    1170:	17 c0       	rjmp	.+46     	; 0x11a0 <SET_MODE+0xa0>
				
				
			}
			else
			{
				if (x==0)
    1172:	01 11       	cpse	r16, r1
    1174:	0a c0       	rjmp	.+20     	; 0x118a <SET_MODE+0x8a>
				{
					x=1;
					LCD_voidSetCursor(LCD_U8_LINE2,14);
    1176:	6e e0       	ldi	r22, 0x0E	; 14
    1178:	80 ec       	ldi	r24, 0xC0	; 192
    117a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendString("PM");
    117e:	80 e6       	ldi	r24, 0x60	; 96
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
			}
			else
			{
				if (x==0)
				{
					x=1;
    1186:	01 e0       	ldi	r16, 0x01	; 1
    1188:	0b c0       	rjmp	.+22     	; 0x11a0 <SET_MODE+0xa0>
					LCD_voidSetCursor(LCD_U8_LINE2,14);
					LCD_voidSendString("PM");
				}
				else
				{
					x--;
    118a:	01 50       	subi	r16, 0x01	; 1
					LCD_voidSetCursor(LCD_U8_LINE2,14);
    118c:	6e e0       	ldi	r22, 0x0E	; 14
    118e:	80 ec       	ldi	r24, 0xC0	; 192
    1190:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
					LCD_voidSendString("AM");
    1194:	83 e6       	ldi	r24, 0x63	; 99
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				}
				
			}
		}
		last_state = currunt_state ;
		while (GET_BIT(PINC,0)==0)
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <SET_MODE+0xa0>
		{
			EVENT = 0 ;
    119e:	c0 e0       	ldi	r28, 0x00	; 0
				}
				
			}
		}
		last_state = currunt_state ;
		while (GET_BIT(PINC,0)==0)
    11a0:	98 9b       	sbis	0x13, 0	; 19
    11a2:	fd cf       	rjmp	.-6      	; 0x119e <SET_MODE+0x9e>
					LCD_voidSendString("AM");
				}
				
			}
		}
		last_state = currunt_state ;
    11a4:	1d 2f       	mov	r17, r29
	u8 last_state = GET_BIT(PIND,4);
	
	LCD_voidSetCursor(LCD_U8_LINE2,14);
	LCD_voidSendString("AM");
	
	while (EVENT)
    11a6:	c1 11       	cpse	r28, r1
    11a8:	bf cf       	rjmp	.-130    	; 0x1128 <SET_MODE+0x28>
		{
			EVENT = 0 ;
		}
	}
	return x ;
}
    11aa:	80 2f       	mov	r24, r16
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	08 95       	ret

000011ba <__vector_5>:
#define TIMER  4
u8 APP ;
static u8 STOP_OV =0 ;

ISR(TIMER2_OVF_vect)
{
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	8f 93       	push	r24
	switch (APP)
    11c6:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <APP>
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <__vector_5+0x1c>
    11ce:	84 30       	cpi	r24, 0x04	; 4
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <__vector_5+0x1a>
    11d2:	3f c0       	rjmp	.+126    	; 0x1252 <__vector_5+0x98>
    11d4:	44 c0       	rjmp	.+136    	; 0x125e <__vector_5+0xa4>
	{
		case STOP_WATCH :
		{
			STOP_OV++;
    11d6:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__data_end>
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__data_end>
			if (STOP_OV == 2)
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	49 f4       	brne	.+18     	; 0x11f6 <__vector_5+0x3c>
			{
				DECI_SECOND ++ ;
    11e4:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <DECI_SECOND>
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <DECI_SECOND>
				STOP_OV = 0;
    11ee:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__data_end>
				TCNT2 = 185;
    11f2:	89 eb       	ldi	r24, 0xB9	; 185
    11f4:	84 bd       	out	0x24, r24	; 36
			}
			if ( DECI_SECOND == 100 )
    11f6:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <DECI_SECOND>
    11fa:	84 36       	cpi	r24, 0x64	; 100
    11fc:	39 f4       	brne	.+14     	; 0x120c <__vector_5+0x52>
			{
				DECI_SECOND = 0 ;
    11fe:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <DECI_SECOND>
				SECOND ++ ;
    1202:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
    1206:	8f 5f       	subi	r24, 0xFF	; 255
    1208:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <SECOND>
			}
			if(SECOND == 60 )
    120c:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
    1210:	8c 33       	cpi	r24, 0x3C	; 60
    1212:	39 f4       	brne	.+14     	; 0x1222 <__vector_5+0x68>
			{
				SECOND = 0 ;
    1214:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <SECOND>
				MINUTES ++ ;
    1218:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <MINUTES>
			}
			if(MINUTES == 60 )
    1222:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <MINUTES>
    1226:	8c 33       	cpi	r24, 0x3C	; 60
    1228:	39 f4       	brne	.+14     	; 0x1238 <__vector_5+0x7e>
			{
				MINUTES = 0 ;
    122a:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <MINUTES>
				HOUR ++ ;
    122e:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
    1232:	8f 5f       	subi	r24, 0xFF	; 255
    1234:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <HOUR>
			}
			if(HOUR == 100 )
    1238:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <HOUR>
    123c:	84 36       	cpi	r24, 0x64	; 100
    123e:	a1 f4       	brne	.+40     	; 0x1268 <__vector_5+0xae>
			{
				HOUR = 0 ;
    1240:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <HOUR>
				MINUTES = 0 ;
    1244:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <MINUTES>
				SECOND = 0 ;
    1248:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <SECOND>
				DECI_SECOND = 0 ;
    124c:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <DECI_SECOND>
    1250:	0b c0       	rjmp	.+22     	; 0x1268 <__vector_5+0xae>
			}
			break;
		}
		case TIMER :
		{
			SECOND -- ;
    1252:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
    1256:	81 50       	subi	r24, 0x01	; 1
    1258:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <SECOND>
			break;
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <__vector_5+0xae>
		}
		default:
		{
			SECOND ++ ;
    125e:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <SECOND>
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <SECOND>
			break;
		}
	}
}
    1268:	8f 91       	pop	r24
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0
    1270:	1f 90       	pop	r1
    1272:	18 95       	reti

00001274 <main>:
	
	u8 H , M , S , D ;
	u8 ALARM_H , ALARM_M , ALARM_S , ALARM_D ;
	
	
	DIO_voidInit();
    1274:	0e 94 77 00 	call	0xee	; 0xee <DIO_voidInit>
	LCD_voidInit();
    1278:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_voidInit>
	ADC_voidInit();
    127c:	0e 94 4d 00 	call	0x9a	; 0x9a <ADC_voidInit>

	DIO_voidSetPinValue(JOY_STICK_PUSHBOTTON,1); //PULL UP 
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	8f e0       	ldi	r24, 0x0F	; 15
    1284:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ENCODER_CLK,1);
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	8c e1       	ldi	r24, 0x1C	; 28
    128c:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ENCODER_DT,1);
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	8d e1       	ldi	r24, 0x1D	; 29
    1294:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ENCODER_PUSHBOTTON,1);
    1298:	61 e0       	ldi	r22, 0x01	; 1
    129a:	80 e1       	ldi	r24, 0x10	; 16
    129c:	0e 94 7e 00 	call	0xfc	; 0xfc <DIO_voidSetPinValue>
	
	
	
	while(1)
	{
		LCD_voidClear();
    12a0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClear>
		LCD_voidSetCursor(LCD_U8_LINE1 ,1);
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	80 e8       	ldi	r24, 0x80	; 128
    12a8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendString("CLOCK");
    12ac:	8a e6       	ldi	r24, 0x6A	; 106
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
		LCD_voidSetCursor(LCD_U8_LINE2 ,1);
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	80 ec       	ldi	r24, 0xC0	; 192
    12b8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendString("ALARM");
    12bc:	8a ec       	ldi	r24, 0xCA	; 202
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
		LCD_voidSetCursor(LCD_U8_LINE1 ,9);
    12c4:	69 e0       	ldi	r22, 0x09	; 9
    12c6:	80 e8       	ldi	r24, 0x80	; 128
    12c8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendString("S.WATCH");
    12cc:	80 e7       	ldi	r24, 0x70	; 112
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
		LCD_voidSetCursor(LCD_U8_LINE2 ,9);
    12d4:	69 e0       	ldi	r22, 0x09	; 9
    12d6:	80 ec       	ldi	r24, 0xC0	; 192
    12d8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
		LCD_voidSendString("TIMER");
    12dc:	88 e7       	ldi	r24, 0x78	; 120
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
		
		GET_CHOICE_FROM4();
    12e4:	0e 94 b0 05 	call	0xb60	; 0xb60 <GET_CHOICE_FROM4>
		
		if ( (POS[0]==0) && (POS[1]==0) )      { APP=1; }	//CLOCK
    12e8:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <POS>
    12ec:	81 11       	cpse	r24, r1
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <main+0x8c>
    12f0:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <POS+0x1>
    12f4:	81 11       	cpse	r24, r1
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <main+0x8c>
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <APP>
    12fe:	23 c0       	rjmp	.+70     	; 0x1346 <main+0xd2>
		else if ( (POS[0]==0) && (POS[1]==1) ) { APP=2; }   //STOP WATCH
    1300:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <POS>
    1304:	81 11       	cpse	r24, r1
    1306:	08 c0       	rjmp	.+16     	; 0x1318 <main+0xa4>
    1308:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <POS+0x1>
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	21 f4       	brne	.+8      	; 0x1318 <main+0xa4>
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <APP>
    1316:	17 c0       	rjmp	.+46     	; 0x1346 <main+0xd2>
		else if ( (POS[0]==1) && (POS[1]==0) ) { APP=3; }	// ALARM
    1318:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <POS>
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	41 f4       	brne	.+16     	; 0x1330 <main+0xbc>
    1320:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <POS+0x1>
    1324:	81 11       	cpse	r24, r1
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <main+0xbc>
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <APP>
    132e:	0b c0       	rjmp	.+22     	; 0x1346 <main+0xd2>
		else if ( (POS[0]==1) && (POS[1]==1) ) { APP=4; }	//TIMER
    1330:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <POS>
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	39 f4       	brne	.+14     	; 0x1346 <main+0xd2>
    1338:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <POS+0x1>
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	19 f4       	brne	.+6      	; 0x1346 <main+0xd2>
    1340:	84 e0       	ldi	r24, 0x04	; 4
    1342:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <APP>
		
		switch (APP)
    1346:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <APP>
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	71 f1       	breq	.+92     	; 0x13aa <main+0x136>
    134e:	18 f4       	brcc	.+6      	; 0x1356 <main+0xe2>
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	39 f0       	breq	.+14     	; 0x1362 <main+0xee>
    1354:	a5 cf       	rjmp	.-182    	; 0x12a0 <main+0x2c>
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	e9 f1       	breq	.+122    	; 0x13d4 <main+0x160>
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	09 f4       	brne	.+2      	; 0x1360 <main+0xec>
    135e:	b2 c0       	rjmp	.+356    	; 0x14c4 <main+0x250>
    1360:	9f cf       	rjmp	.-194    	; 0x12a0 <main+0x2c>
		{
			case CLOCK :
			{
				LCD_voidClear();
    1362:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClear>
				LCD_voidSetCursor(LCD_U8_LINE1 ,0);
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	80 e8       	ldi	r24, 0x80	; 128
    136a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("HOUR MINT SCND");
    136e:	8e e7       	ldi	r24, 0x7E	; 126
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_LINE2 ,0);
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	80 ec       	ldi	r24, 0xC0	; 192
    137a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("    :    :");
    137e:	8d e8       	ldi	r24, 0x8D	; 141
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				H = SET_HOUR();
    1386:	0e 94 33 07 	call	0xe66	; 0xe66 <SET_HOUR>
    138a:	c8 2f       	mov	r28, r24
				M = SET_MINUTES();
    138c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <SET_MINUTES>
    1390:	d8 2f       	mov	r29, r24
				S = SET_SECONDS();
    1392:	0e 94 28 08 	call	0x1050	; 0x1050 <SET_SECONDS>
    1396:	18 2f       	mov	r17, r24
				D = SET_MODE();
    1398:	0e 94 80 08 	call	0x1100	; 0x1100 <SET_MODE>
				START_TIMER2_FOR_REAL_CLOCK(H,M,S,D);
    139c:	28 2f       	mov	r18, r24
    139e:	41 2f       	mov	r20, r17
    13a0:	6d 2f       	mov	r22, r29
    13a2:	8c 2f       	mov	r24, r28
    13a4:	0e 94 76 03 	call	0x6ec	; 0x6ec <START_TIMER2_FOR_REAL_CLOCK>
				
				break;
    13a8:	7b cf       	rjmp	.-266    	; 0x12a0 <main+0x2c>
			}
			case STOP_WATCH :
			{
				LCD_voidClear();
    13aa:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClear>
				LCD_voidSetCursor(LCD_U8_LINE1 ,0);
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	80 e8       	ldi	r24, 0x80	; 128
    13b2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("HUR MIN SEC DECI");
    13b6:	88 e9       	ldi	r24, 0x98	; 152
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_LINE2 ,0);
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	80 ec       	ldi	r24, 0xC0	; 192
    13c2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("   :   :   :");
    13c6:	89 ea       	ldi	r24, 0xA9	; 169
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				START_TIMER2_FOR_STOP_WATCH();
    13ce:	0e 94 63 05 	call	0xac6	; 0xac6 <START_TIMER2_FOR_STOP_WATCH>
				break;
    13d2:	66 cf       	rjmp	.-308    	; 0x12a0 <main+0x2c>
			}
			case ALARM :
			{
				LCD_voidClear();
    13d4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClear>
				LCD_voidSetCursor(LCD_U8_LINE1 ,1);
    13d8:	61 e0       	ldi	r22, 0x01	; 1
    13da:	80 e8       	ldi	r24, 0x80	; 128
    13dc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("AT FIRST ENTER");
    13e0:	86 eb       	ldi	r24, 0xB6	; 182
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_LINE2 ,2);
    13e8:	62 e0       	ldi	r22, 0x02	; 2
    13ea:	80 ec       	ldi	r24, 0xC0	; 192
    13ec:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("YOUR ALARM");
    13f0:	85 ec       	ldi	r24, 0xC5	; 197
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
    13f8:	2f ef       	ldi	r18, 0xFF	; 255
    13fa:	87 ea       	ldi	r24, 0xA7	; 167
    13fc:	91 e6       	ldi	r25, 0x61	; 97
    13fe:	21 50       	subi	r18, 0x01	; 1
    1400:	80 40       	sbci	r24, 0x00	; 0
    1402:	90 40       	sbci	r25, 0x00	; 0
    1404:	e1 f7       	brne	.-8      	; 0x13fe <main+0x18a>
    1406:	00 c0       	rjmp	.+0      	; 0x1408 <main+0x194>
    1408:	00 00       	nop
				_delay_ms(2000);
				LCD_voidClear();
    140a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClear>
				LCD_voidSetCursor(LCD_U8_LINE1 ,0);
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	80 e8       	ldi	r24, 0x80	; 128
    1412:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("HOUR MINT SCND");
    1416:	8e e7       	ldi	r24, 0x7E	; 126
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_LINE2 ,0);
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	80 ec       	ldi	r24, 0xC0	; 192
    1422:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("    :    :");
    1426:	8d e8       	ldi	r24, 0x8D	; 141
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				ALARM_H = SET_HOUR();
    142e:	0e 94 33 07 	call	0xe66	; 0xe66 <SET_HOUR>
    1432:	08 2f       	mov	r16, r24
				ALARM_M = SET_MINUTES();
    1434:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <SET_MINUTES>
    1438:	e8 2e       	mov	r14, r24
				ALARM_S = SET_SECONDS();
    143a:	0e 94 28 08 	call	0x1050	; 0x1050 <SET_SECONDS>
    143e:	c8 2e       	mov	r12, r24
				ALARM_D = SET_MODE();
    1440:	0e 94 80 08 	call	0x1100	; 0x1100 <SET_MODE>
    1444:	a8 2e       	mov	r10, r24
				
				LCD_voidClear();
    1446:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClear>
				LCD_voidSetCursor(LCD_U8_LINE1 ,2);
    144a:	62 e0       	ldi	r22, 0x02	; 2
    144c:	80 e8       	ldi	r24, 0x80	; 128
    144e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("NOW ENTER");
    1452:	80 ed       	ldi	r24, 0xD0	; 208
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_LINE2 ,1);
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	80 ec       	ldi	r24, 0xC0	; 192
    145e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("THE REAL TIME");
    1462:	8a ed       	ldi	r24, 0xDA	; 218
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
    146a:	2f ef       	ldi	r18, 0xFF	; 255
    146c:	87 ea       	ldi	r24, 0xA7	; 167
    146e:	91 e6       	ldi	r25, 0x61	; 97
    1470:	21 50       	subi	r18, 0x01	; 1
    1472:	80 40       	sbci	r24, 0x00	; 0
    1474:	90 40       	sbci	r25, 0x00	; 0
    1476:	e1 f7       	brne	.-8      	; 0x1470 <main+0x1fc>
    1478:	00 c0       	rjmp	.+0      	; 0x147a <main+0x206>
    147a:	00 00       	nop
				_delay_ms(2000);
				LCD_voidClear();
    147c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClear>
				LCD_voidSetCursor(LCD_U8_LINE1 ,0);
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	80 e8       	ldi	r24, 0x80	; 128
    1484:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("HOUR MINT SCND");
    1488:	8e e7       	ldi	r24, 0x7E	; 126
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_LINE2 ,0);
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	80 ec       	ldi	r24, 0xC0	; 192
    1494:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("    :    :");
    1498:	8d e8       	ldi	r24, 0x8D	; 141
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				H = SET_HOUR();
    14a0:	0e 94 33 07 	call	0xe66	; 0xe66 <SET_HOUR>
    14a4:	c8 2f       	mov	r28, r24
				M = SET_MINUTES();
    14a6:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <SET_MINUTES>
    14aa:	d8 2f       	mov	r29, r24
				S = SET_SECONDS();
    14ac:	0e 94 28 08 	call	0x1050	; 0x1050 <SET_SECONDS>
    14b0:	18 2f       	mov	r17, r24
				D = SET_MODE();
    14b2:	0e 94 80 08 	call	0x1100	; 0x1100 <SET_MODE>
				
				START_TIMER2_FOR_ALARM(H,M,S,D,ALARM_H,ALARM_M,ALARM_S,ALARM_D);
    14b6:	28 2f       	mov	r18, r24
    14b8:	41 2f       	mov	r20, r17
    14ba:	6d 2f       	mov	r22, r29
    14bc:	8c 2f       	mov	r24, r28
    14be:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <START_TIMER2_FOR_ALARM>
				break;
    14c2:	ee ce       	rjmp	.-548    	; 0x12a0 <main+0x2c>
			}
			case TIMER :
			{
				LCD_voidClear();
    14c4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClear>
				LCD_voidSetCursor(LCD_U8_LINE1 ,2);
    14c8:	62 e0       	ldi	r22, 0x02	; 2
    14ca:	80 e8       	ldi	r24, 0x80	; 128
    14cc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("ENTER YOUR");
    14d0:	88 ee       	ldi	r24, 0xE8	; 232
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_LINE2 ,4);
    14d8:	64 e0       	ldi	r22, 0x04	; 4
    14da:	80 ec       	ldi	r24, 0xC0	; 192
    14dc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("TIMER");
    14e0:	88 e7       	ldi	r24, 0x78	; 120
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
    14e8:	2f ef       	ldi	r18, 0xFF	; 255
    14ea:	87 ea       	ldi	r24, 0xA7	; 167
    14ec:	91 e6       	ldi	r25, 0x61	; 97
    14ee:	21 50       	subi	r18, 0x01	; 1
    14f0:	80 40       	sbci	r24, 0x00	; 0
    14f2:	90 40       	sbci	r25, 0x00	; 0
    14f4:	e1 f7       	brne	.-8      	; 0x14ee <main+0x27a>
    14f6:	00 c0       	rjmp	.+0      	; 0x14f8 <main+0x284>
    14f8:	00 00       	nop
				_delay_ms(2000);
				LCD_voidClear();
    14fa:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClear>
				LCD_voidSetCursor(LCD_U8_LINE1 ,0);
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	80 e8       	ldi	r24, 0x80	; 128
    1502:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("HOUR MINT SCND");
    1506:	8e e7       	ldi	r24, 0x7E	; 126
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				LCD_voidSetCursor(LCD_U8_LINE2 ,0);
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	80 ec       	ldi	r24, 0xC0	; 192
    1512:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_voidSetCursor>
				LCD_voidSendString("    :    :");
    1516:	8d e8       	ldi	r24, 0x8D	; 141
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 5f 02 	call	0x4be	; 0x4be <LCD_voidSendString>
				ALARM_H = SET_HOUR_TO_TIMER();
    151e:	0e 94 8b 07 	call	0xf16	; 0xf16 <SET_HOUR_TO_TIMER>
    1522:	c8 2f       	mov	r28, r24
				ALARM_M = SET_MINUTES();
    1524:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <SET_MINUTES>
    1528:	d8 2f       	mov	r29, r24
				ALARM_S = SET_SECONDS();
    152a:	0e 94 28 08 	call	0x1050	; 0x1050 <SET_SECONDS>
				START_TIMER2_FOR_TIMER (ALARM_H,ALARM_M,ALARM_S);
    152e:	48 2f       	mov	r20, r24
    1530:	6d 2f       	mov	r22, r29
    1532:	8c 2f       	mov	r24, r28
    1534:	0e 94 db 04 	call	0x9b6	; 0x9b6 <START_TIMER2_FOR_TIMER>
				break;
    1538:	b3 ce       	rjmp	.-666    	; 0x12a0 <main+0x2c>

0000153a <__umulhisi3>:
    153a:	a2 9f       	mul	r26, r18
    153c:	b0 01       	movw	r22, r0
    153e:	b3 9f       	mul	r27, r19
    1540:	c0 01       	movw	r24, r0
    1542:	a3 9f       	mul	r26, r19
    1544:	70 0d       	add	r23, r0
    1546:	81 1d       	adc	r24, r1
    1548:	11 24       	eor	r1, r1
    154a:	91 1d       	adc	r25, r1
    154c:	b2 9f       	mul	r27, r18
    154e:	70 0d       	add	r23, r0
    1550:	81 1d       	adc	r24, r1
    1552:	11 24       	eor	r1, r1
    1554:	91 1d       	adc	r25, r1
    1556:	08 95       	ret

00001558 <_exit>:
    1558:	f8 94       	cli

0000155a <__stop_program>:
    155a:	ff cf       	rjmp	.-2      	; 0x155a <__stop_program>
