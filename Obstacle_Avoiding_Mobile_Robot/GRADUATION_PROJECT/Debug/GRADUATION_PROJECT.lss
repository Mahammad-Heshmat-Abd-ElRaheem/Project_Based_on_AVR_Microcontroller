
GRADUATION_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001074  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001074  00001108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008000a0  008000a0  00001148  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002681  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c29  00000000  00000000  00003ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000136c  00000000  00000000  0000470e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  00005a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096c  00000000  00000000  00006148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012e6  00000000  00000000  00006ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00007d9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__vector_1>
       8:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_9>
      28:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__vector_10>
      2c:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_13>
      38:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3c       	cpi	r26, 0xC1	; 193
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 05 	call	0xb38	; 0xb38 <main>
      8a:	0c 94 38 08 	jmp	0x1070	; 0x1070 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInit>:



void DIO_voidInit(void)
{
	DDRA=DIO_U8_PORTA_DIR;
      92:	88 ef       	ldi	r24, 0xF8	; 248
      94:	8a bb       	out	0x1a, r24	; 26
	DDRB=DIO_U8_PORTB_DIR;
      96:	9f e1       	ldi	r25, 0x1F	; 31
      98:	97 bb       	out	0x17, r25	; 23
	DDRC=DIO_U8_PORTC_DIR;
      9a:	84 bb       	out	0x14, r24	; 20
	DDRD=DIO_U8_PORTD_DIR;
      9c:	80 e3       	ldi	r24, 0x30	; 48
      9e:	81 bb       	out	0x11, r24	; 17
      a0:	08 95       	ret

000000a2 <DIO_voidSetPinValue>:
}

void DIO_voidSetPinValue(u8 Copy_u8Pin , u8 Copy_u8Value)
{
	if(Copy_u8Pin <= DIO_U8_PORTA_LAST_PIN)
      a2:	88 30       	cpi	r24, 0x08	; 8
      a4:	00 f5       	brcc	.+64     	; 0xe6 <DIO_voidSetPinValue+0x44>
	{
		switch(Copy_u8Value)
      a6:	66 23       	and	r22, r22
      a8:	81 f0       	breq	.+32     	; 0xca <DIO_voidSetPinValue+0x28>
      aa:	61 30       	cpi	r22, 0x01	; 1
      ac:	09 f0       	breq	.+2      	; 0xb0 <DIO_voidSetPinValue+0xe>
      ae:	81 c0       	rjmp	.+258    	; 0x1b2 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTA,Copy_u8Pin); break;
      b0:	4b b3       	in	r20, 0x1b	; 27
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	b9 01       	movw	r22, r18
      b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_voidSetPinValue+0x1c>
      ba:	66 0f       	add	r22, r22
      bc:	77 1f       	adc	r23, r23
      be:	8a 95       	dec	r24
      c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_voidSetPinValue+0x18>
      c2:	cb 01       	movw	r24, r22
      c4:	84 2b       	or	r24, r20
      c6:	8b bb       	out	0x1b, r24	; 27
      c8:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTA,Copy_u8Pin); break;
      ca:	4b b3       	in	r20, 0x1b	; 27
      cc:	21 e0       	ldi	r18, 0x01	; 1
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	b9 01       	movw	r22, r18
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_voidSetPinValue+0x36>
      d4:	66 0f       	add	r22, r22
      d6:	77 1f       	adc	r23, r23
      d8:	8a 95       	dec	r24
      da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_voidSetPinValue+0x32>
      dc:	cb 01       	movw	r24, r22
      de:	80 95       	com	r24
      e0:	84 23       	and	r24, r20
      e2:	8b bb       	out	0x1b, r24	; 27
      e4:	08 95       	ret
		}
	}
	else if(Copy_u8Pin <= DIO_U8_PORTB_LAST_PIN)
      e6:	80 31       	cpi	r24, 0x10	; 16
      e8:	08 f5       	brcc	.+66     	; 0x12c <DIO_voidSetPinValue+0x8a>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTA_LAST_PIN + DIO_U8_PORT_OFFSET);
      ea:	88 50       	subi	r24, 0x08	; 8
		switch(Copy_u8Value)
      ec:	66 23       	and	r22, r22
      ee:	81 f0       	breq	.+32     	; 0x110 <DIO_voidSetPinValue+0x6e>
      f0:	61 30       	cpi	r22, 0x01	; 1
      f2:	09 f0       	breq	.+2      	; 0xf6 <DIO_voidSetPinValue+0x54>
      f4:	5e c0       	rjmp	.+188    	; 0x1b2 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTB,Copy_u8Pin); break;
      f6:	48 b3       	in	r20, 0x18	; 24
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	b9 01       	movw	r22, r18
      fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_voidSetPinValue+0x62>
     100:	66 0f       	add	r22, r22
     102:	77 1f       	adc	r23, r23
     104:	8a 95       	dec	r24
     106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_voidSetPinValue+0x5e>
     108:	cb 01       	movw	r24, r22
     10a:	84 2b       	or	r24, r20
     10c:	88 bb       	out	0x18, r24	; 24
     10e:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTB,Copy_u8Pin); break;
     110:	48 b3       	in	r20, 0x18	; 24
     112:	21 e0       	ldi	r18, 0x01	; 1
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	b9 01       	movw	r22, r18
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinValue+0x7c>
     11a:	66 0f       	add	r22, r22
     11c:	77 1f       	adc	r23, r23
     11e:	8a 95       	dec	r24
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinValue+0x78>
     122:	cb 01       	movw	r24, r22
     124:	80 95       	com	r24
     126:	84 23       	and	r24, r20
     128:	88 bb       	out	0x18, r24	; 24
     12a:	08 95       	ret
		}	
	}
	else if(Copy_u8Pin <= DIO_U8_PORTC_LAST_PIN)
     12c:	88 31       	cpi	r24, 0x18	; 24
     12e:	00 f5       	brcc	.+64     	; 0x170 <DIO_voidSetPinValue+0xce>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTB_LAST_PIN + DIO_U8_PORT_OFFSET);
     130:	80 51       	subi	r24, 0x10	; 16
		switch(Copy_u8Value)
     132:	66 23       	and	r22, r22
     134:	79 f0       	breq	.+30     	; 0x154 <DIO_voidSetPinValue+0xb2>
     136:	61 30       	cpi	r22, 0x01	; 1
     138:	e1 f5       	brne	.+120    	; 0x1b2 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTC,Copy_u8Pin); break;
     13a:	45 b3       	in	r20, 0x15	; 21
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	b9 01       	movw	r22, r18
     142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_voidSetPinValue+0xa6>
     144:	66 0f       	add	r22, r22
     146:	77 1f       	adc	r23, r23
     148:	8a 95       	dec	r24
     14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_voidSetPinValue+0xa2>
     14c:	cb 01       	movw	r24, r22
     14e:	84 2b       	or	r24, r20
     150:	85 bb       	out	0x15, r24	; 21
     152:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTC,Copy_u8Pin); break;
     154:	45 b3       	in	r20, 0x15	; 21
     156:	21 e0       	ldi	r18, 0x01	; 1
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	b9 01       	movw	r22, r18
     15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_voidSetPinValue+0xc0>
     15e:	66 0f       	add	r22, r22
     160:	77 1f       	adc	r23, r23
     162:	8a 95       	dec	r24
     164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_voidSetPinValue+0xbc>
     166:	cb 01       	movw	r24, r22
     168:	80 95       	com	r24
     16a:	84 23       	and	r24, r20
     16c:	85 bb       	out	0x15, r24	; 21
     16e:	08 95       	ret
		}			
	}
	else if(Copy_u8Pin <= DIO_U8_PORTD_LAST_PIN)
     170:	80 32       	cpi	r24, 0x20	; 32
     172:	f8 f4       	brcc	.+62     	; 0x1b2 <DIO_voidSetPinValue+0x110>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTC_LAST_PIN + DIO_U8_PORT_OFFSET);
     174:	88 51       	subi	r24, 0x18	; 24
		switch(Copy_u8Value)
     176:	66 23       	and	r22, r22
     178:	79 f0       	breq	.+30     	; 0x198 <DIO_voidSetPinValue+0xf6>
     17a:	61 30       	cpi	r22, 0x01	; 1
     17c:	d1 f4       	brne	.+52     	; 0x1b2 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTD,Copy_u8Pin); break;
     17e:	42 b3       	in	r20, 0x12	; 18
     180:	21 e0       	ldi	r18, 0x01	; 1
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	b9 01       	movw	r22, r18
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_voidSetPinValue+0xea>
     188:	66 0f       	add	r22, r22
     18a:	77 1f       	adc	r23, r23
     18c:	8a 95       	dec	r24
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_voidSetPinValue+0xe6>
     190:	cb 01       	movw	r24, r22
     192:	84 2b       	or	r24, r20
     194:	82 bb       	out	0x12, r24	; 18
     196:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTD,Copy_u8Pin); break;
     198:	42 b3       	in	r20, 0x12	; 18
     19a:	21 e0       	ldi	r18, 0x01	; 1
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	b9 01       	movw	r22, r18
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_voidSetPinValue+0x104>
     1a2:	66 0f       	add	r22, r22
     1a4:	77 1f       	adc	r23, r23
     1a6:	8a 95       	dec	r24
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_voidSetPinValue+0x100>
     1aa:	cb 01       	movw	r24, r22
     1ac:	80 95       	com	r24
     1ae:	84 23       	and	r24, r20
     1b0:	82 bb       	out	0x12, r24	; 18
     1b2:	08 95       	ret

000001b4 <EXTI_voidEnableINT0>:
	 GIE_voidDisable ();                                         // *
	 EXTI_voidClearFlagINT0 ();                                 //*
}                                                                //*
void EXTI_voidEnableINT0 (void)                                  //*
{                                                                //*
	SET_BIT (GICR , 6);                                          //*
     1b4:	8b b7       	in	r24, 0x3b	; 59
     1b6:	80 64       	ori	r24, 0x40	; 64
     1b8:	8b bf       	out	0x3b, r24	; 59
     1ba:	08 95       	ret

000001bc <EXTI_voidDisableINT0>:
}                                                                //*
void EXTI_voidDisableINT0 (void)                                 //*
{                                                                //*
	CLEAR_BIT (GICR , 6);                                        //*
     1bc:	8b b7       	in	r24, 0x3b	; 59
     1be:	8f 7b       	andi	r24, 0xBF	; 191
     1c0:	8b bf       	out	0x3b, r24	; 59
     1c2:	08 95       	ret

000001c4 <EXTI_voidClearFlagINT0>:
}                                                                //*
void EXTI_voidClearFlagINT0 (void)                               //*
{                                                                //*
	SET_BIT(GIFR , 6);                                           //*
     1c4:	8a b7       	in	r24, 0x3a	; 58
     1c6:	80 64       	ori	r24, 0x40	; 64
     1c8:	8a bf       	out	0x3a, r24	; 58
     1ca:	08 95       	ret

000001cc <EXTI_voidInitINT0>:
		CLEAR_BIT (MCUCR,1);                                     //*
	#elif EXTI0_U8_EVENT == EXTI0_U8_RISING                        //*
		SET_BIT (MCUCR,0);                                       //*
		SET_BIT (MCUCR,1);                                       //*
	#elif EXTI0_U8_EVENT == EXTI0_U8_FALLING                       //*
		CLEAR_BIT (MCUCR,0);                                     //*
     1cc:	85 b7       	in	r24, 0x35	; 53
     1ce:	8e 7f       	andi	r24, 0xFE	; 254
     1d0:	85 bf       	out	0x35, r24	; 53
		SET_BIT (MCUCR,1);                                       //*
     1d2:	85 b7       	in	r24, 0x35	; 53
     1d4:	82 60       	ori	r24, 0x02	; 2
     1d6:	85 bf       	out	0x35, r24	; 53
	#elif EXTI0_U8_EVENT == EXTI0_U8_ANY_CHANGE                    //*
		SET_BIT (MCUCR,0);                                       //*
		CLEAR_BIT (MCUCR,1);                                     //*
	#endif                                                       //*
	 EXTI_voidDisableINT0 ();                                    // *
     1d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <EXTI_voidDisableINT0>
	 GIE_voidDisable ();                                         // *
     1dc:	0e 94 23 03 	call	0x646	; 0x646 <GIE_voidDisable>
	 EXTI_voidClearFlagINT0 ();                                 //*
     1e0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <EXTI_voidClearFlagINT0>
     1e4:	08 95       	ret

000001e6 <EXTI_voidEnableINT1>:
	 GIE_voidDisable ();                                         //*
	 EXTI_voidClearFlagINT1 ();                                  //*
}                                                                //*
void EXTI_voidEnableINT1 (void)                                  //*
{                                                                //*
	SET_BIT (GICR , 7);                                          //*
     1e6:	8b b7       	in	r24, 0x3b	; 59
     1e8:	80 68       	ori	r24, 0x80	; 128
     1ea:	8b bf       	out	0x3b, r24	; 59
     1ec:	08 95       	ret

000001ee <EXTI_voidDisableINT1>:
}                                                                //*
void EXTI_voidDisableINT1 (void)                                 //*
{                                                                //*
	CLEAR_BIT (GICR , 7);                                        //*
     1ee:	8b b7       	in	r24, 0x3b	; 59
     1f0:	8f 77       	andi	r24, 0x7F	; 127
     1f2:	8b bf       	out	0x3b, r24	; 59
     1f4:	08 95       	ret

000001f6 <EXTI_voidClearFlagINT1>:
}                                                                //*
void EXTI_voidClearFlagINT1 (void)                               //*
{                                                                //*
	SET_BIT(GIFR , 7);                                           //*
     1f6:	8a b7       	in	r24, 0x3a	; 58
     1f8:	80 68       	ori	r24, 0x80	; 128
     1fa:	8a bf       	out	0x3a, r24	; 58
     1fc:	08 95       	ret

000001fe <EXTI_voidInitINT1>:
		CLEAR_BIT (MCUCR,3);                                     //*
	#elif EXTI1_U8_EVENT == EXTI1_U8_RISING                        //*
		SET_BIT (MCUCR,2);                                       //*
		SET_BIT (MCUCR,3);                                       //*
	#elif EXTI1_U8_EVENT == EXTI1_U8_FALLING                       //*
		CLEAR_BIT (MCUCR,2);                                     //*
     1fe:	85 b7       	in	r24, 0x35	; 53
     200:	8b 7f       	andi	r24, 0xFB	; 251
     202:	85 bf       	out	0x35, r24	; 53
		SET_BIT (MCUCR,3);                                       //*
     204:	85 b7       	in	r24, 0x35	; 53
     206:	88 60       	ori	r24, 0x08	; 8
     208:	85 bf       	out	0x35, r24	; 53
	#elif EXTI1_U8_EVENT == EXTI1_U8_ANY_CHANGE                    //*
		SET_BIT (MCUCR,2);                                       //*
		CLEAR_BIT (MCUCR,3);                                     //*
	#endif                                                       //*
	 EXTI_voidDisableINT1 ();                                    //*
     20a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <EXTI_voidDisableINT1>
	 GIE_voidDisable ();                                         //*
     20e:	0e 94 23 03 	call	0x646	; 0x646 <GIE_voidDisable>
	 EXTI_voidClearFlagINT1 ();                                  //*
     212:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <EXTI_voidClearFlagINT1>
     216:	08 95       	ret

00000218 <__vector_9>:
u64 count;
volatile f64 distance;


ISR(TIMER1_OVF_vect)
{
     218:	1f 92       	push	r1
     21a:	0f 92       	push	r0
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	0f 92       	push	r0
     220:	11 24       	eor	r1, r1
     222:	8f 93       	push	r24
     224:	9f 93       	push	r25
     226:	af 93       	push	r26
     228:	bf 93       	push	r27
	TimerOverflow++;		/* Increment Timer Overflow count */
     22a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
     22e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
     232:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <__data_end+0x2>
     236:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <__data_end+0x3>
     23a:	01 96       	adiw	r24, 0x01	; 1
     23c:	a1 1d       	adc	r26, r1
     23e:	b1 1d       	adc	r27, r1
     240:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
     244:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__data_end+0x1>
     248:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <__data_end+0x2>
     24c:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <__data_end+0x3>
}
     250:	bf 91       	pop	r27
     252:	af 91       	pop	r26
     254:	9f 91       	pop	r25
     256:	8f 91       	pop	r24
     258:	0f 90       	pop	r0
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	0f 90       	pop	r0
     25e:	1f 90       	pop	r1
     260:	18 95       	reti

00000262 <GO_FORWARD>:


void GO_FORWARD (void)
{
	DIO_voidSetPinValue( H_A1 , HIGH );
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	83 e1       	ldi	r24, 0x13	; 19
     266:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , LOW );
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	84 e1       	ldi	r24, 0x14	; 20
     26e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , HIGH );
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	85 e1       	ldi	r24, 0x15	; 21
     276:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , LOW );
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	86 e1       	ldi	r24, 0x16	; 22
     27e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue( H_EN1 , HIGH );
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	8c e1       	ldi	r24, 0x1C	; 28
     286:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 ,HIGH );	
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	8d e1       	ldi	r24, 0x1D	; 29
     28e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     292:	08 95       	ret

00000294 <STOP>:
	STOP();
}

void STOP (void)
{
	DIO_voidSetPinValue( H_EN1 , LOW );
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	8c e1       	ldi	r24, 0x1C	; 28
     298:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 , LOW );
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	8d e1       	ldi	r24, 0x1D	; 29
     2a0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
		
	DIO_voidSetPinValue( H_A1 , LOW );
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	83 e1       	ldi	r24, 0x13	; 19
     2a8:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , LOW );
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	84 e1       	ldi	r24, 0x14	; 20
     2b0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , LOW );
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	85 e1       	ldi	r24, 0x15	; 21
     2b8:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , LOW);
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	86 e1       	ldi	r24, 0x16	; 22
     2c0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     2c4:	08 95       	ret

000002c6 <BACKWORD>:
	DIO_voidSetPinValue( H_EN2 ,HIGH );	
}

void BACKWORD (void)
{
	DIO_voidSetPinValue( H_A1 , LOW );
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	83 e1       	ldi	r24, 0x13	; 19
     2ca:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , HIGH );
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	84 e1       	ldi	r24, 0x14	; 20
     2d2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , LOW );
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	85 e1       	ldi	r24, 0x15	; 21
     2da:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , HIGH );
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	86 e1       	ldi	r24, 0x16	; 22
     2e2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue( H_EN1 , HIGH );
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	8c e1       	ldi	r24, 0x1C	; 28
     2ea:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 ,HIGH );
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	8d e1       	ldi	r24, 0x1D	; 29
     2f2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f6:	2f ef       	ldi	r18, 0xFF	; 255
     2f8:	89 e6       	ldi	r24, 0x69	; 105
     2fa:	98 e1       	ldi	r25, 0x18	; 24
     2fc:	21 50       	subi	r18, 0x01	; 1
     2fe:	80 40       	sbci	r24, 0x00	; 0
     300:	90 40       	sbci	r25, 0x00	; 0
     302:	e1 f7       	brne	.-8      	; 0x2fc <BACKWORD+0x36>
     304:	00 c0       	rjmp	.+0      	; 0x306 <BACKWORD+0x40>
     306:	00 00       	nop
	
	_delay_ms(500);	
	
	STOP();
     308:	0e 94 4a 01 	call	0x294	; 0x294 <STOP>
     30c:	08 95       	ret

0000030e <RETURN_180>:

}

void RETURN_180 (void)
{
	DIO_voidSetPinValue( H_A1 , LOW );  // RIGHT MOTOR BACKWORD
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	83 e1       	ldi	r24, 0x13	; 19
     312:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , HIGH ); 
     316:	61 e0       	ldi	r22, 0x01	; 1
     318:	84 e1       	ldi	r24, 0x14	; 20
     31a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , HIGH ); // LEFT MOTOR FORWORD
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	85 e1       	ldi	r24, 0x15	; 21
     322:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , LOW );	
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	86 e1       	ldi	r24, 0x16	; 22
     32a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue( H_EN1 , HIGH );
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	8c e1       	ldi	r24, 0x1C	; 28
     332:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 , HIGH );
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	8d e1       	ldi	r24, 0x1D	; 29
     33a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     33e:	2f ef       	ldi	r18, 0xFF	; 255
     340:	83 ed       	ldi	r24, 0xD3	; 211
     342:	90 e3       	ldi	r25, 0x30	; 48
     344:	21 50       	subi	r18, 0x01	; 1
     346:	80 40       	sbci	r24, 0x00	; 0
     348:	90 40       	sbci	r25, 0x00	; 0
     34a:	e1 f7       	brne	.-8      	; 0x344 <RETURN_180+0x36>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <RETURN_180+0x40>
     34e:	00 00       	nop
	_delay_ms(1000);						//DESIRED TIME TO ROTATE 180 
	
	STOP ();                                      
     350:	0e 94 4a 01 	call	0x294	; 0x294 <STOP>
     354:	08 95       	ret

00000356 <TURN_RIGHT>:
}

void TURN_RIGHT (void)
{	
	DIO_voidSetPinValue( H_A1 , LOW );
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	83 e1       	ldi	r24, 0x13	; 19
     35a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , LOW );
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	84 e1       	ldi	r24, 0x14	; 20
     362:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , HIGH );
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	85 e1       	ldi	r24, 0x15	; 21
     36a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , LOW );
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	86 e1       	ldi	r24, 0x16	; 22
     372:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue( H_EN1 , HIGH);
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	8c e1       	ldi	r24, 0x1C	; 28
     37a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 , HIGH);
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	8d e1       	ldi	r24, 0x1D	; 29
     382:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     386:	2f ef       	ldi	r18, 0xFF	; 255
     388:	83 ed       	ldi	r24, 0xD3	; 211
     38a:	90 e3       	ldi	r25, 0x30	; 48
     38c:	21 50       	subi	r18, 0x01	; 1
     38e:	80 40       	sbci	r24, 0x00	; 0
     390:	90 40       	sbci	r25, 0x00	; 0
     392:	e1 f7       	brne	.-8      	; 0x38c <TURN_RIGHT+0x36>
     394:	00 c0       	rjmp	.+0      	; 0x396 <TURN_RIGHT+0x40>
     396:	00 00       	nop
	_delay_ms(1000);
	STOP ();  
     398:	0e 94 4a 01 	call	0x294	; 0x294 <STOP>
     39c:	08 95       	ret

0000039e <TURN_LEFT>:
}

void TURN_LEFT (void)
{
	DIO_voidSetPinValue( H_A1 , HIGH);
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	83 e1       	ldi	r24, 0x13	; 19
     3a2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , LOW );
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	84 e1       	ldi	r24, 0x14	; 20
     3aa:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , LOW );
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	85 e1       	ldi	r24, 0x15	; 21
     3b2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , LOW );
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	86 e1       	ldi	r24, 0x16	; 22
     3ba:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue( H_EN1 , HIGH);
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	8c e1       	ldi	r24, 0x1C	; 28
     3c2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 , HIGH);
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	8d e1       	ldi	r24, 0x1D	; 29
     3ca:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     3ce:	2f ef       	ldi	r18, 0xFF	; 255
     3d0:	83 ed       	ldi	r24, 0xD3	; 211
     3d2:	90 e3       	ldi	r25, 0x30	; 48
     3d4:	21 50       	subi	r18, 0x01	; 1
     3d6:	80 40       	sbci	r24, 0x00	; 0
     3d8:	90 40       	sbci	r25, 0x00	; 0
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <TURN_LEFT+0x36>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <TURN_LEFT+0x40>
     3de:	00 00       	nop
	_delay_ms(1000);
	STOP ();  
     3e0:	0e 94 4a 01 	call	0x294	; 0x294 <STOP>
     3e4:	08 95       	ret

000003e6 <ULTRASONIC_f64Distance>:
}


f64 ULTRASONIC_f64Distance(void)
{
	DIO_voidSetPinValue(DIO_U8_PIN8,DIO_U8_HIGH);
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	88 e0       	ldi	r24, 0x08	; 8
     3ea:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ee:	25 e3       	ldi	r18, 0x35	; 53
     3f0:	2a 95       	dec	r18
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <ULTRASONIC_f64Distance+0xa>
     3f4:	00 00       	nop
	_delay_us(10);
	DIO_voidSetPinValue(DIO_U8_PIN8,DIO_U8_LOW);
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	88 e0       	ldi	r24, 0x08	; 8
     3fa:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	
	TCNT1 = 0;			// Clear Timer counter
     3fe:	1d bc       	out	0x2d, r1	; 45
     400:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0b01000010 ;		// Setting for capture rising edge,  using clk/8 pre-scaler
     402:	82 e4       	ldi	r24, 0x42	; 66
     404:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;		// Clear ICP flag (Input Capture flag) 
     406:	80 e2       	ldi	r24, 0x20	; 32
     408:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;		// Clear Timer Overflow flag 
     40a:	84 e0       	ldi	r24, 0x04	; 4
     40c:	88 bf       	out	0x38, r24	; 56
    
	/*Calculate width of Echo by Input Capture (ICP) on PortD PD6*/ 
	while ((TIFR & (1 << ICF1)) == 0);	// Wait for rising edge 
     40e:	08 b6       	in	r0, 0x38	; 56
     410:	05 fe       	sbrs	r0, 5
     412:	fd cf       	rjmp	.-6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	
	TCNT1 = 0;			// Clear Timer counter 
     414:	1d bc       	out	0x2d, r1	; 45
     416:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0b00000010 ;		// Setting for capture falling edge, using clk/8 pre-scaler 
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;		// Clear ICP flag (Input Capture flag) 
     41c:	80 e2       	ldi	r24, 0x20	; 32
     41e:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;		// Clear Timer Overflow flag 
     420:	84 e0       	ldi	r24, 0x04	; 4
     422:	88 bf       	out	0x38, r24	; 56
	
	TimerOverflow = 0;	// Clear Timer overflow count 
     424:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
     428:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x1>
     42c:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__data_end+0x2>
     430:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__data_end+0x3>

	while ((TIFR & (1 << ICF1)) == 0); // Wait for falling edge 
     434:	08 b6       	in	r0, 0x38	; 56
     436:	05 fe       	sbrs	r0, 5
     438:	fd cf       	rjmp	.-6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	
	count = ICR1 + (65535 * TimerOverflow);	// Take value of capture register
     43a:	e6 b5       	in	r30, 0x26	; 38
     43c:	f7 b5       	in	r31, 0x27	; 39
     43e:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__data_end>
     442:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <__data_end+0x1>
     446:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__data_end+0x2>
     44a:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__data_end+0x3>
     44e:	af ef       	ldi	r26, 0xFF	; 255
     450:	bf ef       	ldi	r27, 0xFF	; 255
     452:	0e 94 2d 08 	call	0x105a	; 0x105a <__muluhisi3>
     456:	6e 0f       	add	r22, r30
     458:	7f 1f       	adc	r23, r31
     45a:	81 1d       	adc	r24, r1
     45c:	91 1d       	adc	r25, r1
     45e:	60 93 ad 00 	sts	0x00AD, r22	; 0x8000ad <count>
     462:	70 93 ae 00 	sts	0x00AE, r23	; 0x8000ae <count+0x1>
     466:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <count+0x2>
     46a:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <count+0x3>
	distance = ((double)count * 0.008575 ) ;   // 8 MHz Timer freq, sound speed =343 m/s
     46e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__floatunsisf>
     472:	28 e2       	ldi	r18, 0x28	; 40
     474:	3e e7       	ldi	r19, 0x7E	; 126
     476:	4c e0       	ldi	r20, 0x0C	; 12
     478:	5c e3       	ldi	r21, 0x3C	; 60
     47a:	0e 94 89 07 	call	0xf12	; 0xf12 <__mulsf3>
     47e:	60 93 a5 00 	sts	0x00A5, r22	; 0x8000a5 <distance>
     482:	70 93 a6 00 	sts	0x00A6, r23	; 0x8000a6 <distance+0x1>
     486:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <distance+0x2>
     48a:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <distance+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	91 ee       	ldi	r25, 0xE1	; 225
     492:	24 e0       	ldi	r18, 0x04	; 4
     494:	81 50       	subi	r24, 0x01	; 1
     496:	90 40       	sbci	r25, 0x00	; 0
     498:	20 40       	sbci	r18, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     49e:	00 00       	nop
	_delay_ms(100);
	
	return distance;
     4a0:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <distance>
     4a4:	70 91 a6 00 	lds	r23, 0x00A6	; 0x8000a6 <distance+0x1>
     4a8:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <distance+0x2>
     4ac:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <distance+0x3>
     4b0:	08 95       	ret

000004b2 <CHECK>:
	_delay_ms(1000);
	STOP ();  
}

void CHECK(void)
{
     4b2:	8f 92       	push	r8
     4b4:	9f 92       	push	r9
     4b6:	af 92       	push	r10
     4b8:	bf 92       	push	r11
     4ba:	cf 92       	push	r12
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
	LCD_voidClear();
     4c2:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_voidClear>
	LCD_voidSetCursor( LCD_U8_LINE1 , 2 );
     4c6:	62 e0       	ldi	r22, 0x02	; 2
     4c8:	80 e8       	ldi	r24, 0x80	; 128
     4ca:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidSetCursor>
	LCD_voidSendString("CHICKING...");
     4ce:	80 e6       	ldi	r24, 0x60	; 96
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_voidSendString>
	
	TIMER0_void_SetCompareVal(24);
     4d6:	88 e1       	ldi	r24, 0x18	; 24
     4d8:	0e 94 28 06 	call	0xc50	; 0xc50 <TIMER0_void_SetCompareVal>
     4dc:	2f ef       	ldi	r18, 0xFF	; 255
     4de:	81 ee       	ldi	r24, 0xE1	; 225
     4e0:	94 e0       	ldi	r25, 0x04	; 4
     4e2:	21 50       	subi	r18, 0x01	; 1
     4e4:	80 40       	sbci	r24, 0x00	; 0
     4e6:	90 40       	sbci	r25, 0x00	; 0
     4e8:	e1 f7       	brne	.-8      	; 0x4e2 <CHECK+0x30>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <CHECK+0x3a>
     4ec:	00 00       	nop
	_delay_ms(100);
	TIMER0_void_SetCompareVal(13);
     4ee:	8d e0       	ldi	r24, 0x0D	; 13
     4f0:	0e 94 28 06 	call	0xc50	; 0xc50 <TIMER0_void_SetCompareVal>
	L_DISTANCE = ULTRASONIC_f64Distance();
     4f4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ULTRASONIC_f64Distance>
     4f8:	60 93 b1 00 	sts	0x00B1, r22	; 0x8000b1 <L_DISTANCE>
     4fc:	70 93 b2 00 	sts	0x00B2, r23	; 0x8000b2 <L_DISTANCE+0x1>
     500:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <L_DISTANCE+0x2>
     504:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <L_DISTANCE+0x3>
     508:	2f ef       	ldi	r18, 0xFF	; 255
     50a:	85 ea       	ldi	r24, 0xA5	; 165
     50c:	9e e0       	ldi	r25, 0x0E	; 14
     50e:	21 50       	subi	r18, 0x01	; 1
     510:	80 40       	sbci	r24, 0x00	; 0
     512:	90 40       	sbci	r25, 0x00	; 0
     514:	e1 f7       	brne	.-8      	; 0x50e <CHECK+0x5c>
     516:	00 c0       	rjmp	.+0      	; 0x518 <CHECK+0x66>
     518:	00 00       	nop
	_delay_ms(300);
	TIMER0_void_SetCompareVal(34);
     51a:	82 e2       	ldi	r24, 0x22	; 34
     51c:	0e 94 28 06 	call	0xc50	; 0xc50 <TIMER0_void_SetCompareVal>
	R_DISTANCE = ULTRASONIC_f64Distance();
     520:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ULTRASONIC_f64Distance>
     524:	60 93 a9 00 	sts	0x00A9, r22	; 0x8000a9 <R_DISTANCE>
     528:	70 93 aa 00 	sts	0x00AA, r23	; 0x8000aa <R_DISTANCE+0x1>
     52c:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <R_DISTANCE+0x2>
     530:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <R_DISTANCE+0x3>
     534:	2f ef       	ldi	r18, 0xFF	; 255
     536:	85 ea       	ldi	r24, 0xA5	; 165
     538:	9e e0       	ldi	r25, 0x0E	; 14
     53a:	21 50       	subi	r18, 0x01	; 1
     53c:	80 40       	sbci	r24, 0x00	; 0
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <CHECK+0x88>
     542:	00 c0       	rjmp	.+0      	; 0x544 <CHECK+0x92>
     544:	00 00       	nop
	_delay_ms(300);
	TIMER0_void_SetCompareVal(24);
     546:	88 e1       	ldi	r24, 0x18	; 24
     548:	0e 94 28 06 	call	0xc50	; 0xc50 <TIMER0_void_SetCompareVal>
	
	if ((L_DISTANCE < 10.00 ) && (R_DISTANCE < 10.00))
     54c:	c0 90 b1 00 	lds	r12, 0x00B1	; 0x8000b1 <L_DISTANCE>
     550:	d0 90 b2 00 	lds	r13, 0x00B2	; 0x8000b2 <L_DISTANCE+0x1>
     554:	e0 90 b3 00 	lds	r14, 0x00B3	; 0x8000b3 <L_DISTANCE+0x2>
     558:	f0 90 b4 00 	lds	r15, 0x00B4	; 0x8000b4 <L_DISTANCE+0x3>
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	40 e2       	ldi	r20, 0x20	; 32
     562:	51 e4       	ldi	r21, 0x41	; 65
     564:	c7 01       	movw	r24, r14
     566:	b6 01       	movw	r22, r12
     568:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__cmpsf2>
     56c:	88 23       	and	r24, r24
     56e:	ec f4       	brge	.+58     	; 0x5aa <CHECK+0xf8>
     570:	60 91 a9 00 	lds	r22, 0x00A9	; 0x8000a9 <R_DISTANCE>
     574:	70 91 aa 00 	lds	r23, 0x00AA	; 0x8000aa <R_DISTANCE+0x1>
     578:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <R_DISTANCE+0x2>
     57c:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <R_DISTANCE+0x3>
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	40 e2       	ldi	r20, 0x20	; 32
     586:	51 e4       	ldi	r21, 0x41	; 65
     588:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__cmpsf2>
     58c:	88 23       	and	r24, r24
     58e:	6c f4       	brge	.+26     	; 0x5aa <CHECK+0xf8>
	{ 
		LCD_voidSetCursor( LCD_U8_LINE2 , 2 );
     590:	62 e0       	ldi	r22, 0x02	; 2
     592:	80 ec       	ldi	r24, 0xC0	; 192
     594:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidSetCursor>
		LCD_voidSendString("RETURN BACK");
     598:	8c e6       	ldi	r24, 0x6C	; 108
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_voidSendString>
		BACKWORD(); RETURN_180(); 
     5a0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <BACKWORD>
     5a4:	0e 94 87 01 	call	0x30e	; 0x30e <RETURN_180>
     5a8:	31 c0       	rjmp	.+98     	; 0x60c <CHECK+0x15a>
	}
	else if (L_DISTANCE > R_DISTANCE)
     5aa:	80 90 a9 00 	lds	r8, 0x00A9	; 0x8000a9 <R_DISTANCE>
     5ae:	90 90 aa 00 	lds	r9, 0x00AA	; 0x8000aa <R_DISTANCE+0x1>
     5b2:	a0 90 ab 00 	lds	r10, 0x00AB	; 0x8000ab <R_DISTANCE+0x2>
     5b6:	b0 90 ac 00 	lds	r11, 0x00AC	; 0x8000ac <R_DISTANCE+0x3>
     5ba:	a5 01       	movw	r20, r10
     5bc:	94 01       	movw	r18, r8
     5be:	c7 01       	movw	r24, r14
     5c0:	b6 01       	movw	r22, r12
     5c2:	0e 94 84 07 	call	0xf08	; 0xf08 <__gesf2>
     5c6:	18 16       	cp	r1, r24
     5c8:	6c f4       	brge	.+26     	; 0x5e4 <CHECK+0x132>
	{ 
		LCD_voidSetCursor( LCD_U8_LINE2 , 4 );
     5ca:	64 e0       	ldi	r22, 0x04	; 4
     5cc:	80 ec       	ldi	r24, 0xC0	; 192
     5ce:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidSetCursor>
		LCD_voidSendString("TURN LEFT");
     5d2:	88 e7       	ldi	r24, 0x78	; 120
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_voidSendString>
		BACKWORD(); TURN_LEFT(); 
     5da:	0e 94 63 01 	call	0x2c6	; 0x2c6 <BACKWORD>
     5de:	0e 94 cf 01 	call	0x39e	; 0x39e <TURN_LEFT>
     5e2:	14 c0       	rjmp	.+40     	; 0x60c <CHECK+0x15a>
	}
	else if (R_DISTANCE > L_DISTANCE)
     5e4:	a5 01       	movw	r20, r10
     5e6:	94 01       	movw	r18, r8
     5e8:	c7 01       	movw	r24, r14
     5ea:	b6 01       	movw	r22, r12
     5ec:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__cmpsf2>
     5f0:	88 23       	and	r24, r24
     5f2:	64 f4       	brge	.+24     	; 0x60c <CHECK+0x15a>
	{ 
		LCD_voidSetCursor( LCD_U8_LINE2 , 3 );
     5f4:	63 e0       	ldi	r22, 0x03	; 3
     5f6:	80 ec       	ldi	r24, 0xC0	; 192
     5f8:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidSetCursor>
		LCD_voidSendString("TURN RIGHT");
     5fc:	82 e8       	ldi	r24, 0x82	; 130
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_voidSendString>
		BACKWORD(); TURN_RIGHT(); 
     604:	0e 94 63 01 	call	0x2c6	; 0x2c6 <BACKWORD>
     608:	0e 94 ab 01 	call	0x356	; 0x356 <TURN_RIGHT>
	}
	LCD_voidClear();
     60c:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_voidClear>
	LCD_voidSetCursor( LCD_U8_LINE1 , 1 );
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	80 e8       	ldi	r24, 0x80	; 128
     614:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidSetCursor>
	LCD_voidSendString("OBSTACLE AFTER");
     618:	8d e8       	ldi	r24, 0x8D	; 141
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_voidSendString>
	LCD_voidSetCursor( LCD_U8_LINE2 , 9 );
     620:	69 e0       	ldi	r22, 0x09	; 9
     622:	80 ec       	ldi	r24, 0xC0	; 192
     624:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidSetCursor>
	LCD_voidSendString("cm");
     628:	8c e9       	ldi	r24, 0x9C	; 156
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_voidSendString>
}
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	bf 90       	pop	r11
     63a:	af 90       	pop	r10
     63c:	9f 90       	pop	r9
     63e:	8f 90       	pop	r8
     640:	08 95       	ret

00000642 <GIE_voidEnable>:


void GIE_voidEnable(void)
{
	//SET_BIT(SREG , SREG_I) ; // set I bit to enable the general interrupt enable
    __asm volatile ("SEI");/*Inline assembly syntax in GCC toolchain*/
     642:	78 94       	sei
     644:	08 95       	ret

00000646 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
	
	//CLEAR_BIT(SREG , SREG_I); // clear I bit to disable the general interrupt enable
    __asm volatile("CLI");/*Inline assembly syntax in GCC toolchain*/
     646:	f8 94       	cli
     648:	08 95       	ret

0000064a <LCD_voidSendData>:
	for (u8 i = 0 ; i<2 ; i++)
	{
		arr[i] += 48 ;
		LCD_voidSendData(arr[i]);
	}
}
     64a:	cf 93       	push	r28
     64c:	c8 2f       	mov	r28, r24
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	8a e0       	ldi	r24, 0x0A	; 10
     652:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	89 e0       	ldi	r24, 0x09	; 9
     65a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     65e:	c4 fd       	sbrc	r28, 4
     660:	05 c0       	rjmp	.+10     	; 0x66c <LCD_voidSendData+0x22>
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	84 e0       	ldi	r24, 0x04	; 4
     666:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     66a:	04 c0       	rjmp	.+8      	; 0x674 <LCD_voidSendData+0x2a>
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     674:	c5 fd       	sbrc	r28, 5
     676:	05 c0       	rjmp	.+10     	; 0x682 <LCD_voidSendData+0x38>
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	85 e0       	ldi	r24, 0x05	; 5
     67c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     680:	04 c0       	rjmp	.+8      	; 0x68a <LCD_voidSendData+0x40>
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	85 e0       	ldi	r24, 0x05	; 5
     686:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     68a:	c6 fd       	sbrc	r28, 6
     68c:	05 c0       	rjmp	.+10     	; 0x698 <LCD_voidSendData+0x4e>
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	86 e0       	ldi	r24, 0x06	; 6
     692:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     696:	04 c0       	rjmp	.+8      	; 0x6a0 <LCD_voidSendData+0x56>
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	86 e0       	ldi	r24, 0x06	; 6
     69c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     6a0:	cc 23       	and	r28, r28
     6a2:	2c f0       	brlt	.+10     	; 0x6ae <LCD_voidSendData+0x64>
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	87 e0       	ldi	r24, 0x07	; 7
     6a8:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <LCD_voidSendData+0x6c>
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	87 e0       	ldi	r24, 0x07	; 7
     6b2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	8c e0       	ldi	r24, 0x0C	; 12
     6ba:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     6be:	8f e9       	ldi	r24, 0x9F	; 159
     6c0:	9f e0       	ldi	r25, 0x0F	; 15
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <LCD_voidSendData+0x78>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <LCD_voidSendData+0x7e>
     6c8:	00 00       	nop
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	8c e0       	ldi	r24, 0x0C	; 12
     6ce:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     6d2:	8f e9       	ldi	r24, 0x9F	; 159
     6d4:	9f e0       	ldi	r25, 0x0F	; 15
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <LCD_voidSendData+0x8c>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <LCD_voidSendData+0x92>
     6dc:	00 00       	nop
     6de:	c0 fd       	sbrc	r28, 0
     6e0:	05 c0       	rjmp	.+10     	; 0x6ec <LCD_voidSendData+0xa2>
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	84 e0       	ldi	r24, 0x04	; 4
     6e6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <LCD_voidSendData+0xaa>
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     6f4:	c1 fd       	sbrc	r28, 1
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <LCD_voidSendData+0xb8>
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	85 e0       	ldi	r24, 0x05	; 5
     6fc:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     700:	04 c0       	rjmp	.+8      	; 0x70a <LCD_voidSendData+0xc0>
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     70a:	c2 fd       	sbrc	r28, 2
     70c:	05 c0       	rjmp	.+10     	; 0x718 <LCD_voidSendData+0xce>
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	86 e0       	ldi	r24, 0x06	; 6
     712:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     716:	04 c0       	rjmp	.+8      	; 0x720 <LCD_voidSendData+0xd6>
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	86 e0       	ldi	r24, 0x06	; 6
     71c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     720:	c3 fd       	sbrc	r28, 3
     722:	05 c0       	rjmp	.+10     	; 0x72e <LCD_voidSendData+0xe4>
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	87 e0       	ldi	r24, 0x07	; 7
     728:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     72c:	04 c0       	rjmp	.+8      	; 0x736 <LCD_voidSendData+0xec>
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	87 e0       	ldi	r24, 0x07	; 7
     732:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     736:	61 e0       	ldi	r22, 0x01	; 1
     738:	8c e0       	ldi	r24, 0x0C	; 12
     73a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     73e:	8f e9       	ldi	r24, 0x9F	; 159
     740:	9f e0       	ldi	r25, 0x0F	; 15
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <LCD_voidSendData+0xf8>
     746:	00 c0       	rjmp	.+0      	; 0x748 <LCD_voidSendData+0xfe>
     748:	00 00       	nop
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	8c e0       	ldi	r24, 0x0C	; 12
     74e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     752:	8f e9       	ldi	r24, 0x9F	; 159
     754:	9f e0       	ldi	r25, 0x0F	; 15
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	f1 f7       	brne	.-4      	; 0x756 <LCD_voidSendData+0x10c>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <LCD_voidSendData+0x112>
     75c:	00 00       	nop
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <LCD_voidSendCommand>:
     762:	cf 93       	push	r28
     764:	c8 2f       	mov	r28, r24
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	8a e0       	ldi	r24, 0x0A	; 10
     76a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	89 e0       	ldi	r24, 0x09	; 9
     772:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     776:	c4 fd       	sbrc	r28, 4
     778:	05 c0       	rjmp	.+10     	; 0x784 <LCD_voidSendCommand+0x22>
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	84 e0       	ldi	r24, 0x04	; 4
     77e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     782:	04 c0       	rjmp	.+8      	; 0x78c <LCD_voidSendCommand+0x2a>
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	84 e0       	ldi	r24, 0x04	; 4
     788:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     78c:	c5 fd       	sbrc	r28, 5
     78e:	05 c0       	rjmp	.+10     	; 0x79a <LCD_voidSendCommand+0x38>
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <LCD_voidSendCommand+0x40>
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	85 e0       	ldi	r24, 0x05	; 5
     79e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     7a2:	c6 fd       	sbrc	r28, 6
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <LCD_voidSendCommand+0x4e>
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	86 e0       	ldi	r24, 0x06	; 6
     7aa:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <LCD_voidSendCommand+0x56>
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	86 e0       	ldi	r24, 0x06	; 6
     7b4:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     7b8:	cc 23       	and	r28, r28
     7ba:	2c f0       	brlt	.+10     	; 0x7c6 <LCD_voidSendCommand+0x64>
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	87 e0       	ldi	r24, 0x07	; 7
     7c0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     7c4:	04 c0       	rjmp	.+8      	; 0x7ce <LCD_voidSendCommand+0x6c>
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	87 e0       	ldi	r24, 0x07	; 7
     7ca:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	8c e0       	ldi	r24, 0x0C	; 12
     7d2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     7d6:	8f e9       	ldi	r24, 0x9F	; 159
     7d8:	9f e0       	ldi	r25, 0x0F	; 15
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <LCD_voidSendCommand+0x78>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <LCD_voidSendCommand+0x7e>
     7e0:	00 00       	nop
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	8c e0       	ldi	r24, 0x0C	; 12
     7e6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     7ea:	8f e9       	ldi	r24, 0x9F	; 159
     7ec:	9f e0       	ldi	r25, 0x0F	; 15
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <LCD_voidSendCommand+0x8c>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <LCD_voidSendCommand+0x92>
     7f4:	00 00       	nop
     7f6:	c0 fd       	sbrc	r28, 0
     7f8:	05 c0       	rjmp	.+10     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	84 e0       	ldi	r24, 0x04	; 4
     7fe:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     802:	04 c0       	rjmp	.+8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     80c:	c1 fd       	sbrc	r28, 1
     80e:	05 c0       	rjmp	.+10     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	85 e0       	ldi	r24, 0x05	; 5
     814:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     818:	04 c0       	rjmp	.+8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	85 e0       	ldi	r24, 0x05	; 5
     81e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     822:	c2 fd       	sbrc	r28, 2
     824:	05 c0       	rjmp	.+10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	86 e0       	ldi	r24, 0x06	; 6
     82a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     82e:	04 c0       	rjmp	.+8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	86 e0       	ldi	r24, 0x06	; 6
     834:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     838:	c3 fd       	sbrc	r28, 3
     83a:	05 c0       	rjmp	.+10     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	87 e0       	ldi	r24, 0x07	; 7
     840:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     844:	04 c0       	rjmp	.+8      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	87 e0       	ldi	r24, 0x07	; 7
     84a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	8c e0       	ldi	r24, 0x0C	; 12
     852:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     856:	8f e9       	ldi	r24, 0x9F	; 159
     858:	9f e0       	ldi	r25, 0x0F	; 15
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	8c e0       	ldi	r24, 0x0C	; 12
     866:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
     86a:	8f e9       	ldi	r24, 0x9F	; 159
     86c:	9f e0       	ldi	r25, 0x0F	; 15
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <__stack+0xf>
     872:	00 c0       	rjmp	.+0      	; 0x874 <__stack+0x15>
     874:	00 00       	nop
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <LCD_voidInit>:
     87a:	2f e7       	ldi	r18, 0x7F	; 127
     87c:	85 eb       	ldi	r24, 0xB5	; 181
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	21 50       	subi	r18, 0x01	; 1
     882:	80 40       	sbci	r24, 0x00	; 0
     884:	90 40       	sbci	r25, 0x00	; 0
     886:	e1 f7       	brne	.-8      	; 0x880 <LCD_voidInit+0x6>
     888:	00 c0       	rjmp	.+0      	; 0x88a <LCD_voidInit+0x10>
     88a:	00 00       	nop
     88c:	83 e3       	ldi	r24, 0x33	; 51
     88e:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_voidSendCommand>
     892:	8f e3       	ldi	r24, 0x3F	; 63
     894:	9f e1       	ldi	r25, 0x1F	; 31
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <LCD_voidInit+0x1c>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <LCD_voidInit+0x22>
     89c:	00 00       	nop
     89e:	82 e3       	ldi	r24, 0x32	; 50
     8a0:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_voidSendCommand>
     8a4:	8f e3       	ldi	r24, 0x3F	; 63
     8a6:	9f e1       	ldi	r25, 0x1F	; 31
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <LCD_voidInit+0x2e>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <LCD_voidInit+0x34>
     8ae:	00 00       	nop
     8b0:	88 e2       	ldi	r24, 0x28	; 40
     8b2:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_voidSendCommand>
     8b6:	8f e3       	ldi	r24, 0x3F	; 63
     8b8:	9f e1       	ldi	r25, 0x1F	; 31
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <LCD_voidInit+0x40>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <LCD_voidInit+0x46>
     8c0:	00 00       	nop
     8c2:	8c e0       	ldi	r24, 0x0C	; 12
     8c4:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_voidSendCommand>
     8c8:	8f e3       	ldi	r24, 0x3F	; 63
     8ca:	9f e1       	ldi	r25, 0x1F	; 31
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <LCD_voidInit+0x52>
     8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <LCD_voidInit+0x58>
     8d2:	00 00       	nop
     8d4:	86 e0       	ldi	r24, 0x06	; 6
     8d6:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_voidSendCommand>
     8da:	8f e3       	ldi	r24, 0x3F	; 63
     8dc:	9f e1       	ldi	r25, 0x1F	; 31
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <LCD_voidInit+0x64>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <LCD_voidInit+0x6a>
     8e4:	00 00       	nop
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_voidSendCommand>
     8ec:	8f e3       	ldi	r24, 0x3F	; 63
     8ee:	9f e1       	ldi	r25, 0x1F	; 31
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <LCD_voidInit+0x76>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <LCD_voidInit+0x7c>
     8f6:	00 00       	nop
     8f8:	08 95       	ret

000008fa <LCD_voidSendString>:
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	8c 01       	movw	r16, r24
     902:	c0 e0       	ldi	r28, 0x00	; 0
     904:	03 c0       	rjmp	.+6      	; 0x90c <LCD_voidSendString+0x12>
     906:	0e 94 25 03 	call	0x64a	; 0x64a <LCD_voidSendData>
     90a:	cf 5f       	subi	r28, 0xFF	; 255
     90c:	f8 01       	movw	r30, r16
     90e:	ec 0f       	add	r30, r28
     910:	f1 1d       	adc	r31, r1
     912:	80 81       	ld	r24, Z
     914:	81 11       	cpse	r24, r1
     916:	f7 cf       	rjmp	.-18     	; 0x906 <LCD_voidSendString+0xc>
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	08 95       	ret

00000920 <LCD_voidSetCursor>:
     920:	86 0f       	add	r24, r22
     922:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_voidSendCommand>
     926:	08 95       	ret

00000928 <LCD_voidSendNumberIII>:
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	00 d0       	rcall	.+0      	; 0x930 <LCD_voidSendNumberIII+0x8>
     930:	00 d0       	rcall	.+0      	; 0x932 <LCD_voidSendNumberIII+0xa>
     932:	00 d0       	rcall	.+0      	; 0x934 <LCD_voidSendNumberIII+0xc>
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	fc 01       	movw	r30, r24
     93a:	9c 01       	movw	r18, r24
     93c:	ad ec       	ldi	r26, 0xCD	; 205
     93e:	bc ec       	ldi	r27, 0xCC	; 204
     940:	0e 94 1e 08 	call	0x103c	; 0x103c <__umulhisi3>
     944:	ac 01       	movw	r20, r24
     946:	56 95       	lsr	r21
     948:	47 95       	ror	r20
     94a:	56 95       	lsr	r21
     94c:	47 95       	ror	r20
     94e:	56 95       	lsr	r21
     950:	47 95       	ror	r20
     952:	ca 01       	movw	r24, r20
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	44 0f       	add	r20, r20
     95a:	55 1f       	adc	r21, r21
     95c:	44 0f       	add	r20, r20
     95e:	55 1f       	adc	r21, r21
     960:	44 0f       	add	r20, r20
     962:	55 1f       	adc	r21, r21
     964:	48 0f       	add	r20, r24
     966:	59 1f       	adc	r21, r25
     968:	cf 01       	movw	r24, r30
     96a:	84 1b       	sub	r24, r20
     96c:	95 0b       	sbc	r25, r21
     96e:	ac 01       	movw	r20, r24
     970:	9e 83       	std	Y+6, r25	; 0x06
     972:	8d 83       	std	Y+5, r24	; 0x05
     974:	36 95       	lsr	r19
     976:	27 95       	ror	r18
     978:	36 95       	lsr	r19
     97a:	27 95       	ror	r18
     97c:	ab e7       	ldi	r26, 0x7B	; 123
     97e:	b4 e1       	ldi	r27, 0x14	; 20
     980:	0e 94 1e 08 	call	0x103c	; 0x103c <__umulhisi3>
     984:	96 95       	lsr	r25
     986:	87 95       	ror	r24
     988:	64 e6       	ldi	r22, 0x64	; 100
     98a:	68 9f       	mul	r22, r24
     98c:	90 01       	movw	r18, r0
     98e:	69 9f       	mul	r22, r25
     990:	30 0d       	add	r19, r0
     992:	11 24       	eor	r1, r1
     994:	cf 01       	movw	r24, r30
     996:	82 1b       	sub	r24, r18
     998:	93 0b       	sbc	r25, r19
     99a:	9c 01       	movw	r18, r24
     99c:	24 1b       	sub	r18, r20
     99e:	35 0b       	sbc	r19, r21
     9a0:	ad ec       	ldi	r26, 0xCD	; 205
     9a2:	bc ec       	ldi	r27, 0xCC	; 204
     9a4:	0e 94 1e 08 	call	0x103c	; 0x103c <__umulhisi3>
     9a8:	ac 01       	movw	r20, r24
     9aa:	56 95       	lsr	r21
     9ac:	47 95       	ror	r20
     9ae:	56 95       	lsr	r21
     9b0:	47 95       	ror	r20
     9b2:	56 95       	lsr	r21
     9b4:	47 95       	ror	r20
     9b6:	5c 83       	std	Y+4, r21	; 0x04
     9b8:	4b 83       	std	Y+3, r20	; 0x03
     9ba:	9f 01       	movw	r18, r30
     9bc:	36 95       	lsr	r19
     9be:	27 95       	ror	r18
     9c0:	36 95       	lsr	r19
     9c2:	27 95       	ror	r18
     9c4:	36 95       	lsr	r19
     9c6:	27 95       	ror	r18
     9c8:	a5 ec       	ldi	r26, 0xC5	; 197
     9ca:	b0 e2       	ldi	r27, 0x20	; 32
     9cc:	0e 94 1e 08 	call	0x103c	; 0x103c <__umulhisi3>
     9d0:	92 95       	swap	r25
     9d2:	82 95       	swap	r24
     9d4:	8f 70       	andi	r24, 0x0F	; 15
     9d6:	89 27       	eor	r24, r25
     9d8:	9f 70       	andi	r25, 0x0F	; 15
     9da:	89 27       	eor	r24, r25
     9dc:	68 ee       	ldi	r22, 0xE8	; 232
     9de:	73 e0       	ldi	r23, 0x03	; 3
     9e0:	86 9f       	mul	r24, r22
     9e2:	90 01       	movw	r18, r0
     9e4:	87 9f       	mul	r24, r23
     9e6:	30 0d       	add	r19, r0
     9e8:	96 9f       	mul	r25, r22
     9ea:	30 0d       	add	r19, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	cf 01       	movw	r24, r30
     9f0:	82 1b       	sub	r24, r18
     9f2:	93 0b       	sbc	r25, r19
     9f4:	84 1b       	sub	r24, r20
     9f6:	95 0b       	sbc	r25, r21
     9f8:	9c 01       	movw	r18, r24
     9fa:	36 95       	lsr	r19
     9fc:	27 95       	ror	r18
     9fe:	36 95       	lsr	r19
     a00:	27 95       	ror	r18
     a02:	ab e7       	ldi	r26, 0x7B	; 123
     a04:	b4 e1       	ldi	r27, 0x14	; 20
     a06:	0e 94 1e 08 	call	0x103c	; 0x103c <__umulhisi3>
     a0a:	96 95       	lsr	r25
     a0c:	87 95       	ror	r24
     a0e:	9a 83       	std	Y+2, r25	; 0x02
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	10 e0       	ldi	r17, 0x00	; 0
     a14:	12 c0       	rjmp	.+36     	; 0xa3a <LCD_voidSendNumberIII+0x112>
     a16:	e1 2f       	mov	r30, r17
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	8c 0f       	add	r24, r28
     a24:	9d 1f       	adc	r25, r29
     a26:	e8 0f       	add	r30, r24
     a28:	f9 1f       	adc	r31, r25
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	c0 96       	adiw	r24, 0x30	; 48
     a30:	91 83       	std	Z+1, r25	; 0x01
     a32:	80 83       	st	Z, r24
     a34:	0e 94 25 03 	call	0x64a	; 0x64a <LCD_voidSendData>
     a38:	1f 5f       	subi	r17, 0xFF	; 255
     a3a:	13 30       	cpi	r17, 0x03	; 3
     a3c:	60 f3       	brcs	.-40     	; 0xa16 <LCD_voidSendNumberIII+0xee>
     a3e:	26 96       	adiw	r28, 0x06	; 6
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	08 95       	ret

00000a52 <LCD_voidClear>:

void LCD_voidClear(void)
{
     a52:	cf 93       	push	r28
		for(u8 t =0  ; t<16 ; t++)
     a54:	c0 e0       	ldi	r28, 0x00	; 0
     a56:	08 c0       	rjmp	.+16     	; 0xa68 <LCD_voidClear+0x16>
		{
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
     a58:	6c 2f       	mov	r22, r28
     a5a:	80 e8       	ldi	r24, 0x80	; 128
     a5c:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidSetCursor>
			LCD_voidSendData(32);
     a60:	80 e2       	ldi	r24, 0x20	; 32
     a62:	0e 94 25 03 	call	0x64a	; 0x64a <LCD_voidSendData>
	}
}

void LCD_voidClear(void)
{
		for(u8 t =0  ; t<16 ; t++)
     a66:	cf 5f       	subi	r28, 0xFF	; 255
     a68:	c0 31       	cpi	r28, 0x10	; 16
     a6a:	b0 f3       	brcs	.-20     	; 0xa58 <LCD_voidClear+0x6>
     a6c:	c0 e0       	ldi	r28, 0x00	; 0
     a6e:	08 c0       	rjmp	.+16     	; 0xa80 <LCD_voidClear+0x2e>
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
			LCD_voidSendData(32);
		}
		for(u8 t =0  ; t<16 ; t++)
		{
			LCD_voidSetCursor(LCD_U8_LINE2 ,t);
     a70:	6c 2f       	mov	r22, r28
     a72:	80 ec       	ldi	r24, 0xC0	; 192
     a74:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidSetCursor>
			LCD_voidSendData(32);
     a78:	80 e2       	ldi	r24, 0x20	; 32
     a7a:	0e 94 25 03 	call	0x64a	; 0x64a <LCD_voidSendData>
		for(u8 t =0  ; t<16 ; t++)
		{
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
			LCD_voidSendData(32);
		}
		for(u8 t =0  ; t<16 ; t++)
     a7e:	cf 5f       	subi	r28, 0xFF	; 255
     a80:	c0 31       	cpi	r28, 0x10	; 16
     a82:	b0 f3       	brcs	.-20     	; 0xa70 <LCD_voidClear+0x1e>
			LCD_voidSetCursor(LCD_U8_LINE2 ,t);
			LCD_voidSendData(32);
		}
	
	
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <__vector_1>:
#include "GIE_int.h"

u8 LOCK =0 ;

ISR(INT0_vect)
{
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	0f 92       	push	r0
     a90:	11 24       	eor	r1, r1
     a92:	2f 93       	push	r18
     a94:	3f 93       	push	r19
     a96:	4f 93       	push	r20
     a98:	5f 93       	push	r21
     a9a:	6f 93       	push	r22
     a9c:	7f 93       	push	r23
     a9e:	8f 93       	push	r24
     aa0:	9f 93       	push	r25
     aa2:	af 93       	push	r26
     aa4:	bf 93       	push	r27
     aa6:	ef 93       	push	r30
     aa8:	ff 93       	push	r31
	if ( LOCK==0 )
     aaa:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <LOCK>
     aae:	81 11       	cpse	r24, r1
     ab0:	04 c0       	rjmp	.+8      	; 0xaba <__vector_1+0x32>
	{
		LOCK=1;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <LOCK>
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__vector_1+0x3a>
	} 
	else
	{
		LOCK=0;
     aba:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <LOCK>
		STOP();
     abe:	0e 94 4a 01 	call	0x294	; 0x294 <STOP>
	}
}
     ac2:	ff 91       	pop	r31
     ac4:	ef 91       	pop	r30
     ac6:	bf 91       	pop	r27
     ac8:	af 91       	pop	r26
     aca:	9f 91       	pop	r25
     acc:	8f 91       	pop	r24
     ace:	7f 91       	pop	r23
     ad0:	6f 91       	pop	r22
     ad2:	5f 91       	pop	r21
     ad4:	4f 91       	pop	r20
     ad6:	3f 91       	pop	r19
     ad8:	2f 91       	pop	r18
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <__vector_2>:

ISR(INT1_vect)
{
     ae4:	1f 92       	push	r1
     ae6:	0f 92       	push	r0
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	0f 92       	push	r0
     aec:	11 24       	eor	r1, r1
     aee:	2f 93       	push	r18
     af0:	3f 93       	push	r19
     af2:	4f 93       	push	r20
     af4:	5f 93       	push	r21
     af6:	6f 93       	push	r22
     af8:	7f 93       	push	r23
     afa:	8f 93       	push	r24
     afc:	9f 93       	push	r25
     afe:	af 93       	push	r26
     b00:	bf 93       	push	r27
     b02:	ef 93       	push	r30
     b04:	ff 93       	push	r31
	STOP();
     b06:	0e 94 4a 01 	call	0x294	; 0x294 <STOP>
	CHECK();
     b0a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <CHECK>
	DIO_voidSetPinValue(INT1_PIN,HIGH);
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	87 e1       	ldi	r24, 0x17	; 23
     b12:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
}
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	bf 91       	pop	r27
     b1c:	af 91       	pop	r26
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	7f 91       	pop	r23
     b24:	6f 91       	pop	r22
     b26:	5f 91       	pop	r21
     b28:	4f 91       	pop	r20
     b2a:	3f 91       	pop	r19
     b2c:	2f 91       	pop	r18
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <main>:

f64 Obstacle_Dis ;

int main(void)
{
	DIO_voidInit();
     b38:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInit>
	LCD_voidInit();
     b3c:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_voidInit>
	TIMER0_void_Init();
     b40:	0e 94 04 06 	call	0xc08	; 0xc08 <TIMER0_void_Init>
	TIMER1_voidOvInt();  // Enable Timer1 overflow interrupts
     b44:	0e 94 fe 05 	call	0xbfc	; 0xbfc <TIMER1_voidOvInt>
	DIO_voidSetPinValue(INT1_PIN,HIGH);  //PULLUP RESISTOR TO INT1
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	87 e1       	ldi	r24, 0x17	; 23
     b4c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	EXTI_voidInitINT0();
     b50:	0e 94 e6 00 	call	0x1cc	; 0x1cc <EXTI_voidInitINT0>
	EXTI_voidEnableINT0();
     b54:	0e 94 da 00 	call	0x1b4	; 0x1b4 <EXTI_voidEnableINT0>
	EXTI_voidInitINT1();
     b58:	0e 94 ff 00 	call	0x1fe	; 0x1fe <EXTI_voidInitINT1>
	EXTI_voidEnableINT1();
     b5c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <EXTI_voidEnableINT1>
	GIE_voidEnable();   // Enable global interrupt
     b60:	0e 94 21 03 	call	0x642	; 0x642 <GIE_voidEnable>
	
	TIMER0_void_SetCompareVal(24);  //SET THE SERVO ON 90 DEGREE
     b64:	88 e1       	ldi	r24, 0x18	; 24
     b66:	0e 94 28 06 	call	0xc50	; 0xc50 <TIMER0_void_SetCompareVal>
	
	LCD_voidClear();
     b6a:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_voidClear>
	LCD_voidSetCursor( LCD_U8_LINE1 , 1 );
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	80 e8       	ldi	r24, 0x80	; 128
     b72:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidSetCursor>
	LCD_voidSendString("OBSTACLE AFTER");
     b76:	8d e8       	ldi	r24, 0x8D	; 141
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_voidSendString>
	LCD_voidSetCursor( LCD_U8_LINE2 , 9 );
     b7e:	69 e0       	ldi	r22, 0x09	; 9
     b80:	80 ec       	ldi	r24, 0xC0	; 192
     b82:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidSetCursor>
	LCD_voidSendString("cm");
     b86:	8c e9       	ldi	r24, 0x9C	; 156
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_voidSendString>
     b8e:	31 c0       	rjmp	.+98     	; 0xbf2 <main+0xba>
	
	while(1)
	{	
		while ( LOCK == 1 )
		{
			GO_FORWARD();
     b90:	0e 94 31 01 	call	0x262	; 0x262 <GO_FORWARD>
			
			Obstacle_Dis = ULTRASONIC_f64Distance();
     b94:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <ULTRASONIC_f64Distance>
     b98:	60 93 b5 00 	sts	0x00B5, r22	; 0x8000b5 <Obstacle_Dis>
     b9c:	70 93 b6 00 	sts	0x00B6, r23	; 0x8000b6 <Obstacle_Dis+0x1>
     ba0:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <Obstacle_Dis+0x2>
     ba4:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <Obstacle_Dis+0x3>
			LCD_voidSetCursor( LCD_U8_LINE2 , 5 );
     ba8:	65 e0       	ldi	r22, 0x05	; 5
     baa:	80 ec       	ldi	r24, 0xC0	; 192
     bac:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidSetCursor>
			LCD_voidSendNumberIII ((u16)Obstacle_Dis);
     bb0:	60 91 b5 00 	lds	r22, 0x00B5	; 0x8000b5 <Obstacle_Dis>
     bb4:	70 91 b6 00 	lds	r23, 0x00B6	; 0x8000b6 <Obstacle_Dis+0x1>
     bb8:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <Obstacle_Dis+0x2>
     bbc:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <Obstacle_Dis+0x3>
     bc0:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fixunssfsi>
     bc4:	cb 01       	movw	r24, r22
     bc6:	0e 94 94 04 	call	0x928	; 0x928 <LCD_voidSendNumberIII>
			
			if( Obstacle_Dis < 45.0000 )
     bca:	60 91 b5 00 	lds	r22, 0x00B5	; 0x8000b5 <Obstacle_Dis>
     bce:	70 91 b6 00 	lds	r23, 0x00B6	; 0x8000b6 <Obstacle_Dis+0x1>
     bd2:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <Obstacle_Dis+0x2>
     bd6:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <Obstacle_Dis+0x3>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	44 e3       	ldi	r20, 0x34	; 52
     be0:	52 e4       	ldi	r21, 0x42	; 66
     be2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__cmpsf2>
     be6:	88 23       	and	r24, r24
     be8:	24 f4       	brge	.+8      	; 0xbf2 <main+0xba>
			{
				DIO_voidSetPinValue(INT1_PIN,LOW);
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	87 e1       	ldi	r24, 0x17	; 23
     bee:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	LCD_voidSetCursor( LCD_U8_LINE2 , 9 );
	LCD_voidSendString("cm");
	
	while(1)
	{	
		while ( LOCK == 1 )
     bf2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <LOCK>
     bf6:	81 30       	cpi	r24, 0x01	; 1
     bf8:	59 f2       	breq	.-106    	; 0xb90 <main+0x58>
     bfa:	fb cf       	rjmp	.-10     	; 0xbf2 <main+0xba>

00000bfc <TIMER1_voidOvInt>:
}


void TIMER1_voidOvInt(void)
{
	SET_BIT(TIMSK,TIMSK_TOIE1);
     bfc:	89 b3       	in	r24, 0x19	; 25
     bfe:	9a b3       	in	r25, 0x1a	; 26
     c00:	84 60       	ori	r24, 0x04	; 4
     c02:	9a bb       	out	0x1a, r25	; 26
     c04:	89 bb       	out	0x19, r24	; 25
     c06:	08 95       	ret

00000c08 <TIMER0_void_Init>:
	TIMER0_OV_CallBack = Copy_ptr ;
}

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_CTC_CallBack = Copy_ptr ;
     c08:	83 b7       	in	r24, 0x33	; 51
     c0a:	80 64       	ori	r24, 0x40	; 64
     c0c:	83 bf       	out	0x33, r24	; 51
     c0e:	83 b7       	in	r24, 0x33	; 51
     c10:	88 60       	ori	r24, 0x08	; 8
     c12:	83 bf       	out	0x33, r24	; 51
     c14:	83 b7       	in	r24, 0x33	; 51
     c16:	81 60       	ori	r24, 0x01	; 1
     c18:	83 bf       	out	0x33, r24	; 51
     c1a:	83 b7       	in	r24, 0x33	; 51
     c1c:	8d 7f       	andi	r24, 0xFD	; 253
     c1e:	83 bf       	out	0x33, r24	; 51
     c20:	83 b7       	in	r24, 0x33	; 51
     c22:	84 60       	ori	r24, 0x04	; 4
     c24:	83 bf       	out	0x33, r24	; 51
     c26:	83 b7       	in	r24, 0x33	; 51
     c28:	8f 7e       	andi	r24, 0xEF	; 239
     c2a:	83 bf       	out	0x33, r24	; 51
     c2c:	83 b7       	in	r24, 0x33	; 51
     c2e:	80 62       	ori	r24, 0x20	; 32
     c30:	83 bf       	out	0x33, r24	; 51
     c32:	89 b7       	in	r24, 0x39	; 57
     c34:	8e 7f       	andi	r24, 0xFE	; 254
     c36:	89 bf       	out	0x39, r24	; 57
     c38:	89 b7       	in	r24, 0x39	; 57
     c3a:	8d 7f       	andi	r24, 0xFD	; 253
     c3c:	89 bf       	out	0x39, r24	; 57
     c3e:	88 b7       	in	r24, 0x38	; 56
     c40:	81 60       	ori	r24, 0x01	; 1
     c42:	88 bf       	out	0x38, r24	; 56
     c44:	88 b7       	in	r24, 0x38	; 56
     c46:	82 60       	ori	r24, 0x02	; 2
     c48:	88 bf       	out	0x38, r24	; 56
     c4a:	12 be       	out	0x32, r1	; 50
     c4c:	1c be       	out	0x3c, r1	; 60
     c4e:	08 95       	ret

00000c50 <TIMER0_void_SetCompareVal>:
     c50:	8c bf       	out	0x3c, r24	; 60
     c52:	08 95       	ret

00000c54 <__vector_11>:
	
}

void __vector_11(void) __attribute__((signal , used)); // for avr gcc
void __vector_11(void)
{
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	5f 93       	push	r21
     c66:	6f 93       	push	r22
     c68:	7f 93       	push	r23
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
     c76:	e0 91 bb 00 	lds	r30, 0x00BB	; 0x8000bb <TIMER0_OV_CallBack>
     c7a:	f0 91 bc 00 	lds	r31, 0x00BC	; 0x8000bc <TIMER0_OV_CallBack+0x1>
     c7e:	09 95       	icall
}
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	2f 93       	push	r18
     cae:	3f 93       	push	r19
     cb0:	4f 93       	push	r20
     cb2:	5f 93       	push	r21
     cb4:	6f 93       	push	r22
     cb6:	7f 93       	push	r23
     cb8:	8f 93       	push	r24
     cba:	9f 93       	push	r25
     cbc:	af 93       	push	r26
     cbe:	bf 93       	push	r27
     cc0:	ef 93       	push	r30
     cc2:	ff 93       	push	r31
	TIMER0_CTC_CallBack();
     cc4:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <TIMER0_CTC_CallBack>
     cc8:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <TIMER0_CTC_CallBack+0x1>
     ccc:	09 95       	icall
}
     cce:	ff 91       	pop	r31
     cd0:	ef 91       	pop	r30
     cd2:	bf 91       	pop	r27
     cd4:	af 91       	pop	r26
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	7f 91       	pop	r23
     cdc:	6f 91       	pop	r22
     cde:	5f 91       	pop	r21
     ce0:	4f 91       	pop	r20
     ce2:	3f 91       	pop	r19
     ce4:	2f 91       	pop	r18
     ce6:	0f 90       	pop	r0
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	0f 90       	pop	r0
     cec:	1f 90       	pop	r1
     cee:	18 95       	reti

00000cf0 <__vector_13>:
}


void __vector_13(void) __attribute__((signal , used));
void __vector_13(void)
{
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2f 93       	push	r18
     cfc:	3f 93       	push	r19
     cfe:	4f 93       	push	r20
     d00:	5f 93       	push	r21
     d02:	6f 93       	push	r22
     d04:	7f 93       	push	r23
     d06:	8f 93       	push	r24
     d08:	9f 93       	push	r25
     d0a:	af 93       	push	r26
     d0c:	bf 93       	push	r27
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
	CallBackReceive();
     d12:	e0 91 bd 00 	lds	r30, 0x00BD	; 0x8000bd <CallBackReceive>
     d16:	f0 91 be 00 	lds	r31, 0x00BE	; 0x8000be <CallBackReceive+0x1>
     d1a:	09 95       	icall
}
     d1c:	ff 91       	pop	r31
     d1e:	ef 91       	pop	r30
     d20:	bf 91       	pop	r27
     d22:	af 91       	pop	r26
     d24:	9f 91       	pop	r25
     d26:	8f 91       	pop	r24
     d28:	7f 91       	pop	r23
     d2a:	6f 91       	pop	r22
     d2c:	5f 91       	pop	r21
     d2e:	4f 91       	pop	r20
     d30:	3f 91       	pop	r19
     d32:	2f 91       	pop	r18
     d34:	0f 90       	pop	r0
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	0f 90       	pop	r0
     d3a:	1f 90       	pop	r1
     d3c:	18 95       	reti

00000d3e <__vector_14>:

void __vector_14(void) __attribute__((signal , used));
void __vector_14(void)
{
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
     d5a:	bf 93       	push	r27
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
	CallBackSend();
     d60:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <CallBackSend>
     d64:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <CallBackSend+0x1>
     d68:	09 95       	icall
}
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__cmpsf2>:
     d8c:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_cmp>
     d90:	08 f4       	brcc	.+2      	; 0xd94 <__cmpsf2+0x8>
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	08 95       	ret

00000d96 <__fixunssfsi>:
     d96:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_splitA>
     d9a:	88 f0       	brcs	.+34     	; 0xdbe <__fixunssfsi+0x28>
     d9c:	9f 57       	subi	r25, 0x7F	; 127
     d9e:	98 f0       	brcs	.+38     	; 0xdc6 <__fixunssfsi+0x30>
     da0:	b9 2f       	mov	r27, r25
     da2:	99 27       	eor	r25, r25
     da4:	b7 51       	subi	r27, 0x17	; 23
     da6:	b0 f0       	brcs	.+44     	; 0xdd4 <__fixunssfsi+0x3e>
     da8:	e1 f0       	breq	.+56     	; 0xde2 <__fixunssfsi+0x4c>
     daa:	66 0f       	add	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	88 1f       	adc	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	1a f0       	brmi	.+6      	; 0xdba <__fixunssfsi+0x24>
     db4:	ba 95       	dec	r27
     db6:	c9 f7       	brne	.-14     	; 0xdaa <__fixunssfsi+0x14>
     db8:	14 c0       	rjmp	.+40     	; 0xde2 <__fixunssfsi+0x4c>
     dba:	b1 30       	cpi	r27, 0x01	; 1
     dbc:	91 f0       	breq	.+36     	; 0xde2 <__fixunssfsi+0x4c>
     dbe:	0e 94 7d 07 	call	0xefa	; 0xefa <__fp_zero>
     dc2:	b1 e0       	ldi	r27, 0x01	; 1
     dc4:	08 95       	ret
     dc6:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__fp_zero>
     dca:	67 2f       	mov	r22, r23
     dcc:	78 2f       	mov	r23, r24
     dce:	88 27       	eor	r24, r24
     dd0:	b8 5f       	subi	r27, 0xF8	; 248
     dd2:	39 f0       	breq	.+14     	; 0xde2 <__fixunssfsi+0x4c>
     dd4:	b9 3f       	cpi	r27, 0xF9	; 249
     dd6:	cc f3       	brlt	.-14     	; 0xdca <__fixunssfsi+0x34>
     dd8:	86 95       	lsr	r24
     dda:	77 95       	ror	r23
     ddc:	67 95       	ror	r22
     dde:	b3 95       	inc	r27
     de0:	d9 f7       	brne	.-10     	; 0xdd8 <__fixunssfsi+0x42>
     de2:	3e f4       	brtc	.+14     	; 0xdf2 <__fixunssfsi+0x5c>
     de4:	90 95       	com	r25
     de6:	80 95       	com	r24
     de8:	70 95       	com	r23
     dea:	61 95       	neg	r22
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	8f 4f       	sbci	r24, 0xFF	; 255
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	08 95       	ret

00000df4 <__floatunsisf>:
     df4:	e8 94       	clt
     df6:	09 c0       	rjmp	.+18     	; 0xe0a <__floatsisf+0x12>

00000df8 <__floatsisf>:
     df8:	97 fb       	bst	r25, 7
     dfa:	3e f4       	brtc	.+14     	; 0xe0a <__floatsisf+0x12>
     dfc:	90 95       	com	r25
     dfe:	80 95       	com	r24
     e00:	70 95       	com	r23
     e02:	61 95       	neg	r22
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
     e06:	8f 4f       	sbci	r24, 0xFF	; 255
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	99 23       	and	r25, r25
     e0c:	a9 f0       	breq	.+42     	; 0xe38 <__floatsisf+0x40>
     e0e:	f9 2f       	mov	r31, r25
     e10:	96 e9       	ldi	r25, 0x96	; 150
     e12:	bb 27       	eor	r27, r27
     e14:	93 95       	inc	r25
     e16:	f6 95       	lsr	r31
     e18:	87 95       	ror	r24
     e1a:	77 95       	ror	r23
     e1c:	67 95       	ror	r22
     e1e:	b7 95       	ror	r27
     e20:	f1 11       	cpse	r31, r1
     e22:	f8 cf       	rjmp	.-16     	; 0xe14 <__floatsisf+0x1c>
     e24:	fa f4       	brpl	.+62     	; 0xe64 <__floatsisf+0x6c>
     e26:	bb 0f       	add	r27, r27
     e28:	11 f4       	brne	.+4      	; 0xe2e <__floatsisf+0x36>
     e2a:	60 ff       	sbrs	r22, 0
     e2c:	1b c0       	rjmp	.+54     	; 0xe64 <__floatsisf+0x6c>
     e2e:	6f 5f       	subi	r22, 0xFF	; 255
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	8f 4f       	sbci	r24, 0xFF	; 255
     e34:	9f 4f       	sbci	r25, 0xFF	; 255
     e36:	16 c0       	rjmp	.+44     	; 0xe64 <__floatsisf+0x6c>
     e38:	88 23       	and	r24, r24
     e3a:	11 f0       	breq	.+4      	; 0xe40 <__floatsisf+0x48>
     e3c:	96 e9       	ldi	r25, 0x96	; 150
     e3e:	11 c0       	rjmp	.+34     	; 0xe62 <__floatsisf+0x6a>
     e40:	77 23       	and	r23, r23
     e42:	21 f0       	breq	.+8      	; 0xe4c <__floatsisf+0x54>
     e44:	9e e8       	ldi	r25, 0x8E	; 142
     e46:	87 2f       	mov	r24, r23
     e48:	76 2f       	mov	r23, r22
     e4a:	05 c0       	rjmp	.+10     	; 0xe56 <__floatsisf+0x5e>
     e4c:	66 23       	and	r22, r22
     e4e:	71 f0       	breq	.+28     	; 0xe6c <__floatsisf+0x74>
     e50:	96 e8       	ldi	r25, 0x86	; 134
     e52:	86 2f       	mov	r24, r22
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	2a f0       	brmi	.+10     	; 0xe64 <__floatsisf+0x6c>
     e5a:	9a 95       	dec	r25
     e5c:	66 0f       	add	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	88 1f       	adc	r24, r24
     e62:	da f7       	brpl	.-10     	; 0xe5a <__floatsisf+0x62>
     e64:	88 0f       	add	r24, r24
     e66:	96 95       	lsr	r25
     e68:	87 95       	ror	r24
     e6a:	97 f9       	bld	r25, 7
     e6c:	08 95       	ret

00000e6e <__fp_cmp>:
     e6e:	99 0f       	add	r25, r25
     e70:	00 08       	sbc	r0, r0
     e72:	55 0f       	add	r21, r21
     e74:	aa 0b       	sbc	r26, r26
     e76:	e0 e8       	ldi	r30, 0x80	; 128
     e78:	fe ef       	ldi	r31, 0xFE	; 254
     e7a:	16 16       	cp	r1, r22
     e7c:	17 06       	cpc	r1, r23
     e7e:	e8 07       	cpc	r30, r24
     e80:	f9 07       	cpc	r31, r25
     e82:	c0 f0       	brcs	.+48     	; 0xeb4 <__fp_cmp+0x46>
     e84:	12 16       	cp	r1, r18
     e86:	13 06       	cpc	r1, r19
     e88:	e4 07       	cpc	r30, r20
     e8a:	f5 07       	cpc	r31, r21
     e8c:	98 f0       	brcs	.+38     	; 0xeb4 <__fp_cmp+0x46>
     e8e:	62 1b       	sub	r22, r18
     e90:	73 0b       	sbc	r23, r19
     e92:	84 0b       	sbc	r24, r20
     e94:	95 0b       	sbc	r25, r21
     e96:	39 f4       	brne	.+14     	; 0xea6 <__fp_cmp+0x38>
     e98:	0a 26       	eor	r0, r26
     e9a:	61 f0       	breq	.+24     	; 0xeb4 <__fp_cmp+0x46>
     e9c:	23 2b       	or	r18, r19
     e9e:	24 2b       	or	r18, r20
     ea0:	25 2b       	or	r18, r21
     ea2:	21 f4       	brne	.+8      	; 0xeac <__fp_cmp+0x3e>
     ea4:	08 95       	ret
     ea6:	0a 26       	eor	r0, r26
     ea8:	09 f4       	brne	.+2      	; 0xeac <__fp_cmp+0x3e>
     eaa:	a1 40       	sbci	r26, 0x01	; 1
     eac:	a6 95       	lsr	r26
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	81 1d       	adc	r24, r1
     eb2:	81 1d       	adc	r24, r1
     eb4:	08 95       	ret

00000eb6 <__fp_split3>:
     eb6:	57 fd       	sbrc	r21, 7
     eb8:	90 58       	subi	r25, 0x80	; 128
     eba:	44 0f       	add	r20, r20
     ebc:	55 1f       	adc	r21, r21
     ebe:	59 f0       	breq	.+22     	; 0xed6 <__fp_splitA+0x10>
     ec0:	5f 3f       	cpi	r21, 0xFF	; 255
     ec2:	71 f0       	breq	.+28     	; 0xee0 <__fp_splitA+0x1a>
     ec4:	47 95       	ror	r20

00000ec6 <__fp_splitA>:
     ec6:	88 0f       	add	r24, r24
     ec8:	97 fb       	bst	r25, 7
     eca:	99 1f       	adc	r25, r25
     ecc:	61 f0       	breq	.+24     	; 0xee6 <__fp_splitA+0x20>
     ece:	9f 3f       	cpi	r25, 0xFF	; 255
     ed0:	79 f0       	breq	.+30     	; 0xef0 <__fp_splitA+0x2a>
     ed2:	87 95       	ror	r24
     ed4:	08 95       	ret
     ed6:	12 16       	cp	r1, r18
     ed8:	13 06       	cpc	r1, r19
     eda:	14 06       	cpc	r1, r20
     edc:	55 1f       	adc	r21, r21
     ede:	f2 cf       	rjmp	.-28     	; 0xec4 <__fp_split3+0xe>
     ee0:	46 95       	lsr	r20
     ee2:	f1 df       	rcall	.-30     	; 0xec6 <__fp_splitA>
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <__fp_splitA+0x30>
     ee6:	16 16       	cp	r1, r22
     ee8:	17 06       	cpc	r1, r23
     eea:	18 06       	cpc	r1, r24
     eec:	99 1f       	adc	r25, r25
     eee:	f1 cf       	rjmp	.-30     	; 0xed2 <__fp_splitA+0xc>
     ef0:	86 95       	lsr	r24
     ef2:	71 05       	cpc	r23, r1
     ef4:	61 05       	cpc	r22, r1
     ef6:	08 94       	sec
     ef8:	08 95       	ret

00000efa <__fp_zero>:
     efa:	e8 94       	clt

00000efc <__fp_szero>:
     efc:	bb 27       	eor	r27, r27
     efe:	66 27       	eor	r22, r22
     f00:	77 27       	eor	r23, r23
     f02:	cb 01       	movw	r24, r22
     f04:	97 f9       	bld	r25, 7
     f06:	08 95       	ret

00000f08 <__gesf2>:
     f08:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_cmp>
     f0c:	08 f4       	brcc	.+2      	; 0xf10 <__gesf2+0x8>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	08 95       	ret

00000f12 <__mulsf3>:
     f12:	0e 94 9c 07 	call	0xf38	; 0xf38 <__mulsf3x>
     f16:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__fp_round>
     f1a:	0e 94 ff 07 	call	0xffe	; 0xffe <__fp_pscA>
     f1e:	38 f0       	brcs	.+14     	; 0xf2e <__mulsf3+0x1c>
     f20:	0e 94 06 08 	call	0x100c	; 0x100c <__fp_pscB>
     f24:	20 f0       	brcs	.+8      	; 0xf2e <__mulsf3+0x1c>
     f26:	95 23       	and	r25, r21
     f28:	11 f0       	breq	.+4      	; 0xf2e <__mulsf3+0x1c>
     f2a:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_inf>
     f2e:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__fp_nan>
     f32:	11 24       	eor	r1, r1
     f34:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__fp_szero>

00000f38 <__mulsf3x>:
     f38:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_split3>
     f3c:	70 f3       	brcs	.-36     	; 0xf1a <__mulsf3+0x8>

00000f3e <__mulsf3_pse>:
     f3e:	95 9f       	mul	r25, r21
     f40:	c1 f3       	breq	.-16     	; 0xf32 <__mulsf3+0x20>
     f42:	95 0f       	add	r25, r21
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	55 1f       	adc	r21, r21
     f48:	62 9f       	mul	r22, r18
     f4a:	f0 01       	movw	r30, r0
     f4c:	72 9f       	mul	r23, r18
     f4e:	bb 27       	eor	r27, r27
     f50:	f0 0d       	add	r31, r0
     f52:	b1 1d       	adc	r27, r1
     f54:	63 9f       	mul	r22, r19
     f56:	aa 27       	eor	r26, r26
     f58:	f0 0d       	add	r31, r0
     f5a:	b1 1d       	adc	r27, r1
     f5c:	aa 1f       	adc	r26, r26
     f5e:	64 9f       	mul	r22, r20
     f60:	66 27       	eor	r22, r22
     f62:	b0 0d       	add	r27, r0
     f64:	a1 1d       	adc	r26, r1
     f66:	66 1f       	adc	r22, r22
     f68:	82 9f       	mul	r24, r18
     f6a:	22 27       	eor	r18, r18
     f6c:	b0 0d       	add	r27, r0
     f6e:	a1 1d       	adc	r26, r1
     f70:	62 1f       	adc	r22, r18
     f72:	73 9f       	mul	r23, r19
     f74:	b0 0d       	add	r27, r0
     f76:	a1 1d       	adc	r26, r1
     f78:	62 1f       	adc	r22, r18
     f7a:	83 9f       	mul	r24, r19
     f7c:	a0 0d       	add	r26, r0
     f7e:	61 1d       	adc	r22, r1
     f80:	22 1f       	adc	r18, r18
     f82:	74 9f       	mul	r23, r20
     f84:	33 27       	eor	r19, r19
     f86:	a0 0d       	add	r26, r0
     f88:	61 1d       	adc	r22, r1
     f8a:	23 1f       	adc	r18, r19
     f8c:	84 9f       	mul	r24, r20
     f8e:	60 0d       	add	r22, r0
     f90:	21 1d       	adc	r18, r1
     f92:	82 2f       	mov	r24, r18
     f94:	76 2f       	mov	r23, r22
     f96:	6a 2f       	mov	r22, r26
     f98:	11 24       	eor	r1, r1
     f9a:	9f 57       	subi	r25, 0x7F	; 127
     f9c:	50 40       	sbci	r21, 0x00	; 0
     f9e:	9a f0       	brmi	.+38     	; 0xfc6 <__mulsf3_pse+0x88>
     fa0:	f1 f0       	breq	.+60     	; 0xfde <__mulsf3_pse+0xa0>
     fa2:	88 23       	and	r24, r24
     fa4:	4a f0       	brmi	.+18     	; 0xfb8 <__mulsf3_pse+0x7a>
     fa6:	ee 0f       	add	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	bb 1f       	adc	r27, r27
     fac:	66 1f       	adc	r22, r22
     fae:	77 1f       	adc	r23, r23
     fb0:	88 1f       	adc	r24, r24
     fb2:	91 50       	subi	r25, 0x01	; 1
     fb4:	50 40       	sbci	r21, 0x00	; 0
     fb6:	a9 f7       	brne	.-22     	; 0xfa2 <__mulsf3_pse+0x64>
     fb8:	9e 3f       	cpi	r25, 0xFE	; 254
     fba:	51 05       	cpc	r21, r1
     fbc:	80 f0       	brcs	.+32     	; 0xfde <__mulsf3_pse+0xa0>
     fbe:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_inf>
     fc2:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__fp_szero>
     fc6:	5f 3f       	cpi	r21, 0xFF	; 255
     fc8:	e4 f3       	brlt	.-8      	; 0xfc2 <__mulsf3_pse+0x84>
     fca:	98 3e       	cpi	r25, 0xE8	; 232
     fcc:	d4 f3       	brlt	.-12     	; 0xfc2 <__mulsf3_pse+0x84>
     fce:	86 95       	lsr	r24
     fd0:	77 95       	ror	r23
     fd2:	67 95       	ror	r22
     fd4:	b7 95       	ror	r27
     fd6:	f7 95       	ror	r31
     fd8:	e7 95       	ror	r30
     fda:	9f 5f       	subi	r25, 0xFF	; 255
     fdc:	c1 f7       	brne	.-16     	; 0xfce <__mulsf3_pse+0x90>
     fde:	fe 2b       	or	r31, r30
     fe0:	88 0f       	add	r24, r24
     fe2:	91 1d       	adc	r25, r1
     fe4:	96 95       	lsr	r25
     fe6:	87 95       	ror	r24
     fe8:	97 f9       	bld	r25, 7
     fea:	08 95       	ret

00000fec <__fp_inf>:
     fec:	97 f9       	bld	r25, 7
     fee:	9f 67       	ori	r25, 0x7F	; 127
     ff0:	80 e8       	ldi	r24, 0x80	; 128
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	08 95       	ret

00000ff8 <__fp_nan>:
     ff8:	9f ef       	ldi	r25, 0xFF	; 255
     ffa:	80 ec       	ldi	r24, 0xC0	; 192
     ffc:	08 95       	ret

00000ffe <__fp_pscA>:
     ffe:	00 24       	eor	r0, r0
    1000:	0a 94       	dec	r0
    1002:	16 16       	cp	r1, r22
    1004:	17 06       	cpc	r1, r23
    1006:	18 06       	cpc	r1, r24
    1008:	09 06       	cpc	r0, r25
    100a:	08 95       	ret

0000100c <__fp_pscB>:
    100c:	00 24       	eor	r0, r0
    100e:	0a 94       	dec	r0
    1010:	12 16       	cp	r1, r18
    1012:	13 06       	cpc	r1, r19
    1014:	14 06       	cpc	r1, r20
    1016:	05 06       	cpc	r0, r21
    1018:	08 95       	ret

0000101a <__fp_round>:
    101a:	09 2e       	mov	r0, r25
    101c:	03 94       	inc	r0
    101e:	00 0c       	add	r0, r0
    1020:	11 f4       	brne	.+4      	; 0x1026 <__fp_round+0xc>
    1022:	88 23       	and	r24, r24
    1024:	52 f0       	brmi	.+20     	; 0x103a <__fp_round+0x20>
    1026:	bb 0f       	add	r27, r27
    1028:	40 f4       	brcc	.+16     	; 0x103a <__fp_round+0x20>
    102a:	bf 2b       	or	r27, r31
    102c:	11 f4       	brne	.+4      	; 0x1032 <__fp_round+0x18>
    102e:	60 ff       	sbrs	r22, 0
    1030:	04 c0       	rjmp	.+8      	; 0x103a <__fp_round+0x20>
    1032:	6f 5f       	subi	r22, 0xFF	; 255
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	8f 4f       	sbci	r24, 0xFF	; 255
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	08 95       	ret

0000103c <__umulhisi3>:
    103c:	a2 9f       	mul	r26, r18
    103e:	b0 01       	movw	r22, r0
    1040:	b3 9f       	mul	r27, r19
    1042:	c0 01       	movw	r24, r0
    1044:	a3 9f       	mul	r26, r19
    1046:	70 0d       	add	r23, r0
    1048:	81 1d       	adc	r24, r1
    104a:	11 24       	eor	r1, r1
    104c:	91 1d       	adc	r25, r1
    104e:	b2 9f       	mul	r27, r18
    1050:	70 0d       	add	r23, r0
    1052:	81 1d       	adc	r24, r1
    1054:	11 24       	eor	r1, r1
    1056:	91 1d       	adc	r25, r1
    1058:	08 95       	ret

0000105a <__muluhisi3>:
    105a:	0e 94 1e 08 	call	0x103c	; 0x103c <__umulhisi3>
    105e:	a5 9f       	mul	r26, r21
    1060:	90 0d       	add	r25, r0
    1062:	b4 9f       	mul	r27, r20
    1064:	90 0d       	add	r25, r0
    1066:	a4 9f       	mul	r26, r20
    1068:	80 0d       	add	r24, r0
    106a:	91 1d       	adc	r25, r1
    106c:	11 24       	eor	r1, r1
    106e:	08 95       	ret

00001070 <_exit>:
    1070:	f8 94       	cli

00001072 <__stop_program>:
    1072:	ff cf       	rjmp	.-2      	; 0x1072 <__stop_program>
