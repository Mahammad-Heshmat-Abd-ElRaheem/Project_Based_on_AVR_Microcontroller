
refrigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000085e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000085e  000008f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007c  0080007c  0000090e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a6b  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a00  00000000  00000000  00002577  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de9  00000000  00000000  00002f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00003d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063e  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf1  00000000  00000000  000046ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000052bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <main>
  8a:	0c 94 2d 04 	jmp	0x85a	; 0x85a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInit>:
#include "DIO_config.h"
#include "DIO_private.h"

void DIO_voidInit(void)
{
	DDRA=DIO_U8_PORTA_DIR;
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB=DIO_U8_PORTB_DIR;
  96:	8e e0       	ldi	r24, 0x0E	; 14
  98:	87 bb       	out	0x17, r24	; 23
	DDRC=DIO_U8_PORTC_DIR;
  9a:	14 ba       	out	0x14, r1	; 20
	DDRD=DIO_U8_PORTD_DIR;
  9c:	80 e3       	ldi	r24, 0x30	; 48
  9e:	81 bb       	out	0x11, r24	; 17
  a0:	08 95       	ret

000000a2 <DIO_voidSetPinValue>:
}

void DIO_voidSetPinValue(u8 Copy_u8Pin , u8 Copy_u8Value)
{
	if(Copy_u8Pin <= DIO_U8_PORTA_LAST_PIN)
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	00 f5       	brcc	.+64     	; 0xe6 <DIO_voidSetPinValue+0x44>
	{
		switch(Copy_u8Value)
  a6:	66 23       	and	r22, r22
  a8:	81 f0       	breq	.+32     	; 0xca <DIO_voidSetPinValue+0x28>
  aa:	61 30       	cpi	r22, 0x01	; 1
  ac:	09 f0       	breq	.+2      	; 0xb0 <DIO_voidSetPinValue+0xe>
  ae:	81 c0       	rjmp	.+258    	; 0x1b2 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTA,Copy_u8Pin); break;
  b0:	4b b3       	in	r20, 0x1b	; 27
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	b9 01       	movw	r22, r18
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_voidSetPinValue+0x1c>
  ba:	66 0f       	add	r22, r22
  bc:	77 1f       	adc	r23, r23
  be:	8a 95       	dec	r24
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_voidSetPinValue+0x18>
  c2:	cb 01       	movw	r24, r22
  c4:	84 2b       	or	r24, r20
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTA,Copy_u8Pin); break;
  ca:	4b b3       	in	r20, 0x1b	; 27
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	b9 01       	movw	r22, r18
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_voidSetPinValue+0x36>
  d4:	66 0f       	add	r22, r22
  d6:	77 1f       	adc	r23, r23
  d8:	8a 95       	dec	r24
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_voidSetPinValue+0x32>
  dc:	cb 01       	movw	r24, r22
  de:	80 95       	com	r24
  e0:	84 23       	and	r24, r20
  e2:	8b bb       	out	0x1b, r24	; 27
  e4:	08 95       	ret
		}
	}
	else if(Copy_u8Pin <= DIO_U8_PORTB_LAST_PIN)
  e6:	80 31       	cpi	r24, 0x10	; 16
  e8:	08 f5       	brcc	.+66     	; 0x12c <DIO_voidSetPinValue+0x8a>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTA_LAST_PIN + DIO_U8_PORT_OFFSET);
  ea:	88 50       	subi	r24, 0x08	; 8
		switch(Copy_u8Value)
  ec:	66 23       	and	r22, r22
  ee:	81 f0       	breq	.+32     	; 0x110 <DIO_voidSetPinValue+0x6e>
  f0:	61 30       	cpi	r22, 0x01	; 1
  f2:	09 f0       	breq	.+2      	; 0xf6 <DIO_voidSetPinValue+0x54>
  f4:	5e c0       	rjmp	.+188    	; 0x1b2 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTB,Copy_u8Pin); break;
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_voidSetPinValue+0x62>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_voidSetPinValue+0x5e>
 108:	cb 01       	movw	r24, r22
 10a:	84 2b       	or	r24, r20
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTB,Copy_u8Pin); break;
 110:	48 b3       	in	r20, 0x18	; 24
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	b9 01       	movw	r22, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinValue+0x7c>
 11a:	66 0f       	add	r22, r22
 11c:	77 1f       	adc	r23, r23
 11e:	8a 95       	dec	r24
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinValue+0x78>
 122:	cb 01       	movw	r24, r22
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	88 bb       	out	0x18, r24	; 24
 12a:	08 95       	ret
		}	
	}
	else if(Copy_u8Pin <= DIO_U8_PORTC_LAST_PIN)
 12c:	88 31       	cpi	r24, 0x18	; 24
 12e:	00 f5       	brcc	.+64     	; 0x170 <DIO_voidSetPinValue+0xce>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTB_LAST_PIN + DIO_U8_PORT_OFFSET);
 130:	80 51       	subi	r24, 0x10	; 16
		switch(Copy_u8Value)
 132:	66 23       	and	r22, r22
 134:	79 f0       	breq	.+30     	; 0x154 <DIO_voidSetPinValue+0xb2>
 136:	61 30       	cpi	r22, 0x01	; 1
 138:	e1 f5       	brne	.+120    	; 0x1b2 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTC,Copy_u8Pin); break;
 13a:	45 b3       	in	r20, 0x15	; 21
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	b9 01       	movw	r22, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_voidSetPinValue+0xa6>
 144:	66 0f       	add	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	8a 95       	dec	r24
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_voidSetPinValue+0xa2>
 14c:	cb 01       	movw	r24, r22
 14e:	84 2b       	or	r24, r20
 150:	85 bb       	out	0x15, r24	; 21
 152:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTC,Copy_u8Pin); break;
 154:	45 b3       	in	r20, 0x15	; 21
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	b9 01       	movw	r22, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_voidSetPinValue+0xc0>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	8a 95       	dec	r24
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_voidSetPinValue+0xbc>
 166:	cb 01       	movw	r24, r22
 168:	80 95       	com	r24
 16a:	84 23       	and	r24, r20
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	08 95       	ret
		}			
	}
	else if(Copy_u8Pin <= DIO_U8_PORTD_LAST_PIN)
 170:	80 32       	cpi	r24, 0x20	; 32
 172:	f8 f4       	brcc	.+62     	; 0x1b2 <DIO_voidSetPinValue+0x110>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTC_LAST_PIN + DIO_U8_PORT_OFFSET);
 174:	88 51       	subi	r24, 0x18	; 24
		switch(Copy_u8Value)
 176:	66 23       	and	r22, r22
 178:	79 f0       	breq	.+30     	; 0x198 <DIO_voidSetPinValue+0xf6>
 17a:	61 30       	cpi	r22, 0x01	; 1
 17c:	d1 f4       	brne	.+52     	; 0x1b2 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTD,Copy_u8Pin); break;
 17e:	42 b3       	in	r20, 0x12	; 18
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	b9 01       	movw	r22, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_voidSetPinValue+0xea>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	8a 95       	dec	r24
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_voidSetPinValue+0xe6>
 190:	cb 01       	movw	r24, r22
 192:	84 2b       	or	r24, r20
 194:	82 bb       	out	0x12, r24	; 18
 196:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTD,Copy_u8Pin); break;
 198:	42 b3       	in	r20, 0x12	; 18
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	b9 01       	movw	r22, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_voidSetPinValue+0x104>
 1a2:	66 0f       	add	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	8a 95       	dec	r24
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_voidSetPinValue+0x100>
 1aa:	cb 01       	movw	r24, r22
 1ac:	80 95       	com	r24
 1ae:	84 23       	and	r24, r20
 1b0:	82 bb       	out	0x12, r24	; 18
 1b2:	08 95       	ret

000001b4 <EXTI_voidEnableINT0>:
	 GIE_voidDisable ();                                         // *
	 EXTI_voidClearFlagINT0 ();                                 //*
}                                                                //*
void EXTI_voidEnableINT0 (void)                                  //*
{                                                                //*
	SET_BIT (GICR , 6);                                          //*
 1b4:	8b b7       	in	r24, 0x3b	; 59
 1b6:	80 64       	ori	r24, 0x40	; 64
 1b8:	8b bf       	out	0x3b, r24	; 59
 1ba:	08 95       	ret

000001bc <EXTI_voidDisableINT0>:
}                                                                //*
void EXTI_voidDisableINT0 (void)                                 //*
{                                                                //*
	CLEAR_BIT (GICR , 6);                                        //*
 1bc:	8b b7       	in	r24, 0x3b	; 59
 1be:	8f 7b       	andi	r24, 0xBF	; 191
 1c0:	8b bf       	out	0x3b, r24	; 59
 1c2:	08 95       	ret

000001c4 <EXTI_voidClearFlagINT0>:
}                                                                //*
void EXTI_voidClearFlagINT0 (void)                               //*
{                                                                //*
	SET_BIT(GIFR , 6);                                           //*
 1c4:	8a b7       	in	r24, 0x3a	; 58
 1c6:	80 64       	ori	r24, 0x40	; 64
 1c8:	8a bf       	out	0x3a, r24	; 58
 1ca:	08 95       	ret

000001cc <EXTI_voidInitINT0>:
		CLEAR_BIT (MCUCR,1);                                     //*
	#elif EXTI0_U8_EVENT == EXTI0_U8_RISING                        //*
		SET_BIT (MCUCR,0);                                       //*
		SET_BIT (MCUCR,1);                                       //*
	#elif EXTI0_U8_EVENT == EXTI0_U8_FALLING                       //*
		CLEAR_BIT (MCUCR,0);                                     //*
 1cc:	85 b7       	in	r24, 0x35	; 53
 1ce:	8e 7f       	andi	r24, 0xFE	; 254
 1d0:	85 bf       	out	0x35, r24	; 53
		SET_BIT (MCUCR,1);                                       //*
 1d2:	85 b7       	in	r24, 0x35	; 53
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	85 bf       	out	0x35, r24	; 53
	#elif EXTI0_U8_EVENT == EXTI0_U8_ANY_CHANGE                    //*
		SET_BIT (MCUCR,0);                                       //*
		CLEAR_BIT (MCUCR,1);                                     //*
	#endif                                                       //*
	 EXTI_voidDisableINT0 ();                                    // *
 1d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <EXTI_voidDisableINT0>
	 GIE_voidDisable ();                                         // *
 1dc:	0e 94 39 01 	call	0x272	; 0x272 <GIE_voidDisable>
	 EXTI_voidClearFlagINT0 ();                                 //*
 1e0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <EXTI_voidClearFlagINT0>
 1e4:	08 95       	ret

000001e6 <FAN_ON>:
#include "GIE_int.h"
#include "LCD_int.h"

void FAN_ON (void)
{
	DIO_voidSetPinValue(COMP,0);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	8d e1       	ldi	r24, 0x1D	; 29
 1ea:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(FAN,1);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	8c e1       	ldi	r24, 0x1C	; 28
 1f2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 1f6:	08 95       	ret

000001f8 <COMPRERSSOR_ON>:
}

void COMPRERSSOR_ON (void)
{
	DIO_voidSetPinValue(COMP,1);
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	8d e1       	ldi	r24, 0x1D	; 29
 1fc:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(FAN,0);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	8c e1       	ldi	r24, 0x1C	; 28
 204:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 208:	08 95       	ret

0000020a <BOTH_OFF>:
}

void BOTH_OFF (void)
{
	DIO_voidSetPinValue(COMP,0);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	8d e1       	ldi	r24, 0x1D	; 29
 20e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(FAN,0);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	8c e1       	ldi	r24, 0x1C	; 28
 216:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 21a:	08 95       	ret

0000021c <GET_TEMP>:

u8 GET_TEMP (void)
{
	u8 temperature = 0;
	
	if(GET_BIT(PINC,3)==1) {SET_BIT(temperature,0);}
 21c:	9b 9b       	sbis	0x13, 3	; 19
 21e:	02 c0       	rjmp	.+4      	; 0x224 <GET_TEMP+0x8>
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	01 c0       	rjmp	.+2      	; 0x226 <GET_TEMP+0xa>
	else {CLEAR_BIT(temperature,0);}
 224:	80 e0       	ldi	r24, 0x00	; 0
		
	if(GET_BIT(PINC,4)==1) {SET_BIT(temperature,1);}
 226:	9c 9b       	sbis	0x13, 4	; 19
 228:	02 c0       	rjmp	.+4      	; 0x22e <GET_TEMP+0x12>
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	01 c0       	rjmp	.+2      	; 0x230 <GET_TEMP+0x14>
	else {CLEAR_BIT(temperature,1);}
 22e:	8d 7f       	andi	r24, 0xFD	; 253
	
	if(GET_BIT(PINC,5)==1) {SET_BIT(temperature,2);}
 230:	9d 9b       	sbis	0x13, 5	; 19
 232:	02 c0       	rjmp	.+4      	; 0x238 <GET_TEMP+0x1c>
 234:	84 60       	ori	r24, 0x04	; 4
 236:	01 c0       	rjmp	.+2      	; 0x23a <GET_TEMP+0x1e>
	else {CLEAR_BIT(temperature,2);}
 238:	8b 7f       	andi	r24, 0xFB	; 251
	
	if(GET_BIT(PINC,6)==1) {SET_BIT(temperature,3);}
 23a:	9e 9b       	sbis	0x13, 6	; 19
 23c:	02 c0       	rjmp	.+4      	; 0x242 <GET_TEMP+0x26>
 23e:	88 60       	ori	r24, 0x08	; 8
 240:	01 c0       	rjmp	.+2      	; 0x244 <GET_TEMP+0x28>
	else {CLEAR_BIT(temperature,3);}
 242:	87 7f       	andi	r24, 0xF7	; 247
		
	if(GET_BIT(PINB,4)==1) {SET_BIT(temperature,4);}
 244:	b4 9b       	sbis	0x16, 4	; 22
 246:	02 c0       	rjmp	.+4      	; 0x24c <GET_TEMP+0x30>
 248:	80 61       	ori	r24, 0x10	; 16
 24a:	01 c0       	rjmp	.+2      	; 0x24e <GET_TEMP+0x32>
	else {CLEAR_BIT(temperature,4);}
 24c:	8f 7e       	andi	r24, 0xEF	; 239
	
	if(GET_BIT(PINB,5)==1) {SET_BIT(temperature,5);}
 24e:	b5 9b       	sbis	0x16, 5	; 22
 250:	02 c0       	rjmp	.+4      	; 0x256 <GET_TEMP+0x3a>
 252:	80 62       	ori	r24, 0x20	; 32
 254:	01 c0       	rjmp	.+2      	; 0x258 <GET_TEMP+0x3c>
	else {CLEAR_BIT(temperature,5);}
 256:	8f 7d       	andi	r24, 0xDF	; 223
	
	if(GET_BIT(PINB,6)==1) {SET_BIT(temperature,6);}
 258:	b6 9b       	sbis	0x16, 6	; 22
 25a:	02 c0       	rjmp	.+4      	; 0x260 <GET_TEMP+0x44>
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	01 c0       	rjmp	.+2      	; 0x262 <GET_TEMP+0x46>
	else {CLEAR_BIT(temperature,6);}
 260:	8f 7b       	andi	r24, 0xBF	; 191
	
	if(GET_BIT(PINB,7)==1) {SET_BIT(temperature,7);}
 262:	b7 9b       	sbis	0x16, 7	; 22
 264:	02 c0       	rjmp	.+4      	; 0x26a <GET_TEMP+0x4e>
 266:	80 68       	ori	r24, 0x80	; 128
 268:	08 95       	ret
	else {CLEAR_BIT(temperature,7);}
 26a:	8f 77       	andi	r24, 0x7F	; 127
	
	
	return temperature;
}
 26c:	08 95       	ret

0000026e <GIE_voidEnable>:


void GIE_voidEnable(void)
{
	//SET_BIT(SREG , SREG_I) ; // set I bit to enable the general interrupt enable
    __asm volatile ("SEI");/*Inline assembly syntax in GCC toolchain*/
 26e:	78 94       	sei
 270:	08 95       	ret

00000272 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
	
	//CLEAR_BIT(SREG , SREG_I); // clear I bit to disable the general interrupt enable
    __asm volatile("CLI");/*Inline assembly syntax in GCC toolchain*/
 272:	f8 94       	cli
 274:	08 95       	ret

00000276 <LCD_voidSendData>:
	for (u8 i = 0 ; i<2 ; i++)
	{
		arr[i] += 48 ;
		LCD_voidSendData(arr[i]);
	}
}
 276:	cf 93       	push	r28
 278:	c8 2f       	mov	r28, r24
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	8a e0       	ldi	r24, 0x0A	; 10
 27e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	89 e0       	ldi	r24, 0x09	; 9
 286:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 28a:	c4 fd       	sbrc	r28, 4
 28c:	05 c0       	rjmp	.+10     	; 0x298 <LCD_voidSendData+0x22>
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <LCD_voidSendData+0x2a>
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 2a0:	c5 fd       	sbrc	r28, 5
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <LCD_voidSendData+0x38>
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <LCD_voidSendData+0x40>
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 2b6:	c6 fd       	sbrc	r28, 6
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <LCD_voidSendData+0x4e>
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	86 e0       	ldi	r24, 0x06	; 6
 2be:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <LCD_voidSendData+0x56>
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 2cc:	cc 23       	and	r28, r28
 2ce:	2c f0       	brlt	.+10     	; 0x2da <LCD_voidSendData+0x64>
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <LCD_voidSendData+0x6c>
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	87 e0       	ldi	r24, 0x07	; 7
 2de:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	8b e0       	ldi	r24, 0x0B	; 11
 2e6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 2ea:	8f e9       	ldi	r24, 0x9F	; 159
 2ec:	9f e0       	ldi	r25, 0x0F	; 15
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_voidSendData+0x78>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_voidSendData+0x7e>
 2f4:	00 00       	nop
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	8b e0       	ldi	r24, 0x0B	; 11
 2fa:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 2fe:	8f e9       	ldi	r24, 0x9F	; 159
 300:	9f e0       	ldi	r25, 0x0F	; 15
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD_voidSendData+0x8c>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_voidSendData+0x92>
 308:	00 00       	nop
 30a:	c0 fd       	sbrc	r28, 0
 30c:	05 c0       	rjmp	.+10     	; 0x318 <LCD_voidSendData+0xa2>
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	84 e0       	ldi	r24, 0x04	; 4
 312:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 316:	04 c0       	rjmp	.+8      	; 0x320 <LCD_voidSendData+0xaa>
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 320:	c1 fd       	sbrc	r28, 1
 322:	05 c0       	rjmp	.+10     	; 0x32e <LCD_voidSendData+0xb8>
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 32c:	04 c0       	rjmp	.+8      	; 0x336 <LCD_voidSendData+0xc0>
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 336:	c2 fd       	sbrc	r28, 2
 338:	05 c0       	rjmp	.+10     	; 0x344 <LCD_voidSendData+0xce>
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	86 e0       	ldi	r24, 0x06	; 6
 33e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 342:	04 c0       	rjmp	.+8      	; 0x34c <LCD_voidSendData+0xd6>
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	86 e0       	ldi	r24, 0x06	; 6
 348:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 34c:	c3 fd       	sbrc	r28, 3
 34e:	05 c0       	rjmp	.+10     	; 0x35a <LCD_voidSendData+0xe4>
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	87 e0       	ldi	r24, 0x07	; 7
 354:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 358:	04 c0       	rjmp	.+8      	; 0x362 <LCD_voidSendData+0xec>
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	87 e0       	ldi	r24, 0x07	; 7
 35e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	8b e0       	ldi	r24, 0x0B	; 11
 366:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 36a:	8f e9       	ldi	r24, 0x9F	; 159
 36c:	9f e0       	ldi	r25, 0x0F	; 15
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCD_voidSendData+0xf8>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_voidSendData+0xfe>
 374:	00 00       	nop
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	8b e0       	ldi	r24, 0x0B	; 11
 37a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 37e:	8f e9       	ldi	r24, 0x9F	; 159
 380:	9f e0       	ldi	r25, 0x0F	; 15
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_voidSendData+0x10c>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_voidSendData+0x112>
 388:	00 00       	nop
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <LCD_voidSendCommand>:
 38e:	cf 93       	push	r28
 390:	c8 2f       	mov	r28, r24
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	8a e0       	ldi	r24, 0x0A	; 10
 396:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	89 e0       	ldi	r24, 0x09	; 9
 39e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 3a2:	c4 fd       	sbrc	r28, 4
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <LCD_voidSendCommand+0x22>
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	84 e0       	ldi	r24, 0x04	; 4
 3aa:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <LCD_voidSendCommand+0x2a>
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 3b8:	c5 fd       	sbrc	r28, 5
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <LCD_voidSendCommand+0x38>
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	85 e0       	ldi	r24, 0x05	; 5
 3c0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <LCD_voidSendCommand+0x40>
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	85 e0       	ldi	r24, 0x05	; 5
 3ca:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 3ce:	c6 fd       	sbrc	r28, 6
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <LCD_voidSendCommand+0x4e>
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	86 e0       	ldi	r24, 0x06	; 6
 3d6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <LCD_voidSendCommand+0x56>
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	86 e0       	ldi	r24, 0x06	; 6
 3e0:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 3e4:	cc 23       	and	r28, r28
 3e6:	2c f0       	brlt	.+10     	; 0x3f2 <LCD_voidSendCommand+0x64>
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	87 e0       	ldi	r24, 0x07	; 7
 3ec:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <LCD_voidSendCommand+0x6c>
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	87 e0       	ldi	r24, 0x07	; 7
 3f6:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	8b e0       	ldi	r24, 0x0B	; 11
 3fe:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 402:	8f e9       	ldi	r24, 0x9F	; 159
 404:	9f e0       	ldi	r25, 0x0F	; 15
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	8b e0       	ldi	r24, 0x0B	; 11
 412:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 416:	8f e9       	ldi	r24, 0x9F	; 159
 418:	9f e0       	ldi	r25, 0x0F	; 15
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
 422:	c0 fd       	sbrc	r28, 0
 424:	05 c0       	rjmp	.+10     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	84 e0       	ldi	r24, 0x04	; 4
 42a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 42e:	04 c0       	rjmp	.+8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	84 e0       	ldi	r24, 0x04	; 4
 434:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 438:	c1 fd       	sbrc	r28, 1
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	85 e0       	ldi	r24, 0x05	; 5
 440:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 444:	04 c0       	rjmp	.+8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	85 e0       	ldi	r24, 0x05	; 5
 44a:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 44e:	c2 fd       	sbrc	r28, 2
 450:	05 c0       	rjmp	.+10     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	86 e0       	ldi	r24, 0x06	; 6
 456:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 45a:	04 c0       	rjmp	.+8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 464:	c3 fd       	sbrc	r28, 3
 466:	05 c0       	rjmp	.+10     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	87 e0       	ldi	r24, 0x07	; 7
 46c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 470:	04 c0       	rjmp	.+8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	87 e0       	ldi	r24, 0x07	; 7
 476:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	8b e0       	ldi	r24, 0x0B	; 11
 47e:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 482:	8f e9       	ldi	r24, 0x9F	; 159
 484:	9f e0       	ldi	r25, 0x0F	; 15
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 48c:	00 00       	nop
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	8b e0       	ldi	r24, 0x0B	; 11
 492:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
 496:	8f e9       	ldi	r24, 0x9F	; 159
 498:	9f e0       	ldi	r25, 0x0F	; 15
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a0:	00 00       	nop
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <LCD_voidInit>:
 4a6:	2f e7       	ldi	r18, 0x7F	; 127
 4a8:	85 eb       	ldi	r24, 0xB5	; 181
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	21 50       	subi	r18, 0x01	; 1
 4ae:	80 40       	sbci	r24, 0x00	; 0
 4b0:	90 40       	sbci	r25, 0x00	; 0
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <LCD_voidInit+0x6>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <LCD_voidInit+0x10>
 4b6:	00 00       	nop
 4b8:	83 e3       	ldi	r24, 0x33	; 51
 4ba:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_voidSendCommand>
 4be:	8f e3       	ldi	r24, 0x3F	; 63
 4c0:	9f e1       	ldi	r25, 0x1F	; 31
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <LCD_voidInit+0x1c>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_voidInit+0x22>
 4c8:	00 00       	nop
 4ca:	82 e3       	ldi	r24, 0x32	; 50
 4cc:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_voidSendCommand>
 4d0:	8f e3       	ldi	r24, 0x3F	; 63
 4d2:	9f e1       	ldi	r25, 0x1F	; 31
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LCD_voidInit+0x2e>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <LCD_voidInit+0x34>
 4da:	00 00       	nop
 4dc:	88 e2       	ldi	r24, 0x28	; 40
 4de:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_voidSendCommand>
 4e2:	8f e3       	ldi	r24, 0x3F	; 63
 4e4:	9f e1       	ldi	r25, 0x1F	; 31
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LCD_voidInit+0x40>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <LCD_voidInit+0x46>
 4ec:	00 00       	nop
 4ee:	8c e0       	ldi	r24, 0x0C	; 12
 4f0:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_voidSendCommand>
 4f4:	8f e3       	ldi	r24, 0x3F	; 63
 4f6:	9f e1       	ldi	r25, 0x1F	; 31
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_voidInit+0x52>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_voidInit+0x58>
 4fe:	00 00       	nop
 500:	86 e0       	ldi	r24, 0x06	; 6
 502:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_voidSendCommand>
 506:	8f e3       	ldi	r24, 0x3F	; 63
 508:	9f e1       	ldi	r25, 0x1F	; 31
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <LCD_voidInit+0x64>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <LCD_voidInit+0x6a>
 510:	00 00       	nop
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_voidSendCommand>
 518:	8f e3       	ldi	r24, 0x3F	; 63
 51a:	9f e1       	ldi	r25, 0x1F	; 31
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <LCD_voidInit+0x76>
 520:	00 c0       	rjmp	.+0      	; 0x522 <LCD_voidInit+0x7c>
 522:	00 00       	nop
 524:	08 95       	ret

00000526 <LCD_voidSendString>:
 526:	0f 93       	push	r16
 528:	1f 93       	push	r17
 52a:	cf 93       	push	r28
 52c:	8c 01       	movw	r16, r24
 52e:	c0 e0       	ldi	r28, 0x00	; 0
 530:	03 c0       	rjmp	.+6      	; 0x538 <LCD_voidSendString+0x12>
 532:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_voidSendData>
 536:	cf 5f       	subi	r28, 0xFF	; 255
 538:	f8 01       	movw	r30, r16
 53a:	ec 0f       	add	r30, r28
 53c:	f1 1d       	adc	r31, r1
 53e:	80 81       	ld	r24, Z
 540:	81 11       	cpse	r24, r1
 542:	f7 cf       	rjmp	.-18     	; 0x532 <LCD_voidSendString+0xc>
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	08 95       	ret

0000054c <LCD_voidSetCursor>:
 54c:	86 0f       	add	r24, r22
 54e:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_voidSendCommand>
 552:	08 95       	ret

00000554 <LCD_voidSendNumberIII>:
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	00 d0       	rcall	.+0      	; 0x55c <LCD_voidSendNumberIII+0x8>
 55c:	00 d0       	rcall	.+0      	; 0x55e <LCD_voidSendNumberIII+0xa>
 55e:	00 d0       	rcall	.+0      	; 0x560 <LCD_voidSendNumberIII+0xc>
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
 564:	fc 01       	movw	r30, r24
 566:	9c 01       	movw	r18, r24
 568:	ad ec       	ldi	r26, 0xCD	; 205
 56a:	bc ec       	ldi	r27, 0xCC	; 204
 56c:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 570:	ac 01       	movw	r20, r24
 572:	56 95       	lsr	r21
 574:	47 95       	ror	r20
 576:	56 95       	lsr	r21
 578:	47 95       	ror	r20
 57a:	56 95       	lsr	r21
 57c:	47 95       	ror	r20
 57e:	ca 01       	movw	r24, r20
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	44 0f       	add	r20, r20
 586:	55 1f       	adc	r21, r21
 588:	44 0f       	add	r20, r20
 58a:	55 1f       	adc	r21, r21
 58c:	44 0f       	add	r20, r20
 58e:	55 1f       	adc	r21, r21
 590:	48 0f       	add	r20, r24
 592:	59 1f       	adc	r21, r25
 594:	cf 01       	movw	r24, r30
 596:	84 1b       	sub	r24, r20
 598:	95 0b       	sbc	r25, r21
 59a:	ac 01       	movw	r20, r24
 59c:	9e 83       	std	Y+6, r25	; 0x06
 59e:	8d 83       	std	Y+5, r24	; 0x05
 5a0:	36 95       	lsr	r19
 5a2:	27 95       	ror	r18
 5a4:	36 95       	lsr	r19
 5a6:	27 95       	ror	r18
 5a8:	ab e7       	ldi	r26, 0x7B	; 123
 5aa:	b4 e1       	ldi	r27, 0x14	; 20
 5ac:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 5b0:	96 95       	lsr	r25
 5b2:	87 95       	ror	r24
 5b4:	64 e6       	ldi	r22, 0x64	; 100
 5b6:	68 9f       	mul	r22, r24
 5b8:	90 01       	movw	r18, r0
 5ba:	69 9f       	mul	r22, r25
 5bc:	30 0d       	add	r19, r0
 5be:	11 24       	eor	r1, r1
 5c0:	cf 01       	movw	r24, r30
 5c2:	82 1b       	sub	r24, r18
 5c4:	93 0b       	sbc	r25, r19
 5c6:	9c 01       	movw	r18, r24
 5c8:	24 1b       	sub	r18, r20
 5ca:	35 0b       	sbc	r19, r21
 5cc:	ad ec       	ldi	r26, 0xCD	; 205
 5ce:	bc ec       	ldi	r27, 0xCC	; 204
 5d0:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 5d4:	ac 01       	movw	r20, r24
 5d6:	56 95       	lsr	r21
 5d8:	47 95       	ror	r20
 5da:	56 95       	lsr	r21
 5dc:	47 95       	ror	r20
 5de:	56 95       	lsr	r21
 5e0:	47 95       	ror	r20
 5e2:	5c 83       	std	Y+4, r21	; 0x04
 5e4:	4b 83       	std	Y+3, r20	; 0x03
 5e6:	9f 01       	movw	r18, r30
 5e8:	36 95       	lsr	r19
 5ea:	27 95       	ror	r18
 5ec:	36 95       	lsr	r19
 5ee:	27 95       	ror	r18
 5f0:	36 95       	lsr	r19
 5f2:	27 95       	ror	r18
 5f4:	a5 ec       	ldi	r26, 0xC5	; 197
 5f6:	b0 e2       	ldi	r27, 0x20	; 32
 5f8:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 5fc:	92 95       	swap	r25
 5fe:	82 95       	swap	r24
 600:	8f 70       	andi	r24, 0x0F	; 15
 602:	89 27       	eor	r24, r25
 604:	9f 70       	andi	r25, 0x0F	; 15
 606:	89 27       	eor	r24, r25
 608:	68 ee       	ldi	r22, 0xE8	; 232
 60a:	73 e0       	ldi	r23, 0x03	; 3
 60c:	86 9f       	mul	r24, r22
 60e:	90 01       	movw	r18, r0
 610:	87 9f       	mul	r24, r23
 612:	30 0d       	add	r19, r0
 614:	96 9f       	mul	r25, r22
 616:	30 0d       	add	r19, r0
 618:	11 24       	eor	r1, r1
 61a:	cf 01       	movw	r24, r30
 61c:	82 1b       	sub	r24, r18
 61e:	93 0b       	sbc	r25, r19
 620:	84 1b       	sub	r24, r20
 622:	95 0b       	sbc	r25, r21
 624:	9c 01       	movw	r18, r24
 626:	36 95       	lsr	r19
 628:	27 95       	ror	r18
 62a:	36 95       	lsr	r19
 62c:	27 95       	ror	r18
 62e:	ab e7       	ldi	r26, 0x7B	; 123
 630:	b4 e1       	ldi	r27, 0x14	; 20
 632:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	9a 83       	std	Y+2, r25	; 0x02
 63c:	89 83       	std	Y+1, r24	; 0x01
 63e:	10 e0       	ldi	r17, 0x00	; 0
 640:	12 c0       	rjmp	.+36     	; 0x666 <LCD_voidSendNumberIII+0x112>
 642:	e1 2f       	mov	r30, r17
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	ee 0f       	add	r30, r30
 648:	ff 1f       	adc	r31, r31
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	8c 0f       	add	r24, r28
 650:	9d 1f       	adc	r25, r29
 652:	e8 0f       	add	r30, r24
 654:	f9 1f       	adc	r31, r25
 656:	80 81       	ld	r24, Z
 658:	91 81       	ldd	r25, Z+1	; 0x01
 65a:	c0 96       	adiw	r24, 0x30	; 48
 65c:	91 83       	std	Z+1, r25	; 0x01
 65e:	80 83       	st	Z, r24
 660:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_voidSendData>
 664:	1f 5f       	subi	r17, 0xFF	; 255
 666:	13 30       	cpi	r17, 0x03	; 3
 668:	60 f3       	brcs	.-40     	; 0x642 <LCD_voidSendNumberIII+0xee>
 66a:	26 96       	adiw	r28, 0x06	; 6
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	de bf       	out	0x3e, r29	; 62
 672:	0f be       	out	0x3f, r0	; 63
 674:	cd bf       	out	0x3d, r28	; 61
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	1f 91       	pop	r17
 67c:	08 95       	ret

0000067e <LCD_voidClear>:

void LCD_voidClear(void)
{
 67e:	cf 93       	push	r28
		for(u8 t =0  ; t<16 ; t++)
 680:	c0 e0       	ldi	r28, 0x00	; 0
 682:	08 c0       	rjmp	.+16     	; 0x694 <LCD_voidClear+0x16>
		{
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
 684:	6c 2f       	mov	r22, r28
 686:	80 e8       	ldi	r24, 0x80	; 128
 688:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidSetCursor>
			LCD_voidSendData(32);
 68c:	80 e2       	ldi	r24, 0x20	; 32
 68e:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_voidSendData>
	}
}

void LCD_voidClear(void)
{
		for(u8 t =0  ; t<16 ; t++)
 692:	cf 5f       	subi	r28, 0xFF	; 255
 694:	c0 31       	cpi	r28, 0x10	; 16
 696:	b0 f3       	brcs	.-20     	; 0x684 <LCD_voidClear+0x6>
 698:	c0 e0       	ldi	r28, 0x00	; 0
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <LCD_voidClear+0x2e>
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
			LCD_voidSendData(32);
		}
		for(u8 t =0  ; t<16 ; t++)
		{
			LCD_voidSetCursor(LCD_U8_LINE2 ,t);
 69c:	6c 2f       	mov	r22, r28
 69e:	80 ec       	ldi	r24, 0xC0	; 192
 6a0:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidSetCursor>
			LCD_voidSendData(32);
 6a4:	80 e2       	ldi	r24, 0x20	; 32
 6a6:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_voidSendData>
		for(u8 t =0  ; t<16 ; t++)
		{
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
			LCD_voidSendData(32);
		}
		for(u8 t =0  ; t<16 ; t++)
 6aa:	cf 5f       	subi	r28, 0xFF	; 255
 6ac:	c0 31       	cpi	r28, 0x10	; 16
 6ae:	b0 f3       	brcs	.-20     	; 0x69c <LCD_voidClear+0x1e>
			LCD_voidSetCursor(LCD_U8_LINE2 ,t);
			LCD_voidSendData(32);
		}
	
	
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <__vector_1>:
#include "FUNCTIONS.h"

u8 TEMP ;

ISR(INT0_vect)
{
 6b4:	1f 92       	push	r1
 6b6:	0f 92       	push	r0
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	0f 92       	push	r0
 6bc:	11 24       	eor	r1, r1
 6be:	2f 93       	push	r18
 6c0:	3f 93       	push	r19
 6c2:	4f 93       	push	r20
 6c4:	5f 93       	push	r21
 6c6:	6f 93       	push	r22
 6c8:	7f 93       	push	r23
 6ca:	8f 93       	push	r24
 6cc:	9f 93       	push	r25
 6ce:	af 93       	push	r26
 6d0:	bf 93       	push	r27
 6d2:	ef 93       	push	r30
 6d4:	ff 93       	push	r31
	TEMP =  GET_TEMP();
 6d6:	0e 94 0e 01 	call	0x21c	; 0x21c <GET_TEMP>
 6da:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
	LCD_voidSetCursor(LCD_U8_LINE1,9);
 6de:	69 e0       	ldi	r22, 0x09	; 9
 6e0:	80 e8       	ldi	r24, 0x80	; 128
 6e2:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidSetCursor>
	LCD_voidSendNumberIII (TEMP);
 6e6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidSendNumberIII>
	
	
	LCD_voidSetCursor(LCD_U8_LINE2,1);
 6f0:	61 e0       	ldi	r22, 0x01	; 1
 6f2:	80 ec       	ldi	r24, 0xC0	; 192
 6f4:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidSetCursor>
	LCD_voidSendString("Temp(   :   )C");
 6f8:	80 e6       	ldi	r24, 0x60	; 96
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0e 94 93 02 	call	0x526	; 0x526 <LCD_voidSendString>
	LCD_voidSetCursor(LCD_U8_LINE2,6);
 700:	66 e0       	ldi	r22, 0x06	; 6
 702:	80 ec       	ldi	r24, 0xC0	; 192
 704:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidSetCursor>
	
	if (TEMP<5) { LCD_voidSendNumberIII (0);}
 708:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 70c:	85 30       	cpi	r24, 0x05	; 5
 70e:	28 f4       	brcc	.+10     	; 0x71a <__vector_1+0x66>
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidSendNumberIII>
 718:	04 c0       	rjmp	.+8      	; 0x722 <__vector_1+0x6e>
	else {LCD_voidSendNumberIII (TEMP-5);}
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	05 97       	sbiw	r24, 0x05	; 5
 71e:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidSendNumberIII>
	
	LCD_voidSetCursor(LCD_U8_LINE2,10);
 722:	6a e0       	ldi	r22, 0x0A	; 10
 724:	80 ec       	ldi	r24, 0xC0	; 192
 726:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidSetCursor>
	if (TEMP>225) { LCD_voidSendNumberIII (255);}
 72a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 72e:	82 3e       	cpi	r24, 0xE2	; 226
 730:	28 f0       	brcs	.+10     	; 0x73c <__vector_1+0x88>
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidSendNumberIII>
 73a:	04 c0       	rjmp	.+8      	; 0x744 <__vector_1+0x90>
	else {LCD_voidSendNumberIII (TEMP+5);}
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	05 96       	adiw	r24, 0x05	; 5
 740:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidSendNumberIII>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 744:	2a ea       	ldi	r18, 0xAA	; 170
 746:	36 ee       	ldi	r19, 0xE6	; 230
 748:	86 e9       	ldi	r24, 0x96	; 150
 74a:	91 e0       	ldi	r25, 0x01	; 1
 74c:	21 50       	subi	r18, 0x01	; 1
 74e:	30 40       	sbci	r19, 0x00	; 0
 750:	80 40       	sbci	r24, 0x00	; 0
 752:	90 40       	sbci	r25, 0x00	; 0
 754:	d9 f7       	brne	.-10     	; 0x74c <__vector_1+0x98>
 756:	00 00       	nop
	
	_delay_ms(10000);
	
	LCD_voidClear();
 758:	0e 94 3f 03 	call	0x67e	; 0x67e <LCD_voidClear>
	LCD_voidSetCursor(LCD_U8_LINE1,2);
 75c:	62 e0       	ldi	r22, 0x02	; 2
 75e:	80 e8       	ldi	r24, 0x80	; 128
 760:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidSetCursor>
	LCD_voidSendString("Temp =     C");
 764:	8f e6       	ldi	r24, 0x6F	; 111
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 93 02 	call	0x526	; 0x526 <LCD_voidSendString>
	LCD_voidSetCursor(LCD_U8_LINE1,9);
 76c:	69 e0       	ldi	r22, 0x09	; 9
 76e:	80 e8       	ldi	r24, 0x80	; 128
 770:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidSetCursor>
	LCD_voidSendNumberIII (TEMP);
 774:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidSendNumberIII>
	DIO_voidSetPinValue(INT0_PIN,1);
 77e:	61 e0       	ldi	r22, 0x01	; 1
 780:	8a e1       	ldi	r24, 0x1A	; 26
 782:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
}
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	bf 91       	pop	r27
 78c:	af 91       	pop	r26
 78e:	9f 91       	pop	r25
 790:	8f 91       	pop	r24
 792:	7f 91       	pop	r23
 794:	6f 91       	pop	r22
 796:	5f 91       	pop	r21
 798:	4f 91       	pop	r20
 79a:	3f 91       	pop	r19
 79c:	2f 91       	pop	r18
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <main>:



int main(void)
{
	DIO_voidInit();
 7a8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInit>
    EXTI_voidInitINT0();
 7ac:	0e 94 e6 00 	call	0x1cc	; 0x1cc <EXTI_voidInitINT0>
	EXTI_voidEnableINT0();
 7b0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <EXTI_voidEnableINT0>
	GIE_voidEnable();
 7b4:	0e 94 37 01 	call	0x26e	; 0x26e <GIE_voidEnable>
	LCD_voidInit();
 7b8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_voidInit>
	PORTC=255;
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	85 bb       	out	0x15, r24	; 21
	SET_BIT(PORTB,4);
 7c0:	88 b3       	in	r24, 0x18	; 24
 7c2:	80 61       	ori	r24, 0x10	; 16
 7c4:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,5);
 7c6:	88 b3       	in	r24, 0x18	; 24
 7c8:	80 62       	ori	r24, 0x20	; 32
 7ca:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,6);
 7cc:	88 b3       	in	r24, 0x18	; 24
 7ce:	80 64       	ori	r24, 0x40	; 64
 7d0:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,7);
 7d2:	88 b3       	in	r24, 0x18	; 24
 7d4:	80 68       	ori	r24, 0x80	; 128
 7d6:	88 bb       	out	0x18, r24	; 24
	DIO_voidSetPinValue(INT0_PIN,1);
 7d8:	61 e0       	ldi	r22, 0x01	; 1
 7da:	8a e1       	ldi	r24, 0x1A	; 26
 7dc:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetPinValue>
	
	
	LCD_voidClear();
 7e0:	0e 94 3f 03 	call	0x67e	; 0x67e <LCD_voidClear>
	LCD_voidSetCursor(LCD_U8_LINE1,2);
 7e4:	62 e0       	ldi	r22, 0x02	; 2
 7e6:	80 e8       	ldi	r24, 0x80	; 128
 7e8:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidSetCursor>
	LCD_voidSendString("Temp =     C");
 7ec:	8f e6       	ldi	r24, 0x6F	; 111
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 93 02 	call	0x526	; 0x526 <LCD_voidSendString>
	
	
    while (1) 
    {
		 TEMP = GET_TEMP();
 7f4:	0e 94 0e 01 	call	0x21c	; 0x21c <GET_TEMP>
 7f8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		 
		 if (TEMP > 15)
 7fc:	80 31       	cpi	r24, 0x10	; 16
 7fe:	18 f0       	brcs	.+6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		 {
			COMPRERSSOR_ON();
 800:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <COMPRERSSOR_ON>
 804:	08 c0       	rjmp	.+16     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		 }
		 else if ((TEMP >= 5)&(TEMP <= 15))
 806:	85 50       	subi	r24, 0x05	; 5
 808:	8b 30       	cpi	r24, 0x0B	; 11
 80a:	18 f4       	brcc	.+6      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		 {
			 FAN_ON();
 80c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <FAN_ON>
 810:	02 c0       	rjmp	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		 }
		 else
		 {
			 BOTH_OFF();
 812:	0e 94 05 01 	call	0x20a	; 0x20a <BOTH_OFF>
		 }
		 
		 
		 LCD_voidSetCursor(LCD_U8_LINE1,9);
 816:	69 e0       	ldi	r22, 0x09	; 9
 818:	80 e8       	ldi	r24, 0x80	; 128
 81a:	0e 94 a6 02 	call	0x54c	; 0x54c <LCD_voidSetCursor>
		 LCD_voidSendNumberIII (TEMP);
 81e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_voidSendNumberIII>
 828:	2f ef       	ldi	r18, 0xFF	; 255
 82a:	81 e4       	ldi	r24, 0x41	; 65
 82c:	9f ee       	ldi	r25, 0xEF	; 239
 82e:	21 50       	subi	r18, 0x01	; 1
 830:	80 40       	sbci	r24, 0x00	; 0
 832:	90 40       	sbci	r25, 0x00	; 0
 834:	e1 f7       	brne	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 836:	00 c0       	rjmp	.+0      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 838:	00 00       	nop
 83a:	dc cf       	rjmp	.-72     	; 0x7f4 <main+0x4c>

0000083c <__umulhisi3>:
 83c:	a2 9f       	mul	r26, r18
 83e:	b0 01       	movw	r22, r0
 840:	b3 9f       	mul	r27, r19
 842:	c0 01       	movw	r24, r0
 844:	a3 9f       	mul	r26, r19
 846:	70 0d       	add	r23, r0
 848:	81 1d       	adc	r24, r1
 84a:	11 24       	eor	r1, r1
 84c:	91 1d       	adc	r25, r1
 84e:	b2 9f       	mul	r27, r18
 850:	70 0d       	add	r23, r0
 852:	81 1d       	adc	r24, r1
 854:	11 24       	eor	r1, r1
 856:	91 1d       	adc	r25, r1
 858:	08 95       	ret

0000085a <_exit>:
 85a:	f8 94       	cli

0000085c <__stop_program>:
 85c:	ff cf       	rjmp	.-2      	; 0x85c <__stop_program>
